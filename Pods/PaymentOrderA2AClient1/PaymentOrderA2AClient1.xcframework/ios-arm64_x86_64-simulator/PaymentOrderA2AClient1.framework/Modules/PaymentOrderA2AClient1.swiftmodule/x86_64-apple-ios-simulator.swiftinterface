// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PaymentOrderA2AClient1
import Backbase
import ClientCommon
import Foundation
import Swift
public protocol A2aClientAPIProtocol {
  func createCall(externalAccountPostRequest: PaymentOrderA2AClient1.ExternalAccountPostRequest) throws -> ClientCommon.Call<PaymentOrderA2AClient1.ExternalAccountGetPostPutResponse>
  func deleteCall(externalAccountId: Swift.String) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  func getAllCall() throws -> ClientCommon.Call<PaymentOrderA2AClient1.ExternalAccountGetResponse>
  func getByIdCall(externalAccountId: Swift.String) throws -> ClientCommon.Call<PaymentOrderA2AClient1.ExternalAccountGetPostPutResponse>
  func updateCall(externalAccountId: Swift.String, externalAccountPutRequest: PaymentOrderA2AClient1.ExternalAccountPutRequest) throws -> ClientCommon.Call<PaymentOrderA2AClient1.ExternalAccountGetPostPutResponse>
  func verifyCall(externalAccountId: Swift.String, externalAccountVerificationPutRequest: PaymentOrderA2AClient1.ExternalAccountVerificationPutRequest) throws -> ClientCommon.Call<PaymentOrderA2AClient1.ExternalAccountGetPostPutResponse>
}
@objc @_inheritsConvenienceInitializers public class A2aClientAPI : ObjectiveC.NSObject, DBSClient, PaymentOrderA2AClient1.A2aClientAPIProtocol {
  @objc public var dataProvider: DBSDataProvider?
  @objc public var baseURL: Foundation.URL
  @objc override dynamic public init()
  required public init(dataProvider: DBSDataProvider, baseURL: Foundation.URL)
  open func createCall(externalAccountPostRequest: PaymentOrderA2AClient1.ExternalAccountPostRequest) throws -> ClientCommon.Call<PaymentOrderA2AClient1.ExternalAccountGetPostPutResponse>
  open func deleteCall(externalAccountId: Swift.String) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  open func getAllCall() throws -> ClientCommon.Call<PaymentOrderA2AClient1.ExternalAccountGetResponse>
  open func getByIdCall(externalAccountId: Swift.String) throws -> ClientCommon.Call<PaymentOrderA2AClient1.ExternalAccountGetPostPutResponse>
  open func updateCall(externalAccountId: Swift.String, externalAccountPutRequest: PaymentOrderA2AClient1.ExternalAccountPutRequest) throws -> ClientCommon.Call<PaymentOrderA2AClient1.ExternalAccountGetPostPutResponse>
  open func verifyCall(externalAccountId: Swift.String, externalAccountVerificationPutRequest: PaymentOrderA2AClient1.ExternalAccountVerificationPutRequest) throws -> ClientCommon.Call<PaymentOrderA2AClient1.ExternalAccountGetPostPutResponse>
  @objc deinit
}
public struct APIHelper {
  public static func rejectNil(_ source: [Swift.String : Any?]) -> [Swift.String : Any]?
  public static func rejectNilHeaders(_ source: [Swift.String : Any?]) -> [Swift.String : Swift.String]
  public static func convertBoolToString(_ source: [Swift.String : Any]?) -> [Swift.String : Any]?
  public static func mapValueToPathItem(_ source: Any) -> Any
  public static func mapValuesToQueryItems(_ source: [Swift.String : Any?]) -> [Foundation.URLQueryItem]?
}
public enum AccountStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
  case active
  case inProcess
  case pendingActivation
  case failedVerification
  case rejectedByExternalBank
  case disabledForExcessiveReturns
  case disabledForFraud
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [PaymentOrderA2AClient1.AccountStatus]
  public static var allCases: [PaymentOrderA2AClient1.AccountStatus] {
    get
  }
}
public enum AccountType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case checking
  case savings
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [PaymentOrderA2AClient1.AccountType]
  public static var allCases: [PaymentOrderA2AClient1.AccountType] {
    get
  }
}
@_hasMissingDesignatedInitializers open class CodableHelper {
  public static var dateTimeFormatter: Foundation.DateFormatter {
    get
    set
  }
  public static var dateFormatter: Foundation.DateFormatter {
    get
    set
  }
  public static var jsonDecoder: Foundation.JSONDecoder {
    get
    set
  }
  public static var jsonEncoder: Foundation.JSONEncoder {
    get
    set
  }
  open class func decodeDate<T>(from container: Swift.KeyedDecodingContainer<T>, forKey: T) throws -> Foundation.Date where T : Swift.CodingKey
  open class func decodeDateIfPresent<T>(from container: Swift.KeyedDecodingContainer<T>, forKey: T) throws -> Foundation.Date? where T : Swift.CodingKey
  open class func decodeDateTime<T>(from container: Swift.KeyedDecodingContainer<T>, forKey: T) throws -> Foundation.Date where T : Swift.CodingKey
  open class func decodeDateTimeIfPresent<T>(from container: Swift.KeyedDecodingContainer<T>, forKey: T) throws -> Foundation.Date? where T : Swift.CodingKey
  open class func decode<T>(_ type: T.Type, from data: Foundation.Data) -> Swift.Result<T, Swift.Error> where T : Swift.Decodable
  open class func encode<T>(_ value: T) -> Swift.Result<Foundation.Data, Swift.Error> where T : Swift.Encodable
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Configuration {
  @available(*, unavailable, message: "To set a different date format, use CodableHelper.dateFormatter instead.")
  public static var dateFormat: Swift.String
  @objc deinit
}
public struct DetailedExternalAccount : Swift.Codable, Swift.Equatable {
  public var externalAccountId: Swift.String
  public var accountType: PaymentOrderA2AClient1.AccountType
  public var status: PaymentOrderA2AClient1.AccountStatus
  public var bankName: Swift.String
  public var routingNumber: Swift.String
  public var accountNumber: Swift.String
  public var maskedAccountNumber: Swift.String?
  public var accountNickName: Swift.String?
  public init(externalAccountId: Swift.String, accountType: PaymentOrderA2AClient1.AccountType, status: PaymentOrderA2AClient1.AccountStatus, bankName: Swift.String, routingNumber: Swift.String, accountNumber: Swift.String, maskedAccountNumber: Swift.String? = nil, accountNickName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: PaymentOrderA2AClient1.DetailedExternalAccount, b: PaymentOrderA2AClient1.DetailedExternalAccount) -> Swift.Bool
}
public struct ErrorItem : Swift.Codable, Swift.Equatable {
  public var message: Swift.String?
  public var key: Swift.String?
  public var context: [Swift.String : Swift.String]?
  public init(message: Swift.String? = nil, key: Swift.String? = nil, context: [Swift.String : Swift.String]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: PaymentOrderA2AClient1.ErrorItem, b: PaymentOrderA2AClient1.ErrorItem) -> Swift.Bool
}
extension String : Swift.CodingKey {
  public var stringValue: Swift.String {
    get
  }
  public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
}
extension KeyedEncodingContainerProtocol {
  public mutating func encodeArray<T>(_ values: [T], forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeArrayIfPresent<T>(_ values: [T]?, forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeMap<T>(_ pairs: [Self.Key : T]) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
  public mutating func encodeMapIfPresent<T>(_ pairs: [Self.Key : T]?) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
}
extension KeyedDecodingContainerProtocol {
  public func decodeArray<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T] where T : Swift.Decodable
  public func decodeArrayIfPresent<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T]? where T : Swift.Decodable
  public func decodeMap<T>(_ type: T.Type, excludedKeys: Swift.Set<Self.Key>) throws -> [Self.Key : T] where T : Swift.Decodable, Self.Key : Swift.Hashable
}
public struct ExternalAccountGetPostPutResponse : Swift.Codable, Swift.Equatable {
  public var externalAccountId: Swift.String
  public var accountType: PaymentOrderA2AClient1.AccountType
  public var status: PaymentOrderA2AClient1.AccountStatus
  public var bankName: Swift.String
  public var routingNumber: Swift.String
  public var accountNumber: Swift.String
  public var maskedAccountNumber: Swift.String?
  public var accountNickName: Swift.String?
  public init(externalAccountId: Swift.String, accountType: PaymentOrderA2AClient1.AccountType, status: PaymentOrderA2AClient1.AccountStatus, bankName: Swift.String, routingNumber: Swift.String, accountNumber: Swift.String, maskedAccountNumber: Swift.String? = nil, accountNickName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: PaymentOrderA2AClient1.ExternalAccountGetPostPutResponse, b: PaymentOrderA2AClient1.ExternalAccountGetPostPutResponse) -> Swift.Bool
}
public struct ExternalAccountGetResponse : Swift.Codable, Swift.Equatable {
  public var accounts: [PaymentOrderA2AClient1.DetailedExternalAccount]?
  public init(accounts: [PaymentOrderA2AClient1.DetailedExternalAccount]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: PaymentOrderA2AClient1.ExternalAccountGetResponse, b: PaymentOrderA2AClient1.ExternalAccountGetResponse) -> Swift.Bool
}
public struct ExternalAccountPostRequest : Swift.Codable, Swift.Equatable {
  public var accountType: PaymentOrderA2AClient1.AccountType
  public var routingNumber: Swift.String
  public var accountNumber: Swift.String
  public var accountNickName: Swift.String?
  public init(accountType: PaymentOrderA2AClient1.AccountType, routingNumber: Swift.String, accountNumber: Swift.String, accountNickName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: PaymentOrderA2AClient1.ExternalAccountPostRequest, b: PaymentOrderA2AClient1.ExternalAccountPostRequest) -> Swift.Bool
}
public struct ExternalAccountPutRequest : Swift.Codable, Swift.Equatable {
  public var accountNickName: Swift.String?
  public init(accountNickName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: PaymentOrderA2AClient1.ExternalAccountPutRequest, b: PaymentOrderA2AClient1.ExternalAccountPutRequest) -> Swift.Bool
}
public struct ExternalAccountVerificationPutRequest : Swift.Codable, Swift.Equatable {
  public var value1: Swift.Double
  public var value2: Swift.Double
  public init(value1: Swift.Double, value2: Swift.Double)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: PaymentOrderA2AClient1.ExternalAccountVerificationPutRequest, b: PaymentOrderA2AClient1.ExternalAccountVerificationPutRequest) -> Swift.Bool
}
public struct ModelError : Swift.Codable, Swift.Equatable {
  public var message: Swift.String
  public var errors: [PaymentOrderA2AClient1.ErrorItem]?
  public init(message: Swift.String, errors: [PaymentOrderA2AClient1.ErrorItem]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: PaymentOrderA2AClient1.ModelError, b: PaymentOrderA2AClient1.ModelError) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OpenISO8601DateFormatter : Foundation.DateFormatter {
  @objc override dynamic public func date(from string: Swift.String) -> Foundation.Date?
  @objc deinit
}
extension PaymentOrderA2AClient1.AccountStatus : Swift.Equatable {}
extension PaymentOrderA2AClient1.AccountStatus : Swift.Hashable {}
extension PaymentOrderA2AClient1.AccountStatus : Swift.RawRepresentable {}
extension PaymentOrderA2AClient1.AccountType : Swift.Equatable {}
extension PaymentOrderA2AClient1.AccountType : Swift.Hashable {}
extension PaymentOrderA2AClient1.AccountType : Swift.RawRepresentable {}
