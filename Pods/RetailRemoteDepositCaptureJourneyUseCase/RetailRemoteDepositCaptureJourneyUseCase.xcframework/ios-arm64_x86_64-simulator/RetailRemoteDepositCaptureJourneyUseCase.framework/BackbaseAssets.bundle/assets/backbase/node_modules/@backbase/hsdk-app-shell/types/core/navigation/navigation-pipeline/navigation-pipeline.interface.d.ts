import { InitialTransition, Transition } from '../../../types';
import { ViewInstanceId } from '../../views/view-instance/view-instance.interface';
import { ViewId } from '../../views/view/view.interface';
export declare enum NavigationProgress {
    AfterNavigate = "afterNavigate",
    AfterTransitionEnd = "afterTransitionEnd",
    BeforeNavigate = "beforeNavigate",
    BeforeTransitionStart = "beforeTransitionStart"
}
export declare enum NavigationResultStatus {
    Canceled = "canceled",
    Complete = "complete",
    Failed = "failed"
}
export interface NavigationResult {
    status: NavigationResultStatus;
}
export declare type UpdateNavigationStateFunction = () => ViewInstanceId | null;
export interface NavigationPipeline {
    performInitialNavigation: (target: ViewInstanceId, initialTransition: InitialTransition) => Promise<void>;
    performNavigation: (origin: ViewInstanceId, target: ViewId | null, updateNavigationStateFunction: UpdateNavigationStateFunction, transition: Transition) => Promise<NavigationResult>;
}
