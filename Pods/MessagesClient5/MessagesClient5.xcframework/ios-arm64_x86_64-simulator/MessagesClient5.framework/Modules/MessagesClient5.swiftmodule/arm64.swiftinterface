// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MessagesClient5
import Backbase
import ClientCommon
import Foundation
import Swift
public struct APIHelper {
  public static func rejectNil(_ source: [Swift.String : Any?]) -> [Swift.String : Any]?
  public static func rejectNilHeaders(_ source: [Swift.String : Any?]) -> [Swift.String : Swift.String]
  public static func convertBoolToString(_ source: [Swift.String : Any]?) -> [Swift.String : Any]?
  public static func mapValueToPathItem(_ source: Any) -> Any
  public static func mapValuesToQueryItems(_ source: [Swift.String : Any?]) -> [Foundation.URLQueryItem]?
}
public struct BadRequestError : Swift.Codable, Swift.Equatable {
  public var message: Swift.String
  public var errors: [MessagesClient5.ErrorItem]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of BadRequestError.Builder class.")
  public init(message: Swift.String, errors: [MessagesClient5.ErrorItem]? = nil)
  final public class Builder : Swift.Equatable {
    final public let message: Swift.String
    final public var errors: [MessagesClient5.ErrorItem]? {
      get
    }
    public init(message: Swift.String)
    final public func set(errors: [MessagesClient5.ErrorItem]?) -> Self
    final public func build() -> MessagesClient5.BadRequestError
    public static func == (lhs: MessagesClient5.BadRequestError.Builder, rhs: MessagesClient5.BadRequestError.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.BadRequestError, rhs: MessagesClient5.BadRequestError) -> Swift.Bool
}
public struct Client : Swift.Codable, Swift.Equatable {
  public var internalId: Swift.String
  public var fullName: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of Client.Builder class.")
  public init(internalId: Swift.String, fullName: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let internalId: Swift.String
    final public let fullName: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(internalId: Swift.String, fullName: Swift.String)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.Client
    public static func == (lhs: MessagesClient5.Client.Builder, rhs: MessagesClient5.Client.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.Client, rhs: MessagesClient5.Client) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class CodableHelper {
  public static var dateTimeFormatter: Foundation.DateFormatter {
    get
    set
  }
  public static var dateFormatter: Foundation.DateFormatter {
    get
    set
  }
  public static var jsonDecoder: Foundation.JSONDecoder {
    get
    set
  }
  public static var jsonEncoder: Foundation.JSONEncoder {
    get
    set
  }
  open class func decodeDate<T>(from container: Swift.KeyedDecodingContainer<T>, forKey: T) throws -> Foundation.Date where T : Swift.CodingKey
  open class func decodeDateIfPresent<T>(from container: Swift.KeyedDecodingContainer<T>, forKey: T) throws -> Foundation.Date? where T : Swift.CodingKey
  open class func decodeDateTime<T>(from container: Swift.KeyedDecodingContainer<T>, forKey: T) throws -> Foundation.Date where T : Swift.CodingKey
  open class func decodeDateTimeIfPresent<T>(from container: Swift.KeyedDecodingContainer<T>, forKey: T) throws -> Foundation.Date? where T : Swift.CodingKey
  open class func decode<T>(_ type: T.Type, from data: Foundation.Data) -> Swift.Result<T, Swift.Error> where T : Swift.Decodable
  open class func encode<T>(_ value: T) -> Swift.Result<Foundation.Data, Swift.Error> where T : Swift.Encodable
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Configuration {
  @available(*, unavailable, message: "To set a different date format, use CodableHelper.dateFormatter instead.")
  public static var dateFormat: Swift.String
  @objc deinit
}
public struct ConversationAssignementDeleteResponseBody : Swift.Codable, Swift.Equatable {
  public var unassignedItems: [Swift.String]
  public var failedItems: [Swift.String]
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ConversationAssignementDeleteResponseBody.Builder class.")
  public init(unassignedItems: [Swift.String], failedItems: [Swift.String], additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let unassignedItems: [Swift.String]
    final public let failedItems: [Swift.String]
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(unassignedItems: [Swift.String], failedItems: [Swift.String])
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ConversationAssignementDeleteResponseBody
    public static func == (lhs: MessagesClient5.ConversationAssignementDeleteResponseBody.Builder, rhs: MessagesClient5.ConversationAssignementDeleteResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ConversationAssignementDeleteResponseBody, rhs: MessagesClient5.ConversationAssignementDeleteResponseBody) -> Swift.Bool
}
public struct ConversationAssignmentDeleteResponseBody : Swift.Codable, Swift.Equatable {
  public var unassignedItems: [Swift.String]
  public var failedItems: [Swift.String]
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ConversationAssignmentDeleteResponseBody.Builder class.")
  public init(unassignedItems: [Swift.String], failedItems: [Swift.String], additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let unassignedItems: [Swift.String]
    final public let failedItems: [Swift.String]
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(unassignedItems: [Swift.String], failedItems: [Swift.String])
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ConversationAssignmentDeleteResponseBody
    public static func == (lhs: MessagesClient5.ConversationAssignmentDeleteResponseBody.Builder, rhs: MessagesClient5.ConversationAssignmentDeleteResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ConversationAssignmentDeleteResponseBody, rhs: MessagesClient5.ConversationAssignmentDeleteResponseBody) -> Swift.Bool
}
public struct ConversationCounterResponseBody : Swift.Codable, Swift.Equatable {
  public var unassigned: Swift.Double
  public var unreadAssigned: Swift.Double
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ConversationCounterResponseBody.Builder class.")
  public init(unassigned: Swift.Double, unreadAssigned: Swift.Double, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let unassigned: Swift.Double
    final public let unreadAssigned: Swift.Double
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(unassigned: Swift.Double, unreadAssigned: Swift.Double)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ConversationCounterResponseBody
    public static func == (lhs: MessagesClient5.ConversationCounterResponseBody.Builder, rhs: MessagesClient5.ConversationCounterResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ConversationCounterResponseBody, rhs: MessagesClient5.ConversationCounterResponseBody) -> Swift.Bool
}
public struct ConversationDraft : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var body: Swift.String?
  public var createdAt: Foundation.Date
  public var attachments: [MessagesClient5.Metadata]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ConversationDraft.Builder class.")
  public init(id: Swift.String, body: Swift.String? = nil, createdAt: Foundation.Date, attachments: [MessagesClient5.Metadata]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public var body: Swift.String? {
      get
    }
    final public let createdAt: Foundation.Date
    final public var attachments: [MessagesClient5.Metadata]? {
      get
    }
    public init(id: Swift.String, createdAt: Foundation.Date)
    final public func set(body: Swift.String?) -> Self
    final public func set(attachments: [MessagesClient5.Metadata]?) -> Self
    final public func build() -> MessagesClient5.ConversationDraft
    public static func == (lhs: MessagesClient5.ConversationDraft.Builder, rhs: MessagesClient5.ConversationDraft.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ConversationDraft, rhs: MessagesClient5.ConversationDraft) -> Swift.Bool
}
public struct ConversationDraftRequest : Swift.Codable, Swift.Equatable {
  public var body: Swift.String?
  public var attachments: [Swift.String]?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ConversationDraftRequest.Builder class.")
  public init(body: Swift.String? = nil, attachments: [Swift.String]? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var body: Swift.String? {
      get
    }
    final public var attachments: [Swift.String]? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init()
    final public func set(body: Swift.String?) -> Self
    final public func set(attachments: [Swift.String]?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ConversationDraftRequest
    public static func == (lhs: MessagesClient5.ConversationDraftRequest.Builder, rhs: MessagesClient5.ConversationDraftRequest.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ConversationDraftRequest, rhs: MessagesClient5.ConversationDraftRequest) -> Swift.Bool
}
public struct ConversationMessageDraftPostRequestBody : Swift.Codable, Swift.Equatable {
  public var body: Swift.String?
  public var attachments: [Swift.String]?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ConversationMessageDraftPostRequestBody.Builder class.")
  public init(body: Swift.String? = nil, attachments: [Swift.String]? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var body: Swift.String? {
      get
    }
    final public var attachments: [Swift.String]? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init()
    final public func set(body: Swift.String?) -> Self
    final public func set(attachments: [Swift.String]?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ConversationMessageDraftPostRequestBody
    public static func == (lhs: MessagesClient5.ConversationMessageDraftPostRequestBody.Builder, rhs: MessagesClient5.ConversationMessageDraftPostRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ConversationMessageDraftPostRequestBody, rhs: MessagesClient5.ConversationMessageDraftPostRequestBody) -> Swift.Bool
}
public struct ConversationMessageDraftPutRequestBody : Swift.Codable, Swift.Equatable {
  public var body: Swift.String?
  public var attachments: [Swift.String]?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ConversationMessageDraftPutRequestBody.Builder class.")
  public init(body: Swift.String? = nil, attachments: [Swift.String]? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var body: Swift.String? {
      get
    }
    final public var attachments: [Swift.String]? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init()
    final public func set(body: Swift.String?) -> Self
    final public func set(attachments: [Swift.String]?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ConversationMessageDraftPutRequestBody
    public static func == (lhs: MessagesClient5.ConversationMessageDraftPutRequestBody.Builder, rhs: MessagesClient5.ConversationMessageDraftPutRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ConversationMessageDraftPutRequestBody, rhs: MessagesClient5.ConversationMessageDraftPutRequestBody) -> Swift.Bool
}
public struct ConversationThread : Swift.Codable, Swift.Equatable {
  public var hasDraft: Swift.Bool?
  public var id: Swift.String
  public var sender: MessagesClient5.MessageSender
  public var topic: MessagesClient5.Topic
  public var subject: Swift.String?
  public var read: Swift.Bool
  public var important: Swift.Bool
  public var readOnly: Swift.Bool
  public var deletable: Swift.Bool
  public var timestamp: Foundation.Date
  public var hasAttachments: Swift.Bool?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ConversationThread.Builder class.")
  public init(hasDraft: Swift.Bool? = nil, id: Swift.String, sender: MessagesClient5.MessageSender, topic: MessagesClient5.Topic, subject: Swift.String? = nil, read: Swift.Bool, important: Swift.Bool, readOnly: Swift.Bool, deletable: Swift.Bool, timestamp: Foundation.Date, hasAttachments: Swift.Bool? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var hasDraft: Swift.Bool? {
      get
    }
    final public let id: Swift.String
    final public let sender: MessagesClient5.MessageSender
    final public let topic: MessagesClient5.Topic
    final public var subject: Swift.String? {
      get
    }
    final public let read: Swift.Bool
    final public let important: Swift.Bool
    final public let readOnly: Swift.Bool
    final public let deletable: Swift.Bool
    final public let timestamp: Foundation.Date
    final public var hasAttachments: Swift.Bool? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, sender: MessagesClient5.MessageSender, topic: MessagesClient5.Topic, read: Swift.Bool, important: Swift.Bool = false, readOnly: Swift.Bool = false, deletable: Swift.Bool = true, timestamp: Foundation.Date)
    final public func set(hasDraft: Swift.Bool?) -> Self
    final public func set(subject: Swift.String?) -> Self
    final public func set(hasAttachments: Swift.Bool?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ConversationThread
    public static func == (lhs: MessagesClient5.ConversationThread.Builder, rhs: MessagesClient5.ConversationThread.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ConversationThread, rhs: MessagesClient5.ConversationThread) -> Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case hasDraft
    case id
    case sender
    case topic
    case subject
    case read
    case important
    case readOnly
    case deletable
    case timestamp
    case hasAttachments
    case additions
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
    public typealias AllCases = [MessagesClient5.ConversationThread.CodingKeys]
    public static var allCases: [MessagesClient5.ConversationThread.CodingKeys] {
      get
    }
  }
}
public struct ConversationThreadsDeleteResponseBody : Swift.Codable, Swift.Equatable {
  public var deletedItems: [Swift.String]
  public var failedItems: [Swift.String]
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ConversationThreadsDeleteResponseBody.Builder class.")
  public init(deletedItems: [Swift.String], failedItems: [Swift.String], additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let deletedItems: [Swift.String]
    final public let failedItems: [Swift.String]
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(deletedItems: [Swift.String], failedItems: [Swift.String])
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ConversationThreadsDeleteResponseBody
    public static func == (lhs: MessagesClient5.ConversationThreadsDeleteResponseBody.Builder, rhs: MessagesClient5.ConversationThreadsDeleteResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ConversationThreadsDeleteResponseBody, rhs: MessagesClient5.ConversationThreadsDeleteResponseBody) -> Swift.Bool
}
public struct ConversationThreadsGetResponseBody : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var sender: MessagesClient5.MessageSender
  public var topic: MessagesClient5.Topic
  public var subject: Swift.String?
  public var read: Swift.Bool
  public var important: Swift.Bool
  public var readOnly: Swift.Bool
  public var deletable: Swift.Bool
  public var timestamp: Foundation.Date
  public var hasAttachments: Swift.Bool?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ConversationThreadsGetResponseBody.Builder class.")
  public init(id: Swift.String, sender: MessagesClient5.MessageSender, topic: MessagesClient5.Topic, subject: Swift.String? = nil, read: Swift.Bool, important: Swift.Bool, readOnly: Swift.Bool, deletable: Swift.Bool, timestamp: Foundation.Date, hasAttachments: Swift.Bool? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public let sender: MessagesClient5.MessageSender
    final public let topic: MessagesClient5.Topic
    final public var subject: Swift.String? {
      get
    }
    final public let read: Swift.Bool
    final public let important: Swift.Bool
    final public let readOnly: Swift.Bool
    final public let deletable: Swift.Bool
    final public let timestamp: Foundation.Date
    final public var hasAttachments: Swift.Bool? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, sender: MessagesClient5.MessageSender, topic: MessagesClient5.Topic, read: Swift.Bool, important: Swift.Bool = false, readOnly: Swift.Bool = false, deletable: Swift.Bool = true, timestamp: Foundation.Date)
    final public func set(subject: Swift.String?) -> Self
    final public func set(hasAttachments: Swift.Bool?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ConversationThreadsGetResponseBody
    public static func == (lhs: MessagesClient5.ConversationThreadsGetResponseBody.Builder, rhs: MessagesClient5.ConversationThreadsGetResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ConversationThreadsGetResponseBody, rhs: MessagesClient5.ConversationThreadsGetResponseBody) -> Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case id
    case sender
    case topic
    case subject
    case read
    case important
    case readOnly
    case deletable
    case timestamp
    case hasAttachments
    case additions
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
    public typealias AllCases = [MessagesClient5.ConversationThreadsGetResponseBody.CodingKeys]
    public static var allCases: [MessagesClient5.ConversationThreadsGetResponseBody.CodingKeys] {
      get
    }
  }
}
public struct ConversationsThread : Swift.Codable, Swift.Equatable {
  public var messages: [MessagesClient5.MessageGetResponseBody]
  public var assignee: MessagesClient5.Employee
  public var workflowStatus: MessagesClient5.WorkflowStatus
  public var topic: MessagesClient5.Topic
  public var subject: Swift.String?
  public var rootMessageId: Swift.String
  public var read: Swift.Bool
  public var important: Swift.Bool
  public var readOnly: Swift.Bool
  public var deletable: Swift.Bool
  public var attachments: [MessagesClient5.Metadata]?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ConversationsThread.Builder class.")
  public init(messages: [MessagesClient5.MessageGetResponseBody], assignee: MessagesClient5.Employee, workflowStatus: MessagesClient5.WorkflowStatus, topic: MessagesClient5.Topic, subject: Swift.String? = nil, rootMessageId: Swift.String, read: Swift.Bool, important: Swift.Bool, readOnly: Swift.Bool, deletable: Swift.Bool, attachments: [MessagesClient5.Metadata]? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let messages: [MessagesClient5.MessageGetResponseBody]
    final public let assignee: MessagesClient5.Employee
    final public let workflowStatus: MessagesClient5.WorkflowStatus
    final public let topic: MessagesClient5.Topic
    final public var subject: Swift.String? {
      get
    }
    final public let rootMessageId: Swift.String
    final public let read: Swift.Bool
    final public let important: Swift.Bool
    final public let readOnly: Swift.Bool
    final public let deletable: Swift.Bool
    final public var attachments: [MessagesClient5.Metadata]? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(messages: [MessagesClient5.MessageGetResponseBody], assignee: MessagesClient5.Employee, workflowStatus: MessagesClient5.WorkflowStatus, topic: MessagesClient5.Topic, rootMessageId: Swift.String, read: Swift.Bool, important: Swift.Bool = false, readOnly: Swift.Bool = false, deletable: Swift.Bool = true)
    final public func set(subject: Swift.String?) -> Self
    final public func set(attachments: [MessagesClient5.Metadata]?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ConversationsThread
    public static func == (lhs: MessagesClient5.ConversationsThread.Builder, rhs: MessagesClient5.ConversationsThread.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ConversationsThread, rhs: MessagesClient5.ConversationsThread) -> Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case messages
    case assignee
    case workflowStatus
    case topic
    case subject
    case rootMessageId
    case read
    case important
    case readOnly
    case deletable
    case attachments
    case additions
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
    public typealias AllCases = [MessagesClient5.ConversationsThread.CodingKeys]
    public static var allCases: [MessagesClient5.ConversationsThread.CodingKeys] {
      get
    }
  }
}
public struct ConvesationCounterResponseBody : Swift.Codable, Swift.Equatable {
  public var unassigned: Swift.Double
  public var unreadAssigned: Swift.Double
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ConvesationCounterResponseBody.Builder class.")
  public init(unassigned: Swift.Double, unreadAssigned: Swift.Double, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let unassigned: Swift.Double
    final public let unreadAssigned: Swift.Double
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(unassigned: Swift.Double, unreadAssigned: Swift.Double)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ConvesationCounterResponseBody
    public static func == (lhs: MessagesClient5.ConvesationCounterResponseBody.Builder, rhs: MessagesClient5.ConvesationCounterResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ConvesationCounterResponseBody, rhs: MessagesClient5.ConvesationCounterResponseBody) -> Swift.Bool
}
public struct DeleteDraftsResponseBody : Swift.Codable, Swift.Equatable {
  public var deleted: [Swift.String]
  public var failed: [Swift.String]
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of DeleteDraftsResponseBody.Builder class.")
  public init(deleted: [Swift.String], failed: [Swift.String], additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let deleted: [Swift.String]
    final public let failed: [Swift.String]
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(deleted: [Swift.String], failed: [Swift.String])
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.DeleteDraftsResponseBody
    public static func == (lhs: MessagesClient5.DeleteDraftsResponseBody.Builder, rhs: MessagesClient5.DeleteDraftsResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.DeleteDraftsResponseBody, rhs: MessagesClient5.DeleteDraftsResponseBody) -> Swift.Bool
}
public struct DeleteResponseBody : Swift.Codable, Swift.Equatable {
  public var deleted: [Swift.String]
  public var failed: [Swift.String]
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of DeleteResponseBody.Builder class.")
  public init(deleted: [Swift.String], failed: [Swift.String], additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let deleted: [Swift.String]
    final public let failed: [Swift.String]
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(deleted: [Swift.String], failed: [Swift.String])
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.DeleteResponseBody
    public static func == (lhs: MessagesClient5.DeleteResponseBody.Builder, rhs: MessagesClient5.DeleteResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.DeleteResponseBody, rhs: MessagesClient5.DeleteResponseBody) -> Swift.Bool
}
public struct DraftBaseRequest : Swift.Codable, Swift.Equatable {
  public var body: Swift.String?
  public var attachments: [Swift.String]?
  public var subject: Swift.String?
  public var topic: Swift.String?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of DraftBaseRequest.Builder class.")
  public init(body: Swift.String? = nil, attachments: [Swift.String]? = nil, subject: Swift.String? = nil, topic: Swift.String? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var body: Swift.String? {
      get
    }
    final public var attachments: [Swift.String]? {
      get
    }
    final public var subject: Swift.String? {
      get
    }
    final public var topic: Swift.String? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init()
    final public func set(body: Swift.String?) -> Self
    final public func set(attachments: [Swift.String]?) -> Self
    final public func set(subject: Swift.String?) -> Self
    final public func set(topic: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.DraftBaseRequest
    public static func == (lhs: MessagesClient5.DraftBaseRequest.Builder, rhs: MessagesClient5.DraftBaseRequest.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.DraftBaseRequest, rhs: MessagesClient5.DraftBaseRequest) -> Swift.Bool
}
public struct DraftBaseResponse : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var body: Swift.String?
  public var subject: Swift.String?
  public var topic: MessagesClient5.Topic?
  public var timestamp: Foundation.Date
  public var conversationId: Swift.String?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of DraftBaseResponse.Builder class.")
  public init(id: Swift.String, body: Swift.String? = nil, subject: Swift.String? = nil, topic: MessagesClient5.Topic? = nil, timestamp: Foundation.Date, conversationId: Swift.String? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public var body: Swift.String? {
      get
    }
    final public var subject: Swift.String? {
      get
    }
    final public var topic: MessagesClient5.Topic? {
      get
    }
    final public let timestamp: Foundation.Date
    final public var conversationId: Swift.String? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, timestamp: Foundation.Date)
    final public func set(body: Swift.String?) -> Self
    final public func set(subject: Swift.String?) -> Self
    final public func set(topic: MessagesClient5.Topic?) -> Self
    final public func set(conversationId: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.DraftBaseResponse
    public static func == (lhs: MessagesClient5.DraftBaseResponse.Builder, rhs: MessagesClient5.DraftBaseResponse.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.DraftBaseResponse, rhs: MessagesClient5.DraftBaseResponse) -> Swift.Bool
}
public struct DraftPostResponseBody : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of DraftPostResponseBody.Builder class.")
  public init(id: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.DraftPostResponseBody
    public static func == (lhs: MessagesClient5.DraftPostResponseBody.Builder, rhs: MessagesClient5.DraftPostResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.DraftPostResponseBody, rhs: MessagesClient5.DraftPostResponseBody) -> Swift.Bool
}
public struct Employee : Swift.Codable, Swift.Equatable {
  public var internalId: Swift.String
  public var fullName: Swift.String
  public var isRequester: Swift.Bool
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of Employee.Builder class.")
  public init(internalId: Swift.String, fullName: Swift.String, isRequester: Swift.Bool, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let internalId: Swift.String
    final public let fullName: Swift.String
    final public let isRequester: Swift.Bool
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(internalId: Swift.String, fullName: Swift.String, isRequester: Swift.Bool)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.Employee
    public static func == (lhs: MessagesClient5.Employee.Builder, rhs: MessagesClient5.Employee.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.Employee, rhs: MessagesClient5.Employee) -> Swift.Bool
}
public protocol EmployeeAPIProtocol {
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteConversationAssignmentRequestParams class.")
  func deleteConversationAssignmentCall(ids: [Swift.String]) throws -> ClientCommon.Call<MessagesClient5.ConversationAssignmentDeleteResponseBody>
  func deleteConversationAssignmentCall(params: MessagesClient5.DeleteConversationAssignmentRequestParams) throws -> ClientCommon.Call<MessagesClient5.ConversationAssignmentDeleteResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteMessageAttachmentsEmployeeRequestParams class.")
  func deleteMessageAttachmentsEmployeeCall(ids: [Swift.String]) throws -> ClientCommon.Call<MessagesClient5.DeleteResponseBody>
  func deleteMessageAttachmentsEmployeeCall(params: MessagesClient5.DeleteMessageAttachmentsEmployeeRequestParams) throws -> ClientCommon.Call<MessagesClient5.DeleteResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteSubscriptionRequestParams class.")
  func deleteSubscriptionCall(subscriptionId: Swift.String, topicId: Swift.String) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  func deleteSubscriptionCall(params: MessagesClient5.DeleteSubscriptionRequestParams) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteTopicRequestParams class.")
  func deleteTopicCall(topicId: Swift.String) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  func deleteTopicCall(params: MessagesClient5.DeleteTopicRequestParams) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetConversationThreadsEmployeeRequestParams class.")
  func getConversationThreadsEmployeeCall(mailboxType: Swift.String?, viewType: Swift.String?, from: Swift.Int?, size: Swift.Int?, orderBy: Swift.String?, direction: MessagesClient5.EmployeeAPI.Direction_getConversationThreadsEmployee?) throws -> ClientCommon.Call<[MessagesClient5.EmployeeConversationThread]>
  func getConversationThreadsEmployeeCall(params: MessagesClient5.GetConversationThreadsEmployeeRequestParams) throws -> ClientCommon.Call<[MessagesClient5.EmployeeConversationThread]>
  func getConversationsCounterCall() throws -> ClientCommon.Call<MessagesClient5.ConversationCounterResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetConversationsReportRequestParams class.")
  func getConversationsReportCall(startDate: Foundation.Date?, endDate: Foundation.Date?, clientId: Swift.String?, clientFullName: Swift.String?, category: Swift.String?, status: MessagesClient5.WorkflowStatus?, from: Swift.Int?, size: Swift.Int?) throws -> ClientCommon.Call<[MessagesClient5.MessageThreadsReport]>
  func getConversationsReportCall(params: MessagesClient5.GetConversationsReportRequestParams) throws -> ClientCommon.Call<[MessagesClient5.MessageThreadsReport]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetEmployeeMessageThreadRequestParams class.")
  func getEmployeeMessageThreadCall(messageId: Swift.String) throws -> ClientCommon.Call<MessagesClient5.ConversationsThread>
  func getEmployeeMessageThreadCall(params: MessagesClient5.GetEmployeeMessageThreadRequestParams) throws -> ClientCommon.Call<MessagesClient5.ConversationsThread>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMessageAttachmentEmployeeRequestParams class.")
  func getMessageAttachmentEmployeeCall(attachmentId: Swift.String) throws -> ClientCommon.Call<Foundation.Data>
  func getMessageAttachmentEmployeeCall(params: MessagesClient5.GetMessageAttachmentEmployeeRequestParams) throws -> ClientCommon.Call<Foundation.Data>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetSearchConversationsRequestParams class.")
  func getSearchConversationsCall(userId: Swift.String?, topicId: Swift.String?, startDate: Foundation.Date?, endDate: Foundation.Date?, from: Swift.Int?, size: Swift.Int?) throws -> ClientCommon.Call<[MessagesClient5.EmployeeConversationThread]>
  func getSearchConversationsCall(params: MessagesClient5.GetSearchConversationsRequestParams) throws -> ClientCommon.Call<[MessagesClient5.EmployeeConversationThread]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetSubscriptionsRequestParams class.")
  func getSubscriptionsCall(topicId: Swift.String, subscriberName: Swift.String?, from: Swift.Int?, size: Swift.Int?) throws -> ClientCommon.Call<[MessagesClient5.SubscriptionsGetResponseBody]>
  func getSubscriptionsCall(params: MessagesClient5.GetSubscriptionsRequestParams) throws -> ClientCommon.Call<[MessagesClient5.SubscriptionsGetResponseBody]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetTopicRequestParams class.")
  func getTopicCall(topicId: Swift.String) throws -> ClientCommon.Call<MessagesClient5.TopicGetResponseBody>
  func getTopicCall(params: MessagesClient5.GetTopicRequestParams) throws -> ClientCommon.Call<MessagesClient5.TopicGetResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetTopicsEmployeeRequestParams class.")
  func getTopicsEmployeeCall(subscribed: Swift.Bool?, deleted: Swift.Bool?, topicType: Swift.String?, from: Swift.Int?, size: Swift.Int?) throws -> ClientCommon.Call<[MessagesClient5.TopicsGetEmployeeResponseBody]>
  func getTopicsEmployeeCall(params: MessagesClient5.GetTopicsEmployeeRequestParams) throws -> ClientCommon.Call<[MessagesClient5.TopicsGetEmployeeResponseBody]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessageAttachmentsEmployeeRequestParams class.")
  func postMessageAttachmentsEmployeeCall(attachment: Foundation.URL?) throws -> ClientCommon.Call<MessagesClient5.Metadata>
  func postMessageAttachmentsEmployeeCall(params: MessagesClient5.PostMessageAttachmentsEmployeeRequestParams) throws -> ClientCommon.Call<MessagesClient5.Metadata>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessageReplyEmployeeRequestParams class.")
  func postMessageReplyEmployeeCall(messageId: Swift.String, messageReplyPostRequestBody: MessagesClient5.MessageReplyPostRequestBody?) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  func postMessageReplyEmployeeCall(params: MessagesClient5.PostMessageReplyEmployeeRequestParams) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessagesEmployeeRequestParams class.")
  func postMessagesEmployeeCall(presentationMessageEmployeePostRequestBody: MessagesClient5.PresentationMessageEmployeePostRequestBody?) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  func postMessagesEmployeeCall(params: MessagesClient5.PostMessagesEmployeeRequestParams) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostSubscribersRequestParams class.")
  func postSubscribersCall(topicId: Swift.String, subscribersPostRequestBody: MessagesClient5.SubscribersPostRequestBody?) throws -> ClientCommon.Call<[MessagesClient5.SubscribersPostResponseBody]>
  func postSubscribersCall(params: MessagesClient5.PostSubscribersRequestParams) throws -> ClientCommon.Call<[MessagesClient5.SubscribersPostResponseBody]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostSubscriptionsRequestParams class.")
  func postSubscriptionsCall(topicId: Swift.String, subscriptionsPostRequestBody: MessagesClient5.SubscriptionsPostRequestBody?) throws -> ClientCommon.Call<MessagesClient5.SubscriptionsPostResponseBody>
  func postSubscriptionsCall(params: MessagesClient5.PostSubscriptionsRequestParams) throws -> ClientCommon.Call<MessagesClient5.SubscriptionsPostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostTopicsRequestParams class.")
  func postTopicsCall(topicsPostRequestBody: MessagesClient5.TopicsPostRequestBody?) throws -> ClientCommon.Call<MessagesClient5.ExtendedTopicsPostResponseBody>
  func postTopicsCall(params: MessagesClient5.PostTopicsRequestParams) throws -> ClientCommon.Call<MessagesClient5.ExtendedTopicsPostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutAssignConversationRequestParams class.")
  func putAssignConversationCall(messageId: Swift.String, messageThreadAssignmentRequestBody: MessagesClient5.MessageThreadAssignmentRequestBody?) throws -> ClientCommon.Call<MessagesClient5.MessageThreadAssignmentResponseBody>
  func putAssignConversationCall(params: MessagesClient5.PutAssignConversationRequestParams) throws -> ClientCommon.Call<MessagesClient5.MessageThreadAssignmentResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutConversationAssignmentRequestParams class.")
  func putConversationAssignmentCall(messageThreadBulkAssignmentRequestBody: MessagesClient5.MessageThreadBulkAssignmentRequestBody?) throws -> ClientCommon.Call<MessagesClient5.MessageThreadBulkAssignmentResponseBody>
  func putConversationAssignmentCall(params: MessagesClient5.PutConversationAssignmentRequestParams) throws -> ClientCommon.Call<MessagesClient5.MessageThreadBulkAssignmentResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutConversationResolutionRequestParams class.")
  func putConversationResolutionCall(messageId: Swift.String, messageThreadResolutionRequestBody: MessagesClient5.MessageThreadResolutionRequestBody?) throws -> ClientCommon.Call<MessagesClient5.MessageThreadResolutionResponseBody>
  func putConversationResolutionCall(params: MessagesClient5.PutConversationResolutionRequestParams) throws -> ClientCommon.Call<MessagesClient5.MessageThreadResolutionResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutConversationResolutionEmployeeRequestParams class.")
  func putConversationResolutionEmployeeCall(messageThreadBulkResolutionRequestBody: MessagesClient5.MessageThreadBulkResolutionRequestBody?) throws -> ClientCommon.Call<MessagesClient5.MessageThreadBulkResolutionResponseBody>
  func putConversationResolutionEmployeeCall(params: MessagesClient5.PutConversationResolutionEmployeeRequestParams) throws -> ClientCommon.Call<MessagesClient5.MessageThreadBulkResolutionResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutMarkAsReadUnreadEmployeeRequestParams class.")
  func putMarkAsReadUnreadEmployeeCall(markAsReadUnreadPutRequestBody: MessagesClient5.MarkAsReadUnreadPutRequestBody?) throws -> ClientCommon.Call<MessagesClient5.MarkAsReadUnreadPutResponseBody>
  func putMarkAsReadUnreadEmployeeCall(params: MessagesClient5.PutMarkAsReadUnreadEmployeeRequestParams) throws -> ClientCommon.Call<MessagesClient5.MarkAsReadUnreadPutResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutMessageThreadTopicRequestParams class.")
  func putMessageThreadTopicCall(messageId: Swift.String, updateMessageTopicRequestBody: MessagesClient5.UpdateMessageTopicRequestBody?) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  func putMessageThreadTopicCall(params: MessagesClient5.PutMessageThreadTopicRequestParams) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutTopicRequestParams class.")
  func putTopicCall(topicId: Swift.String, xBBSVCRequestId: Swift.String?, topicPutRequestBody: MessagesClient5.TopicPutRequestBody?) throws -> ClientCommon.Call<MessagesClient5.TopicPutResponseBody>
  func putTopicCall(params: MessagesClient5.PutTopicRequestParams) throws -> ClientCommon.Call<MessagesClient5.TopicPutResponseBody>
}
@objc @_inheritsConvenienceInitializers public class EmployeeAPI : ObjectiveC.NSObject, DBSClient, MessagesClient5.EmployeeAPIProtocol {
  @objc public var dataProvider: DBSDataProvider?
  @objc public var baseURL: Foundation.URL
  @objc override dynamic public init()
  required public init(dataProvider: DBSDataProvider, baseURL: Foundation.URL)
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteConversationAssignmentRequestParams class.")
  open func deleteConversationAssignmentCall(ids: [Swift.String]) throws -> ClientCommon.Call<MessagesClient5.ConversationAssignmentDeleteResponseBody>
  open func deleteConversationAssignmentCall(params: MessagesClient5.DeleteConversationAssignmentRequestParams) throws -> ClientCommon.Call<MessagesClient5.ConversationAssignmentDeleteResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteMessageAttachmentsEmployeeRequestParams class.")
  open func deleteMessageAttachmentsEmployeeCall(ids: [Swift.String]) throws -> ClientCommon.Call<MessagesClient5.DeleteResponseBody>
  open func deleteMessageAttachmentsEmployeeCall(params: MessagesClient5.DeleteMessageAttachmentsEmployeeRequestParams) throws -> ClientCommon.Call<MessagesClient5.DeleteResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteSubscriptionRequestParams class.")
  open func deleteSubscriptionCall(subscriptionId: Swift.String, topicId: Swift.String) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  open func deleteSubscriptionCall(params: MessagesClient5.DeleteSubscriptionRequestParams) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteTopicRequestParams class.")
  open func deleteTopicCall(topicId: Swift.String) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  open func deleteTopicCall(params: MessagesClient5.DeleteTopicRequestParams) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  @available(*, deprecated, message: "This enum is deprecated in favor of the alternative enum inside the GetConversationThreadsEmployeeRequestParams class.")
  public enum Direction_getConversationThreadsEmployee : Swift.String, Swift.CaseIterable {
    case asc
    case desc
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [MessagesClient5.EmployeeAPI.Direction_getConversationThreadsEmployee]
    public static var allCases: [MessagesClient5.EmployeeAPI.Direction_getConversationThreadsEmployee] {
      get
    }
  }
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetConversationThreadsEmployeeRequestParams class.")
  open func getConversationThreadsEmployeeCall(mailboxType: Swift.String? = nil, viewType: Swift.String? = nil, from: Swift.Int? = nil, size: Swift.Int? = nil, orderBy: Swift.String? = nil, direction: MessagesClient5.EmployeeAPI.Direction_getConversationThreadsEmployee? = nil) throws -> ClientCommon.Call<[MessagesClient5.EmployeeConversationThread]>
  open func getConversationThreadsEmployeeCall(params: MessagesClient5.GetConversationThreadsEmployeeRequestParams) throws -> ClientCommon.Call<[MessagesClient5.EmployeeConversationThread]>
  open func getConversationsCounterCall() throws -> ClientCommon.Call<MessagesClient5.ConversationCounterResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetConversationsReportRequestParams class.")
  open func getConversationsReportCall(startDate: Foundation.Date? = nil, endDate: Foundation.Date? = nil, clientId: Swift.String? = nil, clientFullName: Swift.String? = nil, category: Swift.String? = nil, status: MessagesClient5.WorkflowStatus? = nil, from: Swift.Int? = nil, size: Swift.Int? = nil) throws -> ClientCommon.Call<[MessagesClient5.MessageThreadsReport]>
  open func getConversationsReportCall(params: MessagesClient5.GetConversationsReportRequestParams) throws -> ClientCommon.Call<[MessagesClient5.MessageThreadsReport]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetEmployeeMessageThreadRequestParams class.")
  open func getEmployeeMessageThreadCall(messageId: Swift.String) throws -> ClientCommon.Call<MessagesClient5.ConversationsThread>
  open func getEmployeeMessageThreadCall(params: MessagesClient5.GetEmployeeMessageThreadRequestParams) throws -> ClientCommon.Call<MessagesClient5.ConversationsThread>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMessageAttachmentEmployeeRequestParams class.")
  open func getMessageAttachmentEmployeeCall(attachmentId: Swift.String) throws -> ClientCommon.Call<Foundation.Data>
  open func getMessageAttachmentEmployeeCall(params: MessagesClient5.GetMessageAttachmentEmployeeRequestParams) throws -> ClientCommon.Call<Foundation.Data>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetSearchConversationsRequestParams class.")
  open func getSearchConversationsCall(userId: Swift.String? = nil, topicId: Swift.String? = nil, startDate: Foundation.Date? = nil, endDate: Foundation.Date? = nil, from: Swift.Int? = nil, size: Swift.Int? = nil) throws -> ClientCommon.Call<[MessagesClient5.EmployeeConversationThread]>
  open func getSearchConversationsCall(params: MessagesClient5.GetSearchConversationsRequestParams) throws -> ClientCommon.Call<[MessagesClient5.EmployeeConversationThread]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetSubscriptionsRequestParams class.")
  open func getSubscriptionsCall(topicId: Swift.String, subscriberName: Swift.String? = nil, from: Swift.Int? = nil, size: Swift.Int? = nil) throws -> ClientCommon.Call<[MessagesClient5.SubscriptionsGetResponseBody]>
  open func getSubscriptionsCall(params: MessagesClient5.GetSubscriptionsRequestParams) throws -> ClientCommon.Call<[MessagesClient5.SubscriptionsGetResponseBody]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetTopicRequestParams class.")
  open func getTopicCall(topicId: Swift.String) throws -> ClientCommon.Call<MessagesClient5.TopicGetResponseBody>
  open func getTopicCall(params: MessagesClient5.GetTopicRequestParams) throws -> ClientCommon.Call<MessagesClient5.TopicGetResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetTopicsEmployeeRequestParams class.")
  open func getTopicsEmployeeCall(subscribed: Swift.Bool? = nil, deleted: Swift.Bool? = nil, topicType: Swift.String? = nil, from: Swift.Int? = nil, size: Swift.Int? = nil) throws -> ClientCommon.Call<[MessagesClient5.TopicsGetEmployeeResponseBody]>
  open func getTopicsEmployeeCall(params: MessagesClient5.GetTopicsEmployeeRequestParams) throws -> ClientCommon.Call<[MessagesClient5.TopicsGetEmployeeResponseBody]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessageAttachmentsEmployeeRequestParams class.")
  open func postMessageAttachmentsEmployeeCall(attachment: Foundation.URL? = nil) throws -> ClientCommon.Call<MessagesClient5.Metadata>
  open func postMessageAttachmentsEmployeeCall(params: MessagesClient5.PostMessageAttachmentsEmployeeRequestParams) throws -> ClientCommon.Call<MessagesClient5.Metadata>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessageReplyEmployeeRequestParams class.")
  open func postMessageReplyEmployeeCall(messageId: Swift.String, messageReplyPostRequestBody: MessagesClient5.MessageReplyPostRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  open func postMessageReplyEmployeeCall(params: MessagesClient5.PostMessageReplyEmployeeRequestParams) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessagesEmployeeRequestParams class.")
  open func postMessagesEmployeeCall(presentationMessageEmployeePostRequestBody: MessagesClient5.PresentationMessageEmployeePostRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  open func postMessagesEmployeeCall(params: MessagesClient5.PostMessagesEmployeeRequestParams) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostSubscribersRequestParams class.")
  open func postSubscribersCall(topicId: Swift.String, subscribersPostRequestBody: MessagesClient5.SubscribersPostRequestBody? = nil) throws -> ClientCommon.Call<[MessagesClient5.SubscribersPostResponseBody]>
  open func postSubscribersCall(params: MessagesClient5.PostSubscribersRequestParams) throws -> ClientCommon.Call<[MessagesClient5.SubscribersPostResponseBody]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostSubscriptionsRequestParams class.")
  open func postSubscriptionsCall(topicId: Swift.String, subscriptionsPostRequestBody: MessagesClient5.SubscriptionsPostRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.SubscriptionsPostResponseBody>
  open func postSubscriptionsCall(params: MessagesClient5.PostSubscriptionsRequestParams) throws -> ClientCommon.Call<MessagesClient5.SubscriptionsPostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostTopicsRequestParams class.")
  open func postTopicsCall(topicsPostRequestBody: MessagesClient5.TopicsPostRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.ExtendedTopicsPostResponseBody>
  open func postTopicsCall(params: MessagesClient5.PostTopicsRequestParams) throws -> ClientCommon.Call<MessagesClient5.ExtendedTopicsPostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutAssignConversationRequestParams class.")
  open func putAssignConversationCall(messageId: Swift.String, messageThreadAssignmentRequestBody: MessagesClient5.MessageThreadAssignmentRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.MessageThreadAssignmentResponseBody>
  open func putAssignConversationCall(params: MessagesClient5.PutAssignConversationRequestParams) throws -> ClientCommon.Call<MessagesClient5.MessageThreadAssignmentResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutConversationAssignmentRequestParams class.")
  open func putConversationAssignmentCall(messageThreadBulkAssignmentRequestBody: MessagesClient5.MessageThreadBulkAssignmentRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.MessageThreadBulkAssignmentResponseBody>
  open func putConversationAssignmentCall(params: MessagesClient5.PutConversationAssignmentRequestParams) throws -> ClientCommon.Call<MessagesClient5.MessageThreadBulkAssignmentResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutConversationResolutionRequestParams class.")
  open func putConversationResolutionCall(messageId: Swift.String, messageThreadResolutionRequestBody: MessagesClient5.MessageThreadResolutionRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.MessageThreadResolutionResponseBody>
  open func putConversationResolutionCall(params: MessagesClient5.PutConversationResolutionRequestParams) throws -> ClientCommon.Call<MessagesClient5.MessageThreadResolutionResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutConversationResolutionEmployeeRequestParams class.")
  open func putConversationResolutionEmployeeCall(messageThreadBulkResolutionRequestBody: MessagesClient5.MessageThreadBulkResolutionRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.MessageThreadBulkResolutionResponseBody>
  open func putConversationResolutionEmployeeCall(params: MessagesClient5.PutConversationResolutionEmployeeRequestParams) throws -> ClientCommon.Call<MessagesClient5.MessageThreadBulkResolutionResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutMarkAsReadUnreadEmployeeRequestParams class.")
  open func putMarkAsReadUnreadEmployeeCall(markAsReadUnreadPutRequestBody: MessagesClient5.MarkAsReadUnreadPutRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.MarkAsReadUnreadPutResponseBody>
  open func putMarkAsReadUnreadEmployeeCall(params: MessagesClient5.PutMarkAsReadUnreadEmployeeRequestParams) throws -> ClientCommon.Call<MessagesClient5.MarkAsReadUnreadPutResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutMessageThreadTopicRequestParams class.")
  open func putMessageThreadTopicCall(messageId: Swift.String, updateMessageTopicRequestBody: MessagesClient5.UpdateMessageTopicRequestBody? = nil) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  open func putMessageThreadTopicCall(params: MessagesClient5.PutMessageThreadTopicRequestParams) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutTopicRequestParams class.")
  open func putTopicCall(topicId: Swift.String, xBBSVCRequestId: Swift.String? = nil, topicPutRequestBody: MessagesClient5.TopicPutRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.TopicPutResponseBody>
  open func putTopicCall(params: MessagesClient5.PutTopicRequestParams) throws -> ClientCommon.Call<MessagesClient5.TopicPutResponseBody>
  @objc deinit
}
public struct DeleteConversationAssignmentRequestParams : Swift.Equatable {
  public let ids: [Swift.String]
  final public class Builder : Swift.Equatable {
    final public let ids: [Swift.String]
    public init(ids: [Swift.String])
    final public func build() -> MessagesClient5.DeleteConversationAssignmentRequestParams
    public static func == (lhs: MessagesClient5.DeleteConversationAssignmentRequestParams.Builder, rhs: MessagesClient5.DeleteConversationAssignmentRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.DeleteConversationAssignmentRequestParams, rhs: MessagesClient5.DeleteConversationAssignmentRequestParams) -> Swift.Bool
}
public struct DeleteMessageAttachmentsEmployeeRequestParams : Swift.Equatable {
  public let ids: [Swift.String]
  final public class Builder : Swift.Equatable {
    final public let ids: [Swift.String]
    public init(ids: [Swift.String])
    final public func build() -> MessagesClient5.DeleteMessageAttachmentsEmployeeRequestParams
    public static func == (lhs: MessagesClient5.DeleteMessageAttachmentsEmployeeRequestParams.Builder, rhs: MessagesClient5.DeleteMessageAttachmentsEmployeeRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.DeleteMessageAttachmentsEmployeeRequestParams, rhs: MessagesClient5.DeleteMessageAttachmentsEmployeeRequestParams) -> Swift.Bool
}
public struct DeleteSubscriptionRequestParams : Swift.Equatable {
  public let subscriptionId: Swift.String
  public let topicId: Swift.String
  final public class Builder : Swift.Equatable {
    final public let subscriptionId: Swift.String
    final public let topicId: Swift.String
    public init(subscriptionId: Swift.String, topicId: Swift.String)
    final public func build() -> MessagesClient5.DeleteSubscriptionRequestParams
    public static func == (lhs: MessagesClient5.DeleteSubscriptionRequestParams.Builder, rhs: MessagesClient5.DeleteSubscriptionRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.DeleteSubscriptionRequestParams, rhs: MessagesClient5.DeleteSubscriptionRequestParams) -> Swift.Bool
}
public struct DeleteTopicRequestParams : Swift.Equatable {
  public let topicId: Swift.String
  final public class Builder : Swift.Equatable {
    final public let topicId: Swift.String
    public init(topicId: Swift.String)
    final public func build() -> MessagesClient5.DeleteTopicRequestParams
    public static func == (lhs: MessagesClient5.DeleteTopicRequestParams.Builder, rhs: MessagesClient5.DeleteTopicRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.DeleteTopicRequestParams, rhs: MessagesClient5.DeleteTopicRequestParams) -> Swift.Bool
}
public struct GetConversationThreadsEmployeeRequestParams : Swift.Equatable {
  public enum Direction : Swift.String, Swift.Codable, Swift.CaseIterable {
    case asc
    case desc
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [MessagesClient5.GetConversationThreadsEmployeeRequestParams.Direction]
    public static var allCases: [MessagesClient5.GetConversationThreadsEmployeeRequestParams.Direction] {
      get
    }
  }
  public let mailboxType: Swift.String?
  public let viewType: Swift.String?
  public let from: Swift.Int?
  public let size: Swift.Int?
  public let orderBy: Swift.String?
  public let direction: MessagesClient5.GetConversationThreadsEmployeeRequestParams.Direction?
  final public class Builder : Swift.Equatable {
    final public var mailboxType: Swift.String? {
      get
    }
    final public var viewType: Swift.String? {
      get
    }
    final public var from: Swift.Int? {
      get
    }
    final public var size: Swift.Int? {
      get
    }
    final public var orderBy: Swift.String? {
      get
    }
    final public var direction: MessagesClient5.GetConversationThreadsEmployeeRequestParams.Direction? {
      get
    }
    public init()
    final public func set(mailboxType: Swift.String?) -> Self
    final public func set(viewType: Swift.String?) -> Self
    final public func set(from: Swift.Int?) -> Self
    final public func set(size: Swift.Int?) -> Self
    final public func set(orderBy: Swift.String?) -> Self
    final public func set(direction: MessagesClient5.GetConversationThreadsEmployeeRequestParams.Direction?) -> Self
    final public func build() -> MessagesClient5.GetConversationThreadsEmployeeRequestParams
    public static func == (lhs: MessagesClient5.GetConversationThreadsEmployeeRequestParams.Builder, rhs: MessagesClient5.GetConversationThreadsEmployeeRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetConversationThreadsEmployeeRequestParams, rhs: MessagesClient5.GetConversationThreadsEmployeeRequestParams) -> Swift.Bool
}
public struct GetConversationsReportRequestParams : Swift.Equatable {
  public let startDate: Foundation.Date?
  public let endDate: Foundation.Date?
  public let clientId: Swift.String?
  public let clientFullName: Swift.String?
  public let category: Swift.String?
  public let status: MessagesClient5.WorkflowStatus?
  public let from: Swift.Int?
  public let size: Swift.Int?
  final public class Builder : Swift.Equatable {
    final public var startDate: Foundation.Date? {
      get
    }
    final public var endDate: Foundation.Date? {
      get
    }
    final public var clientId: Swift.String? {
      get
    }
    final public var clientFullName: Swift.String? {
      get
    }
    final public var category: Swift.String? {
      get
    }
    final public var status: MessagesClient5.WorkflowStatus? {
      get
    }
    final public var from: Swift.Int? {
      get
    }
    final public var size: Swift.Int? {
      get
    }
    public init()
    final public func set(startDate: Foundation.Date?) -> Self
    final public func set(endDate: Foundation.Date?) -> Self
    final public func set(clientId: Swift.String?) -> Self
    final public func set(clientFullName: Swift.String?) -> Self
    final public func set(category: Swift.String?) -> Self
    final public func set(status: MessagesClient5.WorkflowStatus?) -> Self
    final public func set(from: Swift.Int?) -> Self
    final public func set(size: Swift.Int?) -> Self
    final public func build() -> MessagesClient5.GetConversationsReportRequestParams
    public static func == (lhs: MessagesClient5.GetConversationsReportRequestParams.Builder, rhs: MessagesClient5.GetConversationsReportRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetConversationsReportRequestParams, rhs: MessagesClient5.GetConversationsReportRequestParams) -> Swift.Bool
}
public struct GetEmployeeMessageThreadRequestParams : Swift.Equatable {
  public let messageId: Swift.String
  final public class Builder : Swift.Equatable {
    final public let messageId: Swift.String
    public init(messageId: Swift.String)
    final public func build() -> MessagesClient5.GetEmployeeMessageThreadRequestParams
    public static func == (lhs: MessagesClient5.GetEmployeeMessageThreadRequestParams.Builder, rhs: MessagesClient5.GetEmployeeMessageThreadRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetEmployeeMessageThreadRequestParams, rhs: MessagesClient5.GetEmployeeMessageThreadRequestParams) -> Swift.Bool
}
public struct GetMessageAttachmentEmployeeRequestParams : Swift.Equatable {
  public let attachmentId: Swift.String
  final public class Builder : Swift.Equatable {
    final public let attachmentId: Swift.String
    public init(attachmentId: Swift.String)
    final public func build() -> MessagesClient5.GetMessageAttachmentEmployeeRequestParams
    public static func == (lhs: MessagesClient5.GetMessageAttachmentEmployeeRequestParams.Builder, rhs: MessagesClient5.GetMessageAttachmentEmployeeRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetMessageAttachmentEmployeeRequestParams, rhs: MessagesClient5.GetMessageAttachmentEmployeeRequestParams) -> Swift.Bool
}
public struct GetSearchConversationsRequestParams : Swift.Equatable {
  public let userId: Swift.String?
  public let topicId: Swift.String?
  public let startDate: Foundation.Date?
  public let endDate: Foundation.Date?
  public let from: Swift.Int?
  public let size: Swift.Int?
  final public class Builder : Swift.Equatable {
    final public var userId: Swift.String? {
      get
    }
    final public var topicId: Swift.String? {
      get
    }
    final public var startDate: Foundation.Date? {
      get
    }
    final public var endDate: Foundation.Date? {
      get
    }
    final public var from: Swift.Int? {
      get
    }
    final public var size: Swift.Int? {
      get
    }
    public init()
    final public func set(userId: Swift.String?) -> Self
    final public func set(topicId: Swift.String?) -> Self
    final public func set(startDate: Foundation.Date?) -> Self
    final public func set(endDate: Foundation.Date?) -> Self
    final public func set(from: Swift.Int?) -> Self
    final public func set(size: Swift.Int?) -> Self
    final public func build() -> MessagesClient5.GetSearchConversationsRequestParams
    public static func == (lhs: MessagesClient5.GetSearchConversationsRequestParams.Builder, rhs: MessagesClient5.GetSearchConversationsRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetSearchConversationsRequestParams, rhs: MessagesClient5.GetSearchConversationsRequestParams) -> Swift.Bool
}
public struct GetSubscriptionsRequestParams : Swift.Equatable {
  public let topicId: Swift.String
  public let subscriberName: Swift.String?
  public let from: Swift.Int?
  public let size: Swift.Int?
  final public class Builder : Swift.Equatable {
    final public let topicId: Swift.String
    final public var subscriberName: Swift.String? {
      get
    }
    final public var from: Swift.Int? {
      get
    }
    final public var size: Swift.Int? {
      get
    }
    public init(topicId: Swift.String)
    final public func set(subscriberName: Swift.String?) -> Self
    final public func set(from: Swift.Int?) -> Self
    final public func set(size: Swift.Int?) -> Self
    final public func build() -> MessagesClient5.GetSubscriptionsRequestParams
    public static func == (lhs: MessagesClient5.GetSubscriptionsRequestParams.Builder, rhs: MessagesClient5.GetSubscriptionsRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetSubscriptionsRequestParams, rhs: MessagesClient5.GetSubscriptionsRequestParams) -> Swift.Bool
}
public struct GetTopicRequestParams : Swift.Equatable {
  public let topicId: Swift.String
  final public class Builder : Swift.Equatable {
    final public let topicId: Swift.String
    public init(topicId: Swift.String)
    final public func build() -> MessagesClient5.GetTopicRequestParams
    public static func == (lhs: MessagesClient5.GetTopicRequestParams.Builder, rhs: MessagesClient5.GetTopicRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetTopicRequestParams, rhs: MessagesClient5.GetTopicRequestParams) -> Swift.Bool
}
public struct GetTopicsEmployeeRequestParams : Swift.Equatable {
  public let subscribed: Swift.Bool?
  public let deleted: Swift.Bool?
  public let topicType: Swift.String?
  public let from: Swift.Int?
  public let size: Swift.Int?
  final public class Builder : Swift.Equatable {
    final public var subscribed: Swift.Bool? {
      get
    }
    final public var deleted: Swift.Bool? {
      get
    }
    final public var topicType: Swift.String? {
      get
    }
    final public var from: Swift.Int? {
      get
    }
    final public var size: Swift.Int? {
      get
    }
    public init()
    final public func set(subscribed: Swift.Bool?) -> Self
    final public func set(deleted: Swift.Bool?) -> Self
    final public func set(topicType: Swift.String?) -> Self
    final public func set(from: Swift.Int?) -> Self
    final public func set(size: Swift.Int?) -> Self
    final public func build() -> MessagesClient5.GetTopicsEmployeeRequestParams
    public static func == (lhs: MessagesClient5.GetTopicsEmployeeRequestParams.Builder, rhs: MessagesClient5.GetTopicsEmployeeRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetTopicsEmployeeRequestParams, rhs: MessagesClient5.GetTopicsEmployeeRequestParams) -> Swift.Bool
}
public struct PostMessageAttachmentsEmployeeRequestParams : Swift.Equatable {
  public let attachment: Foundation.URL?
  final public class Builder : Swift.Equatable {
    final public var attachment: Foundation.URL? {
      get
    }
    public init()
    final public func set(attachment: Foundation.URL?) -> Self
    final public func build() -> MessagesClient5.PostMessageAttachmentsEmployeeRequestParams
    public static func == (lhs: MessagesClient5.PostMessageAttachmentsEmployeeRequestParams.Builder, rhs: MessagesClient5.PostMessageAttachmentsEmployeeRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostMessageAttachmentsEmployeeRequestParams, rhs: MessagesClient5.PostMessageAttachmentsEmployeeRequestParams) -> Swift.Bool
}
public struct PostMessageReplyEmployeeRequestParams : Swift.Equatable {
  public let messageId: Swift.String
  public let messageReplyPostRequestBody: MessagesClient5.MessageReplyPostRequestBody?
  final public class Builder : Swift.Equatable {
    final public let messageId: Swift.String
    final public var messageReplyPostRequestBody: MessagesClient5.MessageReplyPostRequestBody? {
      get
    }
    public init(messageId: Swift.String)
    final public func set(messageReplyPostRequestBody: MessagesClient5.MessageReplyPostRequestBody?) -> Self
    final public func build() -> MessagesClient5.PostMessageReplyEmployeeRequestParams
    public static func == (lhs: MessagesClient5.PostMessageReplyEmployeeRequestParams.Builder, rhs: MessagesClient5.PostMessageReplyEmployeeRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostMessageReplyEmployeeRequestParams, rhs: MessagesClient5.PostMessageReplyEmployeeRequestParams) -> Swift.Bool
}
public struct PostMessagesEmployeeRequestParams : Swift.Equatable {
  public let presentationMessageEmployeePostRequestBody: MessagesClient5.PresentationMessageEmployeePostRequestBody?
  final public class Builder : Swift.Equatable {
    final public var presentationMessageEmployeePostRequestBody: MessagesClient5.PresentationMessageEmployeePostRequestBody? {
      get
    }
    public init()
    final public func set(presentationMessageEmployeePostRequestBody: MessagesClient5.PresentationMessageEmployeePostRequestBody?) -> Self
    final public func build() -> MessagesClient5.PostMessagesEmployeeRequestParams
    public static func == (lhs: MessagesClient5.PostMessagesEmployeeRequestParams.Builder, rhs: MessagesClient5.PostMessagesEmployeeRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostMessagesEmployeeRequestParams, rhs: MessagesClient5.PostMessagesEmployeeRequestParams) -> Swift.Bool
}
public struct PostSubscribersRequestParams : Swift.Equatable {
  public let topicId: Swift.String
  public let subscribersPostRequestBody: MessagesClient5.SubscribersPostRequestBody?
  final public class Builder : Swift.Equatable {
    final public let topicId: Swift.String
    final public var subscribersPostRequestBody: MessagesClient5.SubscribersPostRequestBody? {
      get
    }
    public init(topicId: Swift.String)
    final public func set(subscribersPostRequestBody: MessagesClient5.SubscribersPostRequestBody?) -> Self
    final public func build() -> MessagesClient5.PostSubscribersRequestParams
    public static func == (lhs: MessagesClient5.PostSubscribersRequestParams.Builder, rhs: MessagesClient5.PostSubscribersRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostSubscribersRequestParams, rhs: MessagesClient5.PostSubscribersRequestParams) -> Swift.Bool
}
public struct PostSubscriptionsRequestParams : Swift.Equatable {
  public let topicId: Swift.String
  public let subscriptionsPostRequestBody: MessagesClient5.SubscriptionsPostRequestBody?
  final public class Builder : Swift.Equatable {
    final public let topicId: Swift.String
    final public var subscriptionsPostRequestBody: MessagesClient5.SubscriptionsPostRequestBody? {
      get
    }
    public init(topicId: Swift.String)
    final public func set(subscriptionsPostRequestBody: MessagesClient5.SubscriptionsPostRequestBody?) -> Self
    final public func build() -> MessagesClient5.PostSubscriptionsRequestParams
    public static func == (lhs: MessagesClient5.PostSubscriptionsRequestParams.Builder, rhs: MessagesClient5.PostSubscriptionsRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostSubscriptionsRequestParams, rhs: MessagesClient5.PostSubscriptionsRequestParams) -> Swift.Bool
}
public struct PostTopicsRequestParams : Swift.Equatable {
  public let topicsPostRequestBody: MessagesClient5.TopicsPostRequestBody?
  final public class Builder : Swift.Equatable {
    final public var topicsPostRequestBody: MessagesClient5.TopicsPostRequestBody? {
      get
    }
    public init()
    final public func set(topicsPostRequestBody: MessagesClient5.TopicsPostRequestBody?) -> Self
    final public func build() -> MessagesClient5.PostTopicsRequestParams
    public static func == (lhs: MessagesClient5.PostTopicsRequestParams.Builder, rhs: MessagesClient5.PostTopicsRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostTopicsRequestParams, rhs: MessagesClient5.PostTopicsRequestParams) -> Swift.Bool
}
public struct PutAssignConversationRequestParams : Swift.Equatable {
  public let messageId: Swift.String
  public let messageThreadAssignmentRequestBody: MessagesClient5.MessageThreadAssignmentRequestBody?
  final public class Builder : Swift.Equatable {
    final public let messageId: Swift.String
    final public var messageThreadAssignmentRequestBody: MessagesClient5.MessageThreadAssignmentRequestBody? {
      get
    }
    public init(messageId: Swift.String)
    final public func set(messageThreadAssignmentRequestBody: MessagesClient5.MessageThreadAssignmentRequestBody?) -> Self
    final public func build() -> MessagesClient5.PutAssignConversationRequestParams
    public static func == (lhs: MessagesClient5.PutAssignConversationRequestParams.Builder, rhs: MessagesClient5.PutAssignConversationRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PutAssignConversationRequestParams, rhs: MessagesClient5.PutAssignConversationRequestParams) -> Swift.Bool
}
public struct PutConversationAssignmentRequestParams : Swift.Equatable {
  public let messageThreadBulkAssignmentRequestBody: MessagesClient5.MessageThreadBulkAssignmentRequestBody?
  final public class Builder : Swift.Equatable {
    final public var messageThreadBulkAssignmentRequestBody: MessagesClient5.MessageThreadBulkAssignmentRequestBody? {
      get
    }
    public init()
    final public func set(messageThreadBulkAssignmentRequestBody: MessagesClient5.MessageThreadBulkAssignmentRequestBody?) -> Self
    final public func build() -> MessagesClient5.PutConversationAssignmentRequestParams
    public static func == (lhs: MessagesClient5.PutConversationAssignmentRequestParams.Builder, rhs: MessagesClient5.PutConversationAssignmentRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PutConversationAssignmentRequestParams, rhs: MessagesClient5.PutConversationAssignmentRequestParams) -> Swift.Bool
}
public struct PutConversationResolutionRequestParams : Swift.Equatable {
  public let messageId: Swift.String
  public let messageThreadResolutionRequestBody: MessagesClient5.MessageThreadResolutionRequestBody?
  final public class Builder : Swift.Equatable {
    final public let messageId: Swift.String
    final public var messageThreadResolutionRequestBody: MessagesClient5.MessageThreadResolutionRequestBody? {
      get
    }
    public init(messageId: Swift.String)
    final public func set(messageThreadResolutionRequestBody: MessagesClient5.MessageThreadResolutionRequestBody?) -> Self
    final public func build() -> MessagesClient5.PutConversationResolutionRequestParams
    public static func == (lhs: MessagesClient5.PutConversationResolutionRequestParams.Builder, rhs: MessagesClient5.PutConversationResolutionRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PutConversationResolutionRequestParams, rhs: MessagesClient5.PutConversationResolutionRequestParams) -> Swift.Bool
}
public struct PutConversationResolutionEmployeeRequestParams : Swift.Equatable {
  public let messageThreadBulkResolutionRequestBody: MessagesClient5.MessageThreadBulkResolutionRequestBody?
  final public class Builder : Swift.Equatable {
    final public var messageThreadBulkResolutionRequestBody: MessagesClient5.MessageThreadBulkResolutionRequestBody? {
      get
    }
    public init()
    final public func set(messageThreadBulkResolutionRequestBody: MessagesClient5.MessageThreadBulkResolutionRequestBody?) -> Self
    final public func build() -> MessagesClient5.PutConversationResolutionEmployeeRequestParams
    public static func == (lhs: MessagesClient5.PutConversationResolutionEmployeeRequestParams.Builder, rhs: MessagesClient5.PutConversationResolutionEmployeeRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PutConversationResolutionEmployeeRequestParams, rhs: MessagesClient5.PutConversationResolutionEmployeeRequestParams) -> Swift.Bool
}
public struct PutMarkAsReadUnreadEmployeeRequestParams : Swift.Equatable {
  public let markAsReadUnreadPutRequestBody: MessagesClient5.MarkAsReadUnreadPutRequestBody?
  final public class Builder : Swift.Equatable {
    final public var markAsReadUnreadPutRequestBody: MessagesClient5.MarkAsReadUnreadPutRequestBody? {
      get
    }
    public init()
    final public func set(markAsReadUnreadPutRequestBody: MessagesClient5.MarkAsReadUnreadPutRequestBody?) -> Self
    final public func build() -> MessagesClient5.PutMarkAsReadUnreadEmployeeRequestParams
    public static func == (lhs: MessagesClient5.PutMarkAsReadUnreadEmployeeRequestParams.Builder, rhs: MessagesClient5.PutMarkAsReadUnreadEmployeeRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PutMarkAsReadUnreadEmployeeRequestParams, rhs: MessagesClient5.PutMarkAsReadUnreadEmployeeRequestParams) -> Swift.Bool
}
public struct PutMessageThreadTopicRequestParams : Swift.Equatable {
  public let messageId: Swift.String
  public let updateMessageTopicRequestBody: MessagesClient5.UpdateMessageTopicRequestBody?
  final public class Builder : Swift.Equatable {
    final public let messageId: Swift.String
    final public var updateMessageTopicRequestBody: MessagesClient5.UpdateMessageTopicRequestBody? {
      get
    }
    public init(messageId: Swift.String)
    final public func set(updateMessageTopicRequestBody: MessagesClient5.UpdateMessageTopicRequestBody?) -> Self
    final public func build() -> MessagesClient5.PutMessageThreadTopicRequestParams
    public static func == (lhs: MessagesClient5.PutMessageThreadTopicRequestParams.Builder, rhs: MessagesClient5.PutMessageThreadTopicRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PutMessageThreadTopicRequestParams, rhs: MessagesClient5.PutMessageThreadTopicRequestParams) -> Swift.Bool
}
public struct PutTopicRequestParams : Swift.Equatable {
  public let topicId: Swift.String
  public let xBBSVCRequestId: Swift.String?
  public let topicPutRequestBody: MessagesClient5.TopicPutRequestBody?
  final public class Builder : Swift.Equatable {
    final public let topicId: Swift.String
    final public var xBBSVCRequestId: Swift.String? {
      get
    }
    final public var topicPutRequestBody: MessagesClient5.TopicPutRequestBody? {
      get
    }
    public init(topicId: Swift.String)
    final public func set(xBBSVCRequestId: Swift.String?) -> Self
    final public func set(topicPutRequestBody: MessagesClient5.TopicPutRequestBody?) -> Self
    final public func build() -> MessagesClient5.PutTopicRequestParams
    public static func == (lhs: MessagesClient5.PutTopicRequestParams.Builder, rhs: MessagesClient5.PutTopicRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PutTopicRequestParams, rhs: MessagesClient5.PutTopicRequestParams) -> Swift.Bool
}
public struct EmployeeConversationThread : Swift.Codable, Swift.Equatable {
  public var client: MessagesClient5.Client
  public var assignee: MessagesClient5.Employee?
  public var id: Swift.String
  public var sender: MessagesClient5.MessageSender
  public var topic: MessagesClient5.Topic
  public var subject: Swift.String?
  public var read: Swift.Bool
  public var important: Swift.Bool
  public var readOnly: Swift.Bool
  public var deletable: Swift.Bool
  public var timestamp: Foundation.Date
  public var hasAttachments: Swift.Bool?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of EmployeeConversationThread.Builder class.")
  public init(client: MessagesClient5.Client, assignee: MessagesClient5.Employee? = nil, id: Swift.String, sender: MessagesClient5.MessageSender, topic: MessagesClient5.Topic, subject: Swift.String? = nil, read: Swift.Bool, important: Swift.Bool, readOnly: Swift.Bool, deletable: Swift.Bool, timestamp: Foundation.Date, hasAttachments: Swift.Bool? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let client: MessagesClient5.Client
    final public var assignee: MessagesClient5.Employee? {
      get
    }
    final public let id: Swift.String
    final public let sender: MessagesClient5.MessageSender
    final public let topic: MessagesClient5.Topic
    final public var subject: Swift.String? {
      get
    }
    final public let read: Swift.Bool
    final public let important: Swift.Bool
    final public let readOnly: Swift.Bool
    final public let deletable: Swift.Bool
    final public let timestamp: Foundation.Date
    final public var hasAttachments: Swift.Bool? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(client: MessagesClient5.Client, id: Swift.String, sender: MessagesClient5.MessageSender, topic: MessagesClient5.Topic, read: Swift.Bool, important: Swift.Bool = false, readOnly: Swift.Bool = false, deletable: Swift.Bool = true, timestamp: Foundation.Date)
    final public func set(assignee: MessagesClient5.Employee?) -> Self
    final public func set(subject: Swift.String?) -> Self
    final public func set(hasAttachments: Swift.Bool?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.EmployeeConversationThread
    public static func == (lhs: MessagesClient5.EmployeeConversationThread.Builder, rhs: MessagesClient5.EmployeeConversationThread.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.EmployeeConversationThread, rhs: MessagesClient5.EmployeeConversationThread) -> Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case client
    case assignee
    case id
    case sender
    case topic
    case subject
    case read
    case important
    case readOnly
    case deletable
    case timestamp
    case hasAttachments
    case additions
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
    public typealias AllCases = [MessagesClient5.EmployeeConversationThread.CodingKeys]
    public static var allCases: [MessagesClient5.EmployeeConversationThread.CodingKeys] {
      get
    }
  }
}
public struct ErrorItem : Swift.Codable, Swift.Equatable {
  public var message: Swift.String?
  public var key: Swift.String?
  public var context: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ErrorItem.Builder class.")
  public init(message: Swift.String? = nil, key: Swift.String? = nil, context: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var message: Swift.String? {
      get
    }
    final public var key: Swift.String? {
      get
    }
    final public var context: [Swift.String : Swift.String]? {
      get
    }
    public init()
    final public func set(message: Swift.String?) -> Self
    final public func set(key: Swift.String?) -> Self
    final public func set(context: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ErrorItem
    public static func == (lhs: MessagesClient5.ErrorItem.Builder, rhs: MessagesClient5.ErrorItem.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ErrorItem, rhs: MessagesClient5.ErrorItem) -> Swift.Bool
}
public struct ExtendedTopicsPostResponseBody : Swift.Codable, Swift.Equatable {
  public var name: Swift.String
  public var subscribers: [Swift.String]?
  public var failedSubscriberIds: [Swift.String]?
  public var mailoutTopic: Swift.Bool?
  public var additions: [Swift.String : Swift.String]?
  public var id: Swift.String
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ExtendedTopicsPostResponseBody.Builder class.")
  public init(name: Swift.String, subscribers: [Swift.String]? = nil, failedSubscriberIds: [Swift.String]? = nil, mailoutTopic: Swift.Bool? = nil, additions: [Swift.String : Swift.String]? = nil, id: Swift.String)
  final public class Builder : Swift.Equatable {
    final public let name: Swift.String
    final public var subscribers: [Swift.String]? {
      get
    }
    final public var failedSubscriberIds: [Swift.String]? {
      get
    }
    final public var mailoutTopic: Swift.Bool? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    final public let id: Swift.String
    public init(name: Swift.String, id: Swift.String)
    final public func set(subscribers: [Swift.String]?) -> Self
    final public func set(failedSubscriberIds: [Swift.String]?) -> Self
    final public func set(mailoutTopic: Swift.Bool?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.ExtendedTopicsPostResponseBody
    public static func == (lhs: MessagesClient5.ExtendedTopicsPostResponseBody.Builder, rhs: MessagesClient5.ExtendedTopicsPostResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ExtendedTopicsPostResponseBody, rhs: MessagesClient5.ExtendedTopicsPostResponseBody) -> Swift.Bool
}
extension String : Swift.CodingKey {
  public var stringValue: Swift.String {
    get
  }
  public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
}
extension KeyedEncodingContainerProtocol {
  public mutating func encodeArray<T>(_ values: [T], forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeArrayIfPresent<T>(_ values: [T]?, forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeMap<T>(_ pairs: [Self.Key : T]) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
  public mutating func encodeMapIfPresent<T>(_ pairs: [Self.Key : T]?) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
}
extension KeyedDecodingContainerProtocol {
  public func decodeArray<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T] where T : Swift.Decodable
  public func decodeArrayIfPresent<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T]? where T : Swift.Decodable
  public func decodeMap<T>(_ type: T.Type, excludedKeys: Swift.Set<Self.Key>) throws -> [Self.Key : T] where T : Swift.Decodable, Self.Key : Swift.Hashable
}
public struct ForbiddenError : Swift.Codable, Swift.Equatable {
  public var message: Swift.String?
  public var errors: [MessagesClient5.ErrorItem]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ForbiddenError.Builder class.")
  public init(message: Swift.String? = nil, errors: [MessagesClient5.ErrorItem]? = nil)
  final public class Builder : Swift.Equatable {
    final public var message: Swift.String? {
      get
    }
    final public var errors: [MessagesClient5.ErrorItem]? {
      get
    }
    public init()
    final public func set(message: Swift.String?) -> Self
    final public func set(errors: [MessagesClient5.ErrorItem]?) -> Self
    final public func build() -> MessagesClient5.ForbiddenError
    public static func == (lhs: MessagesClient5.ForbiddenError.Builder, rhs: MessagesClient5.ForbiddenError.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.ForbiddenError, rhs: MessagesClient5.ForbiddenError) -> Swift.Bool
}
public struct InlineObject : Swift.Codable, Swift.Equatable {
  public var attachment: Foundation.URL?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of InlineObject.Builder class.")
  public init(attachment: Foundation.URL? = nil)
  final public class Builder : Swift.Equatable {
    final public var attachment: Foundation.URL? {
      get
    }
    public init()
    final public func set(attachment: Foundation.URL?) -> Self
    final public func build() -> MessagesClient5.InlineObject
    public static func == (lhs: MessagesClient5.InlineObject.Builder, rhs: MessagesClient5.InlineObject.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.InlineObject, rhs: MessagesClient5.InlineObject) -> Swift.Bool
}
public struct InlineObject1 : Swift.Codable, Swift.Equatable {
  public var attachment: Foundation.URL?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of InlineObject1.Builder class.")
  public init(attachment: Foundation.URL? = nil)
  final public class Builder : Swift.Equatable {
    final public var attachment: Foundation.URL? {
      get
    }
    public init()
    final public func set(attachment: Foundation.URL?) -> Self
    final public func build() -> MessagesClient5.InlineObject1
    public static func == (lhs: MessagesClient5.InlineObject1.Builder, rhs: MessagesClient5.InlineObject1.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.InlineObject1, rhs: MessagesClient5.InlineObject1) -> Swift.Bool
}
public struct InternalServerError : Swift.Codable, Swift.Equatable {
  public var message: Swift.String?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of InternalServerError.Builder class.")
  public init(message: Swift.String? = nil)
  final public class Builder : Swift.Equatable {
    final public var message: Swift.String? {
      get
    }
    public init()
    final public func set(message: Swift.String?) -> Self
    final public func build() -> MessagesClient5.InternalServerError
    public static func == (lhs: MessagesClient5.InternalServerError.Builder, rhs: MessagesClient5.InternalServerError.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.InternalServerError, rhs: MessagesClient5.InternalServerError) -> Swift.Bool
}
public protocol MailoutAPIProtocol {
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteMailoutRequestParams class.")
  func deleteMailoutCall(mailoutId: Swift.String) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  func deleteMailoutCall(params: MessagesClient5.DeleteMailoutRequestParams) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMailoutRequestParams class.")
  func getMailoutCall(mailoutId: Swift.String) throws -> ClientCommon.Call<MessagesClient5.MailoutGetResponseBody>
  func getMailoutCall(params: MessagesClient5.GetMailoutRequestParams) throws -> ClientCommon.Call<MessagesClient5.MailoutGetResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMailoutsRequestParams class.")
  func getMailoutsCall(from: Swift.Int?, size: Swift.Int?) throws -> ClientCommon.Call<[MessagesClient5.MailoutBase]>
  func getMailoutsCall(params: MessagesClient5.GetMailoutsRequestParams) throws -> ClientCommon.Call<[MessagesClient5.MailoutBase]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMailoutRequestParams class.")
  func postMailoutCall(mailoutPostRequestBody: MessagesClient5.MailoutPostRequestBody?) throws -> ClientCommon.Call<MessagesClient5.MailoutPostResponseBody>
  func postMailoutCall(params: MessagesClient5.PostMailoutRequestParams) throws -> ClientCommon.Call<MessagesClient5.MailoutPostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMailoutPreviewRequestParams class.")
  func postMailoutPreviewCall(mailoutPreviewRequestBody: MessagesClient5.MailoutPreviewRequestBody?) throws -> ClientCommon.Call<MessagesClient5.MailoutPreviewResponseBody>
  func postMailoutPreviewCall(params: MessagesClient5.PostMailoutPreviewRequestParams) throws -> ClientCommon.Call<MessagesClient5.MailoutPreviewResponseBody>
}
@objc @_inheritsConvenienceInitializers public class MailoutAPI : ObjectiveC.NSObject, DBSClient, MessagesClient5.MailoutAPIProtocol {
  @objc public var dataProvider: DBSDataProvider?
  @objc public var baseURL: Foundation.URL
  @objc override dynamic public init()
  required public init(dataProvider: DBSDataProvider, baseURL: Foundation.URL)
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteMailoutRequestParams class.")
  open func deleteMailoutCall(mailoutId: Swift.String) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  open func deleteMailoutCall(params: MessagesClient5.DeleteMailoutRequestParams) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMailoutRequestParams class.")
  open func getMailoutCall(mailoutId: Swift.String) throws -> ClientCommon.Call<MessagesClient5.MailoutGetResponseBody>
  open func getMailoutCall(params: MessagesClient5.GetMailoutRequestParams) throws -> ClientCommon.Call<MessagesClient5.MailoutGetResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMailoutsRequestParams class.")
  open func getMailoutsCall(from: Swift.Int? = nil, size: Swift.Int? = nil) throws -> ClientCommon.Call<[MessagesClient5.MailoutBase]>
  open func getMailoutsCall(params: MessagesClient5.GetMailoutsRequestParams) throws -> ClientCommon.Call<[MessagesClient5.MailoutBase]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMailoutRequestParams class.")
  open func postMailoutCall(mailoutPostRequestBody: MessagesClient5.MailoutPostRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.MailoutPostResponseBody>
  open func postMailoutCall(params: MessagesClient5.PostMailoutRequestParams) throws -> ClientCommon.Call<MessagesClient5.MailoutPostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMailoutPreviewRequestParams class.")
  open func postMailoutPreviewCall(mailoutPreviewRequestBody: MessagesClient5.MailoutPreviewRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.MailoutPreviewResponseBody>
  open func postMailoutPreviewCall(params: MessagesClient5.PostMailoutPreviewRequestParams) throws -> ClientCommon.Call<MessagesClient5.MailoutPreviewResponseBody>
  @objc deinit
}
public struct DeleteMailoutRequestParams : Swift.Equatable {
  public let mailoutId: Swift.String
  final public class Builder : Swift.Equatable {
    final public let mailoutId: Swift.String
    public init(mailoutId: Swift.String)
    final public func build() -> MessagesClient5.DeleteMailoutRequestParams
    public static func == (lhs: MessagesClient5.DeleteMailoutRequestParams.Builder, rhs: MessagesClient5.DeleteMailoutRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.DeleteMailoutRequestParams, rhs: MessagesClient5.DeleteMailoutRequestParams) -> Swift.Bool
}
public struct GetMailoutRequestParams : Swift.Equatable {
  public let mailoutId: Swift.String
  final public class Builder : Swift.Equatable {
    final public let mailoutId: Swift.String
    public init(mailoutId: Swift.String)
    final public func build() -> MessagesClient5.GetMailoutRequestParams
    public static func == (lhs: MessagesClient5.GetMailoutRequestParams.Builder, rhs: MessagesClient5.GetMailoutRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetMailoutRequestParams, rhs: MessagesClient5.GetMailoutRequestParams) -> Swift.Bool
}
public struct GetMailoutsRequestParams : Swift.Equatable {
  public let from: Swift.Int?
  public let size: Swift.Int?
  final public class Builder : Swift.Equatable {
    final public var from: Swift.Int? {
      get
    }
    final public var size: Swift.Int? {
      get
    }
    public init()
    final public func set(from: Swift.Int?) -> Self
    final public func set(size: Swift.Int?) -> Self
    final public func build() -> MessagesClient5.GetMailoutsRequestParams
    public static func == (lhs: MessagesClient5.GetMailoutsRequestParams.Builder, rhs: MessagesClient5.GetMailoutsRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetMailoutsRequestParams, rhs: MessagesClient5.GetMailoutsRequestParams) -> Swift.Bool
}
public struct PostMailoutRequestParams : Swift.Equatable {
  public let mailoutPostRequestBody: MessagesClient5.MailoutPostRequestBody?
  final public class Builder : Swift.Equatable {
    final public var mailoutPostRequestBody: MessagesClient5.MailoutPostRequestBody? {
      get
    }
    public init()
    final public func set(mailoutPostRequestBody: MessagesClient5.MailoutPostRequestBody?) -> Self
    final public func build() -> MessagesClient5.PostMailoutRequestParams
    public static func == (lhs: MessagesClient5.PostMailoutRequestParams.Builder, rhs: MessagesClient5.PostMailoutRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostMailoutRequestParams, rhs: MessagesClient5.PostMailoutRequestParams) -> Swift.Bool
}
public struct PostMailoutPreviewRequestParams : Swift.Equatable {
  public let mailoutPreviewRequestBody: MessagesClient5.MailoutPreviewRequestBody?
  final public class Builder : Swift.Equatable {
    final public var mailoutPreviewRequestBody: MessagesClient5.MailoutPreviewRequestBody? {
      get
    }
    public init()
    final public func set(mailoutPreviewRequestBody: MessagesClient5.MailoutPreviewRequestBody?) -> Self
    final public func build() -> MessagesClient5.PostMailoutPreviewRequestParams
    public static func == (lhs: MessagesClient5.PostMailoutPreviewRequestParams.Builder, rhs: MessagesClient5.PostMailoutPreviewRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostMailoutPreviewRequestParams, rhs: MessagesClient5.PostMailoutPreviewRequestParams) -> Swift.Bool
}
public struct MailoutBase : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var mailoutName: Swift.String?
  public var subject: Swift.String
  public var topic: MessagesClient5.Topic
  public var senderDisplayName: Swift.String
  public var initiationDate: Foundation.Date
  public var status: MessagesClient5.MailoutStatus
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MailoutBase.Builder class.")
  public init(id: Swift.String, mailoutName: Swift.String? = nil, subject: Swift.String, topic: MessagesClient5.Topic, senderDisplayName: Swift.String, initiationDate: Foundation.Date, status: MessagesClient5.MailoutStatus, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public var mailoutName: Swift.String? {
      get
    }
    final public let subject: Swift.String
    final public let topic: MessagesClient5.Topic
    final public let senderDisplayName: Swift.String
    final public let initiationDate: Foundation.Date
    final public let status: MessagesClient5.MailoutStatus
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, subject: Swift.String, topic: MessagesClient5.Topic, senderDisplayName: Swift.String, initiationDate: Foundation.Date, status: MessagesClient5.MailoutStatus)
    final public func set(mailoutName: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MailoutBase
    public static func == (lhs: MessagesClient5.MailoutBase.Builder, rhs: MessagesClient5.MailoutBase.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MailoutBase, rhs: MessagesClient5.MailoutBase) -> Swift.Bool
}
public struct MailoutGetResponseBody : Swift.Codable, Swift.Equatable {
  public var sender: MessagesClient5.MessageSender
  public var totalRecipientsCount: Swift.Int?
  public var deliveredMessagesNumber: Swift.Int?
  public var readMessagesNumber: Swift.Int?
  public var important: Swift.Bool
  public var deletable: Swift.Bool
  public var body: Swift.String
  public var isBodyHtml: Swift.Bool?
  public var attachments: [MessagesClient5.Metadata]?
  public var id: Swift.String
  public var mailoutName: Swift.String?
  public var subject: Swift.String
  public var topic: MessagesClient5.Topic
  public var senderDisplayName: Swift.String
  public var initiationDate: Foundation.Date
  public var status: MessagesClient5.MailoutStatus
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MailoutGetResponseBody.Builder class.")
  public init(sender: MessagesClient5.MessageSender, totalRecipientsCount: Swift.Int? = nil, deliveredMessagesNumber: Swift.Int? = nil, readMessagesNumber: Swift.Int? = nil, important: Swift.Bool, deletable: Swift.Bool, body: Swift.String, isBodyHtml: Swift.Bool? = nil, attachments: [MessagesClient5.Metadata]? = nil, id: Swift.String, mailoutName: Swift.String? = nil, subject: Swift.String, topic: MessagesClient5.Topic, senderDisplayName: Swift.String, initiationDate: Foundation.Date, status: MessagesClient5.MailoutStatus, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let sender: MessagesClient5.MessageSender
    final public var totalRecipientsCount: Swift.Int? {
      get
    }
    final public var deliveredMessagesNumber: Swift.Int? {
      get
    }
    final public var readMessagesNumber: Swift.Int? {
      get
    }
    final public let important: Swift.Bool
    final public let deletable: Swift.Bool
    final public let body: Swift.String
    final public var isBodyHtml: Swift.Bool? {
      get
    }
    final public var attachments: [MessagesClient5.Metadata]? {
      get
    }
    final public let id: Swift.String
    final public var mailoutName: Swift.String? {
      get
    }
    final public let subject: Swift.String
    final public let topic: MessagesClient5.Topic
    final public let senderDisplayName: Swift.String
    final public let initiationDate: Foundation.Date
    final public let status: MessagesClient5.MailoutStatus
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(sender: MessagesClient5.MessageSender, important: Swift.Bool = false, deletable: Swift.Bool = true, body: Swift.String, id: Swift.String, subject: Swift.String, topic: MessagesClient5.Topic, senderDisplayName: Swift.String, initiationDate: Foundation.Date, status: MessagesClient5.MailoutStatus)
    final public func set(totalRecipientsCount: Swift.Int?) -> Self
    final public func set(deliveredMessagesNumber: Swift.Int?) -> Self
    final public func set(readMessagesNumber: Swift.Int?) -> Self
    final public func set(isBodyHtml: Swift.Bool?) -> Self
    final public func set(attachments: [MessagesClient5.Metadata]?) -> Self
    final public func set(mailoutName: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MailoutGetResponseBody
    public static func == (lhs: MessagesClient5.MailoutGetResponseBody.Builder, rhs: MessagesClient5.MailoutGetResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MailoutGetResponseBody, rhs: MessagesClient5.MailoutGetResponseBody) -> Swift.Bool
}
public struct MailoutPostRequestBody : Swift.Codable, Swift.Equatable {
  public var mailoutName: Swift.String?
  public var recipientsData: MessagesClient5.RecipientsData
  public var body: Swift.String
  public var isBodyHtml: Swift.Bool?
  public var subject: Swift.String
  public var topic: Swift.String
  public var senderDisplayName: Swift.String
  public var important: Swift.Bool?
  public var deletable: Swift.Bool?
  public var attachments: [Swift.String]?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MailoutPostRequestBody.Builder class.")
  public init(mailoutName: Swift.String? = nil, recipientsData: MessagesClient5.RecipientsData, body: Swift.String, isBodyHtml: Swift.Bool? = nil, subject: Swift.String, topic: Swift.String, senderDisplayName: Swift.String, important: Swift.Bool? = nil, deletable: Swift.Bool? = nil, attachments: [Swift.String]? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var mailoutName: Swift.String? {
      get
    }
    final public let recipientsData: MessagesClient5.RecipientsData
    final public let body: Swift.String
    final public var isBodyHtml: Swift.Bool? {
      get
    }
    final public let subject: Swift.String
    final public let topic: Swift.String
    final public let senderDisplayName: Swift.String
    final public var important: Swift.Bool? {
      get
    }
    final public var deletable: Swift.Bool? {
      get
    }
    final public var attachments: [Swift.String]? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(recipientsData: MessagesClient5.RecipientsData, body: Swift.String, subject: Swift.String, topic: Swift.String, senderDisplayName: Swift.String)
    final public func set(mailoutName: Swift.String?) -> Self
    final public func set(isBodyHtml: Swift.Bool?) -> Self
    final public func set(important: Swift.Bool?) -> Self
    final public func set(deletable: Swift.Bool?) -> Self
    final public func set(attachments: [Swift.String]?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MailoutPostRequestBody
    public static func == (lhs: MessagesClient5.MailoutPostRequestBody.Builder, rhs: MessagesClient5.MailoutPostRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MailoutPostRequestBody, rhs: MessagesClient5.MailoutPostRequestBody) -> Swift.Bool
}
public struct MailoutPostResponseBody : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MailoutPostResponseBody.Builder class.")
  public init(id: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MailoutPostResponseBody
    public static func == (lhs: MessagesClient5.MailoutPostResponseBody.Builder, rhs: MessagesClient5.MailoutPostResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MailoutPostResponseBody, rhs: MessagesClient5.MailoutPostResponseBody) -> Swift.Bool
}
public struct MailoutPreviewRequestBody : Swift.Codable, Swift.Equatable {
  public var body: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MailoutPreviewRequestBody.Builder class.")
  public init(body: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let body: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(body: Swift.String)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MailoutPreviewRequestBody
    public static func == (lhs: MessagesClient5.MailoutPreviewRequestBody.Builder, rhs: MessagesClient5.MailoutPreviewRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MailoutPreviewRequestBody, rhs: MessagesClient5.MailoutPreviewRequestBody) -> Swift.Bool
}
public struct MailoutPreviewResponseBody : Swift.Codable, Swift.Equatable {
  public var body: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MailoutPreviewResponseBody.Builder class.")
  public init(body: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let body: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(body: Swift.String)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MailoutPreviewResponseBody
    public static func == (lhs: MessagesClient5.MailoutPreviewResponseBody.Builder, rhs: MessagesClient5.MailoutPreviewResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MailoutPreviewResponseBody, rhs: MessagesClient5.MailoutPreviewResponseBody) -> Swift.Bool
}
public enum MailoutStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
  case created
  case preparing
  case ready
  case processing
  case done
  case error
  case cancellationInProcess
  case cancelled
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [MessagesClient5.MailoutStatus]
  public static var allCases: [MessagesClient5.MailoutStatus] {
    get
  }
}
public struct MarkAsReadUnreadPutRequestBody : Swift.Codable, Swift.Equatable {
  public enum Status : Swift.String, Swift.Codable, Swift.CaseIterable {
    case read
    case unread
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [MessagesClient5.MarkAsReadUnreadPutRequestBody.Status]
    public static var allCases: [MessagesClient5.MarkAsReadUnreadPutRequestBody.Status] {
      get
    }
  }
  public var status: MessagesClient5.MarkAsReadUnreadPutRequestBody.Status
  public var ids: [Swift.String]
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MarkAsReadUnreadPutRequestBody.Builder class.")
  public init(status: MessagesClient5.MarkAsReadUnreadPutRequestBody.Status, ids: [Swift.String], additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let status: MessagesClient5.MarkAsReadUnreadPutRequestBody.Status
    final public let ids: [Swift.String]
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(status: MessagesClient5.MarkAsReadUnreadPutRequestBody.Status, ids: [Swift.String])
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MarkAsReadUnreadPutRequestBody
    public static func == (lhs: MessagesClient5.MarkAsReadUnreadPutRequestBody.Builder, rhs: MessagesClient5.MarkAsReadUnreadPutRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MarkAsReadUnreadPutRequestBody, rhs: MessagesClient5.MarkAsReadUnreadPutRequestBody) -> Swift.Bool
}
public struct MarkAsReadUnreadPutResponseBody : Swift.Codable, Swift.Equatable {
  public var changedItems: [Swift.String]
  public var failedItems: [Swift.String]
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MarkAsReadUnreadPutResponseBody.Builder class.")
  public init(changedItems: [Swift.String], failedItems: [Swift.String], additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let changedItems: [Swift.String]
    final public let failedItems: [Swift.String]
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(changedItems: [Swift.String], failedItems: [Swift.String])
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MarkAsReadUnreadPutResponseBody
    public static func == (lhs: MessagesClient5.MarkAsReadUnreadPutResponseBody.Builder, rhs: MessagesClient5.MarkAsReadUnreadPutResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MarkAsReadUnreadPutResponseBody, rhs: MessagesClient5.MarkAsReadUnreadPutResponseBody) -> Swift.Bool
}
public struct MessageDraftGetResponseBody : Swift.Codable, Swift.Equatable {
  public var attachments: [MessagesClient5.Metadata]?
  public var id: Swift.String
  public var body: Swift.String?
  public var subject: Swift.String?
  public var topic: MessagesClient5.Topic?
  public var timestamp: Foundation.Date
  public var conversationId: Swift.String?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageDraftGetResponseBody.Builder class.")
  public init(attachments: [MessagesClient5.Metadata]? = nil, id: Swift.String, body: Swift.String? = nil, subject: Swift.String? = nil, topic: MessagesClient5.Topic? = nil, timestamp: Foundation.Date, conversationId: Swift.String? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var attachments: [MessagesClient5.Metadata]? {
      get
    }
    final public let id: Swift.String
    final public var body: Swift.String? {
      get
    }
    final public var subject: Swift.String? {
      get
    }
    final public var topic: MessagesClient5.Topic? {
      get
    }
    final public let timestamp: Foundation.Date
    final public var conversationId: Swift.String? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, timestamp: Foundation.Date)
    final public func set(attachments: [MessagesClient5.Metadata]?) -> Self
    final public func set(body: Swift.String?) -> Self
    final public func set(subject: Swift.String?) -> Self
    final public func set(topic: MessagesClient5.Topic?) -> Self
    final public func set(conversationId: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageDraftGetResponseBody
    public static func == (lhs: MessagesClient5.MessageDraftGetResponseBody.Builder, rhs: MessagesClient5.MessageDraftGetResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageDraftGetResponseBody, rhs: MessagesClient5.MessageDraftGetResponseBody) -> Swift.Bool
}
public struct MessageDraftPutRequestBody : Swift.Codable, Swift.Equatable {
  public var body: Swift.String?
  public var attachments: [Swift.String]?
  public var subject: Swift.String?
  public var topic: Swift.String?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageDraftPutRequestBody.Builder class.")
  public init(body: Swift.String? = nil, attachments: [Swift.String]? = nil, subject: Swift.String? = nil, topic: Swift.String? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var body: Swift.String? {
      get
    }
    final public var attachments: [Swift.String]? {
      get
    }
    final public var subject: Swift.String? {
      get
    }
    final public var topic: Swift.String? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init()
    final public func set(body: Swift.String?) -> Self
    final public func set(attachments: [Swift.String]?) -> Self
    final public func set(subject: Swift.String?) -> Self
    final public func set(topic: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageDraftPutRequestBody
    public static func == (lhs: MessagesClient5.MessageDraftPutRequestBody.Builder, rhs: MessagesClient5.MessageDraftPutRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageDraftPutRequestBody, rhs: MessagesClient5.MessageDraftPutRequestBody) -> Swift.Bool
}
public struct MessageDraftsGetResponseBody : Swift.Codable, Swift.Equatable {
  public var hasAttachments: Swift.Bool?
  public var id: Swift.String
  public var body: Swift.String?
  public var subject: Swift.String?
  public var topic: MessagesClient5.Topic?
  public var timestamp: Foundation.Date
  public var conversationId: Swift.String?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageDraftsGetResponseBody.Builder class.")
  public init(hasAttachments: Swift.Bool? = nil, id: Swift.String, body: Swift.String? = nil, subject: Swift.String? = nil, topic: MessagesClient5.Topic? = nil, timestamp: Foundation.Date, conversationId: Swift.String? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var hasAttachments: Swift.Bool? {
      get
    }
    final public let id: Swift.String
    final public var body: Swift.String? {
      get
    }
    final public var subject: Swift.String? {
      get
    }
    final public var topic: MessagesClient5.Topic? {
      get
    }
    final public let timestamp: Foundation.Date
    final public var conversationId: Swift.String? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, timestamp: Foundation.Date)
    final public func set(hasAttachments: Swift.Bool?) -> Self
    final public func set(body: Swift.String?) -> Self
    final public func set(subject: Swift.String?) -> Self
    final public func set(topic: MessagesClient5.Topic?) -> Self
    final public func set(conversationId: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageDraftsGetResponseBody
    public static func == (lhs: MessagesClient5.MessageDraftsGetResponseBody.Builder, rhs: MessagesClient5.MessageDraftsGetResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageDraftsGetResponseBody, rhs: MessagesClient5.MessageDraftsGetResponseBody) -> Swift.Bool
}
public struct MessageDraftsPostRequestBody : Swift.Codable, Swift.Equatable {
  public var body: Swift.String?
  public var attachments: [Swift.String]?
  public var subject: Swift.String?
  public var topic: Swift.String?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageDraftsPostRequestBody.Builder class.")
  public init(body: Swift.String? = nil, attachments: [Swift.String]? = nil, subject: Swift.String? = nil, topic: Swift.String? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var body: Swift.String? {
      get
    }
    final public var attachments: [Swift.String]? {
      get
    }
    final public var subject: Swift.String? {
      get
    }
    final public var topic: Swift.String? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init()
    final public func set(body: Swift.String?) -> Self
    final public func set(attachments: [Swift.String]?) -> Self
    final public func set(subject: Swift.String?) -> Self
    final public func set(topic: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageDraftsPostRequestBody
    public static func == (lhs: MessagesClient5.MessageDraftsPostRequestBody.Builder, rhs: MessagesClient5.MessageDraftsPostRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageDraftsPostRequestBody, rhs: MessagesClient5.MessageDraftsPostRequestBody) -> Swift.Bool
}
public struct MessageGetResponseBody : Swift.Codable, Swift.Equatable {
  public var isMyMessage: Swift.Bool
  public var id: Swift.String
  public var body: Swift.String
  public var isBodyHtml: Swift.Bool?
  public var sender: MessagesClient5.MessageSender
  public var recipient: Swift.String?
  public var createdAt: Foundation.Date
  public var attachments: [MessagesClient5.Metadata]?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageGetResponseBody.Builder class.")
  public init(isMyMessage: Swift.Bool, id: Swift.String, body: Swift.String, isBodyHtml: Swift.Bool? = nil, sender: MessagesClient5.MessageSender, recipient: Swift.String? = nil, createdAt: Foundation.Date, attachments: [MessagesClient5.Metadata]? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let isMyMessage: Swift.Bool
    final public let id: Swift.String
    final public let body: Swift.String
    final public var isBodyHtml: Swift.Bool? {
      get
    }
    final public let sender: MessagesClient5.MessageSender
    final public var recipient: Swift.String? {
      get
    }
    final public let createdAt: Foundation.Date
    final public var attachments: [MessagesClient5.Metadata]? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(isMyMessage: Swift.Bool, id: Swift.String, body: Swift.String, sender: MessagesClient5.MessageSender, createdAt: Foundation.Date)
    final public func set(isBodyHtml: Swift.Bool?) -> Self
    final public func set(recipient: Swift.String?) -> Self
    final public func set(attachments: [MessagesClient5.Metadata]?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageGetResponseBody
    public static func == (lhs: MessagesClient5.MessageGetResponseBody.Builder, rhs: MessagesClient5.MessageGetResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageGetResponseBody, rhs: MessagesClient5.MessageGetResponseBody) -> Swift.Bool
}
public struct MessageParent : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var body: Swift.String
  public var isBodyHtml: Swift.Bool?
  public var sender: MessagesClient5.MessageSender
  public var recipient: Swift.String?
  public var createdAt: Foundation.Date
  public var attachments: [MessagesClient5.Metadata]?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageParent.Builder class.")
  public init(id: Swift.String, body: Swift.String, isBodyHtml: Swift.Bool? = nil, sender: MessagesClient5.MessageSender, recipient: Swift.String? = nil, createdAt: Foundation.Date, attachments: [MessagesClient5.Metadata]? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public let body: Swift.String
    final public var isBodyHtml: Swift.Bool? {
      get
    }
    final public let sender: MessagesClient5.MessageSender
    final public var recipient: Swift.String? {
      get
    }
    final public let createdAt: Foundation.Date
    final public var attachments: [MessagesClient5.Metadata]? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, body: Swift.String, sender: MessagesClient5.MessageSender, createdAt: Foundation.Date)
    final public func set(isBodyHtml: Swift.Bool?) -> Self
    final public func set(recipient: Swift.String?) -> Self
    final public func set(attachments: [MessagesClient5.Metadata]?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageParent
    public static func == (lhs: MessagesClient5.MessageParent.Builder, rhs: MessagesClient5.MessageParent.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageParent, rhs: MessagesClient5.MessageParent) -> Swift.Bool
}
public struct MessageReplyPostRequestBody : Swift.Codable, Swift.Equatable {
  public var body: Swift.String
  public var sender: MessagesClient5.MessageSender?
  public var attachments: [Swift.String]?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageReplyPostRequestBody.Builder class.")
  public init(body: Swift.String, sender: MessagesClient5.MessageSender? = nil, attachments: [Swift.String]? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let body: Swift.String
    final public var sender: MessagesClient5.MessageSender? {
      get
    }
    final public var attachments: [Swift.String]? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(body: Swift.String)
    final public func set(sender: MessagesClient5.MessageSender?) -> Self
    final public func set(attachments: [Swift.String]?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageReplyPostRequestBody
    public static func == (lhs: MessagesClient5.MessageReplyPostRequestBody.Builder, rhs: MessagesClient5.MessageReplyPostRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageReplyPostRequestBody, rhs: MessagesClient5.MessageReplyPostRequestBody) -> Swift.Bool
}
public struct MessageSender : Swift.Codable, Swift.Equatable {
  public var id: Swift.String?
  public var name: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageSender.Builder class.")
  public init(id: Swift.String? = nil, name: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var id: Swift.String? {
      get
    }
    final public let name: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(name: Swift.String)
    final public func set(id: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageSender
    public static func == (lhs: MessagesClient5.MessageSender.Builder, rhs: MessagesClient5.MessageSender.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageSender, rhs: MessagesClient5.MessageSender) -> Swift.Bool
}
public struct MessageThreadAssignmentRequestBody : Swift.Codable, Swift.Equatable {
  public var assigneeId: Swift.String?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadAssignmentRequestBody.Builder class.")
  public init(assigneeId: Swift.String? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var assigneeId: Swift.String? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init()
    final public func set(assigneeId: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageThreadAssignmentRequestBody
    public static func == (lhs: MessagesClient5.MessageThreadAssignmentRequestBody.Builder, rhs: MessagesClient5.MessageThreadAssignmentRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadAssignmentRequestBody, rhs: MessagesClient5.MessageThreadAssignmentRequestBody) -> Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case assigneeId
    case additions
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
    public typealias AllCases = [MessagesClient5.MessageThreadAssignmentRequestBody.CodingKeys]
    public static var allCases: [MessagesClient5.MessageThreadAssignmentRequestBody.CodingKeys] {
      get
    }
  }
}
public struct MessageThreadAssignmentResponseBody : Swift.Codable, Swift.Equatable {
  public var internalId: Swift.String
  public var fullName: Swift.String
  public var isRequester: Swift.Bool
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadAssignmentResponseBody.Builder class.")
  public init(internalId: Swift.String, fullName: Swift.String, isRequester: Swift.Bool, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let internalId: Swift.String
    final public let fullName: Swift.String
    final public let isRequester: Swift.Bool
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(internalId: Swift.String, fullName: Swift.String, isRequester: Swift.Bool)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageThreadAssignmentResponseBody
    public static func == (lhs: MessagesClient5.MessageThreadAssignmentResponseBody.Builder, rhs: MessagesClient5.MessageThreadAssignmentResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadAssignmentResponseBody, rhs: MessagesClient5.MessageThreadAssignmentResponseBody) -> Swift.Bool
}
public struct MessageThreadBulkAssignementRequestBody : Swift.Codable, Swift.Equatable {
  public var messageThreads: [Swift.String]
  public var assigneeId: Swift.String?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadBulkAssignementRequestBody.Builder class.")
  public init(messageThreads: [Swift.String], assigneeId: Swift.String? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let messageThreads: [Swift.String]
    final public var assigneeId: Swift.String? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(messageThreads: [Swift.String])
    final public func set(assigneeId: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageThreadBulkAssignementRequestBody
    public static func == (lhs: MessagesClient5.MessageThreadBulkAssignementRequestBody.Builder, rhs: MessagesClient5.MessageThreadBulkAssignementRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadBulkAssignementRequestBody, rhs: MessagesClient5.MessageThreadBulkAssignementRequestBody) -> Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case messageThreads
    case assigneeId
    case additions
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
    public typealias AllCases = [MessagesClient5.MessageThreadBulkAssignementRequestBody.CodingKeys]
    public static var allCases: [MessagesClient5.MessageThreadBulkAssignementRequestBody.CodingKeys] {
      get
    }
  }
}
public struct MessageThreadBulkAssignementResponseBody : Swift.Codable, Swift.Equatable {
  public var assignedItems: [Swift.String]
  public var failedItems: [Swift.String]
  public var internalId: Swift.String
  public var fullName: Swift.String
  public var isRequester: Swift.Bool
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadBulkAssignementResponseBody.Builder class.")
  public init(assignedItems: [Swift.String], failedItems: [Swift.String], internalId: Swift.String, fullName: Swift.String, isRequester: Swift.Bool, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let assignedItems: [Swift.String]
    final public let failedItems: [Swift.String]
    final public let internalId: Swift.String
    final public let fullName: Swift.String
    final public let isRequester: Swift.Bool
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(assignedItems: [Swift.String], failedItems: [Swift.String], internalId: Swift.String, fullName: Swift.String, isRequester: Swift.Bool)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageThreadBulkAssignementResponseBody
    public static func == (lhs: MessagesClient5.MessageThreadBulkAssignementResponseBody.Builder, rhs: MessagesClient5.MessageThreadBulkAssignementResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadBulkAssignementResponseBody, rhs: MessagesClient5.MessageThreadBulkAssignementResponseBody) -> Swift.Bool
}
public struct MessageThreadBulkAssignmentRequestBody : Swift.Codable, Swift.Equatable {
  public var messageThreads: [Swift.String]
  public var assigneeId: Swift.String?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadBulkAssignmentRequestBody.Builder class.")
  public init(messageThreads: [Swift.String], assigneeId: Swift.String? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let messageThreads: [Swift.String]
    final public var assigneeId: Swift.String? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(messageThreads: [Swift.String])
    final public func set(assigneeId: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageThreadBulkAssignmentRequestBody
    public static func == (lhs: MessagesClient5.MessageThreadBulkAssignmentRequestBody.Builder, rhs: MessagesClient5.MessageThreadBulkAssignmentRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadBulkAssignmentRequestBody, rhs: MessagesClient5.MessageThreadBulkAssignmentRequestBody) -> Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case messageThreads
    case assigneeId
    case additions
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
    public typealias AllCases = [MessagesClient5.MessageThreadBulkAssignmentRequestBody.CodingKeys]
    public static var allCases: [MessagesClient5.MessageThreadBulkAssignmentRequestBody.CodingKeys] {
      get
    }
  }
}
public struct MessageThreadBulkAssignmentResponseBody : Swift.Codable, Swift.Equatable {
  public var assignedItems: [Swift.String]
  public var failedItems: [Swift.String]
  public var internalId: Swift.String
  public var fullName: Swift.String
  public var isRequester: Swift.Bool
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadBulkAssignmentResponseBody.Builder class.")
  public init(assignedItems: [Swift.String], failedItems: [Swift.String], internalId: Swift.String, fullName: Swift.String, isRequester: Swift.Bool, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let assignedItems: [Swift.String]
    final public let failedItems: [Swift.String]
    final public let internalId: Swift.String
    final public let fullName: Swift.String
    final public let isRequester: Swift.Bool
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(assignedItems: [Swift.String], failedItems: [Swift.String], internalId: Swift.String, fullName: Swift.String, isRequester: Swift.Bool)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageThreadBulkAssignmentResponseBody
    public static func == (lhs: MessagesClient5.MessageThreadBulkAssignmentResponseBody.Builder, rhs: MessagesClient5.MessageThreadBulkAssignmentResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadBulkAssignmentResponseBody, rhs: MessagesClient5.MessageThreadBulkAssignmentResponseBody) -> Swift.Bool
}
public struct MessageThreadBulkResolutionRequestBody : Swift.Codable, Swift.Equatable {
  public var messageThreads: [Swift.String]
  public var resolved: Swift.Bool
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadBulkResolutionRequestBody.Builder class.")
  public init(messageThreads: [Swift.String], resolved: Swift.Bool, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let messageThreads: [Swift.String]
    final public let resolved: Swift.Bool
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(messageThreads: [Swift.String], resolved: Swift.Bool)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageThreadBulkResolutionRequestBody
    public static func == (lhs: MessagesClient5.MessageThreadBulkResolutionRequestBody.Builder, rhs: MessagesClient5.MessageThreadBulkResolutionRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadBulkResolutionRequestBody, rhs: MessagesClient5.MessageThreadBulkResolutionRequestBody) -> Swift.Bool
}
public struct MessageThreadBulkResolutionResponseBody : Swift.Codable, Swift.Equatable {
  public var resolutionStatus: MessagesClient5.WorkflowStatus?
  public var successfulItems: [Swift.String]?
  public var failedItems: [Swift.String]?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadBulkResolutionResponseBody.Builder class.")
  public init(resolutionStatus: MessagesClient5.WorkflowStatus? = nil, successfulItems: [Swift.String]? = nil, failedItems: [Swift.String]? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var resolutionStatus: MessagesClient5.WorkflowStatus? {
      get
    }
    final public var successfulItems: [Swift.String]? {
      get
    }
    final public var failedItems: [Swift.String]? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init()
    final public func set(resolutionStatus: MessagesClient5.WorkflowStatus?) -> Self
    final public func set(successfulItems: [Swift.String]?) -> Self
    final public func set(failedItems: [Swift.String]?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageThreadBulkResolutionResponseBody
    public static func == (lhs: MessagesClient5.MessageThreadBulkResolutionResponseBody.Builder, rhs: MessagesClient5.MessageThreadBulkResolutionResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadBulkResolutionResponseBody, rhs: MessagesClient5.MessageThreadBulkResolutionResponseBody) -> Swift.Bool
}
public struct MessageThreadGetResponseBody : Swift.Codable, Swift.Equatable {
  public var messages: [MessagesClient5.MessageGetResponseBody]
  public var draft: MessagesClient5.ConversationDraft?
  public var topic: MessagesClient5.Topic
  public var subject: Swift.String?
  public var rootMessageId: Swift.String
  public var read: Swift.Bool
  public var important: Swift.Bool
  public var readOnly: Swift.Bool
  public var deletable: Swift.Bool
  public var attachments: [MessagesClient5.Metadata]?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadGetResponseBody.Builder class.")
  public init(messages: [MessagesClient5.MessageGetResponseBody], draft: MessagesClient5.ConversationDraft? = nil, topic: MessagesClient5.Topic, subject: Swift.String? = nil, rootMessageId: Swift.String, read: Swift.Bool, important: Swift.Bool, readOnly: Swift.Bool, deletable: Swift.Bool, attachments: [MessagesClient5.Metadata]? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let messages: [MessagesClient5.MessageGetResponseBody]
    final public var draft: MessagesClient5.ConversationDraft? {
      get
    }
    final public let topic: MessagesClient5.Topic
    final public var subject: Swift.String? {
      get
    }
    final public let rootMessageId: Swift.String
    final public let read: Swift.Bool
    final public let important: Swift.Bool
    final public let readOnly: Swift.Bool
    final public let deletable: Swift.Bool
    final public var attachments: [MessagesClient5.Metadata]? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(messages: [MessagesClient5.MessageGetResponseBody], topic: MessagesClient5.Topic, rootMessageId: Swift.String, read: Swift.Bool, important: Swift.Bool = false, readOnly: Swift.Bool = false, deletable: Swift.Bool = true)
    final public func set(draft: MessagesClient5.ConversationDraft?) -> Self
    final public func set(subject: Swift.String?) -> Self
    final public func set(attachments: [MessagesClient5.Metadata]?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageThreadGetResponseBody
    public static func == (lhs: MessagesClient5.MessageThreadGetResponseBody.Builder, rhs: MessagesClient5.MessageThreadGetResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadGetResponseBody, rhs: MessagesClient5.MessageThreadGetResponseBody) -> Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case messages
    case draft
    case topic
    case subject
    case rootMessageId
    case read
    case important
    case readOnly
    case deletable
    case attachments
    case additions
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
    public typealias AllCases = [MessagesClient5.MessageThreadGetResponseBody.CodingKeys]
    public static var allCases: [MessagesClient5.MessageThreadGetResponseBody.CodingKeys] {
      get
    }
  }
}
public struct MessageThreadGetResponseBodyParent : Swift.Codable, Swift.Equatable {
  public var topic: MessagesClient5.Topic
  public var subject: Swift.String?
  public var rootMessageId: Swift.String
  public var read: Swift.Bool
  public var important: Swift.Bool
  public var readOnly: Swift.Bool
  public var deletable: Swift.Bool
  public var attachments: [MessagesClient5.Metadata]?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadGetResponseBodyParent.Builder class.")
  public init(topic: MessagesClient5.Topic, subject: Swift.String? = nil, rootMessageId: Swift.String, read: Swift.Bool, important: Swift.Bool, readOnly: Swift.Bool, deletable: Swift.Bool, attachments: [MessagesClient5.Metadata]? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let topic: MessagesClient5.Topic
    final public var subject: Swift.String? {
      get
    }
    final public let rootMessageId: Swift.String
    final public let read: Swift.Bool
    final public let important: Swift.Bool
    final public let readOnly: Swift.Bool
    final public let deletable: Swift.Bool
    final public var attachments: [MessagesClient5.Metadata]? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(topic: MessagesClient5.Topic, rootMessageId: Swift.String, read: Swift.Bool, important: Swift.Bool = false, readOnly: Swift.Bool = false, deletable: Swift.Bool = true)
    final public func set(subject: Swift.String?) -> Self
    final public func set(attachments: [MessagesClient5.Metadata]?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageThreadGetResponseBodyParent
    public static func == (lhs: MessagesClient5.MessageThreadGetResponseBodyParent.Builder, rhs: MessagesClient5.MessageThreadGetResponseBodyParent.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadGetResponseBodyParent, rhs: MessagesClient5.MessageThreadGetResponseBodyParent) -> Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case topic
    case subject
    case rootMessageId
    case read
    case important
    case readOnly
    case deletable
    case attachments
    case additions
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
    public typealias AllCases = [MessagesClient5.MessageThreadGetResponseBodyParent.CodingKeys]
    public static var allCases: [MessagesClient5.MessageThreadGetResponseBodyParent.CodingKeys] {
      get
    }
  }
}
public struct MessageThreadResolutionRequestBody : Swift.Codable, Swift.Equatable {
  public var resolved: Swift.Bool
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadResolutionRequestBody.Builder class.")
  public init(resolved: Swift.Bool, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let resolved: Swift.Bool
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(resolved: Swift.Bool)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageThreadResolutionRequestBody
    public static func == (lhs: MessagesClient5.MessageThreadResolutionRequestBody.Builder, rhs: MessagesClient5.MessageThreadResolutionRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadResolutionRequestBody, rhs: MessagesClient5.MessageThreadResolutionRequestBody) -> Swift.Bool
}
public struct MessageThreadResolutionResponseBody : Swift.Codable, Swift.Equatable {
  public var resolutionStatus: MessagesClient5.WorkflowStatus?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadResolutionResponseBody.Builder class.")
  public init(resolutionStatus: MessagesClient5.WorkflowStatus? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var resolutionStatus: MessagesClient5.WorkflowStatus? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init()
    final public func set(resolutionStatus: MessagesClient5.WorkflowStatus?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.MessageThreadResolutionResponseBody
    public static func == (lhs: MessagesClient5.MessageThreadResolutionResponseBody.Builder, rhs: MessagesClient5.MessageThreadResolutionResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadResolutionResponseBody, rhs: MessagesClient5.MessageThreadResolutionResponseBody) -> Swift.Bool
}
public struct MessageThreadsReport : Swift.Codable, Swift.Equatable {
  public var clientUserFullName: Swift.String?
  public var clientUserId: Swift.String?
  public var rootMessageSentDate: Foundation.Date?
  public var lastMessageSentDate: Foundation.Date?
  public var status: MessagesClient5.WorkflowStatus?
  public var topic: MessagesClient5.Topic?
  public var subject: Swift.String?
  public var bankAssigneeId: Swift.String?
  public var bankAssigneeFullName: Swift.String?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of MessageThreadsReport.Builder class.")
  public init(clientUserFullName: Swift.String? = nil, clientUserId: Swift.String? = nil, rootMessageSentDate: Foundation.Date? = nil, lastMessageSentDate: Foundation.Date? = nil, status: MessagesClient5.WorkflowStatus? = nil, topic: MessagesClient5.Topic? = nil, subject: Swift.String? = nil, bankAssigneeId: Swift.String? = nil, bankAssigneeFullName: Swift.String? = nil)
  final public class Builder : Swift.Equatable {
    final public var clientUserFullName: Swift.String? {
      get
    }
    final public var clientUserId: Swift.String? {
      get
    }
    final public var rootMessageSentDate: Foundation.Date? {
      get
    }
    final public var lastMessageSentDate: Foundation.Date? {
      get
    }
    final public var status: MessagesClient5.WorkflowStatus? {
      get
    }
    final public var topic: MessagesClient5.Topic? {
      get
    }
    final public var subject: Swift.String? {
      get
    }
    final public var bankAssigneeId: Swift.String? {
      get
    }
    final public var bankAssigneeFullName: Swift.String? {
      get
    }
    public init()
    final public func set(clientUserFullName: Swift.String?) -> Self
    final public func set(clientUserId: Swift.String?) -> Self
    final public func set(rootMessageSentDate: Foundation.Date?) -> Self
    final public func set(lastMessageSentDate: Foundation.Date?) -> Self
    final public func set(status: MessagesClient5.WorkflowStatus?) -> Self
    final public func set(topic: MessagesClient5.Topic?) -> Self
    final public func set(subject: Swift.String?) -> Self
    final public func set(bankAssigneeId: Swift.String?) -> Self
    final public func set(bankAssigneeFullName: Swift.String?) -> Self
    final public func build() -> MessagesClient5.MessageThreadsReport
    public static func == (lhs: MessagesClient5.MessageThreadsReport.Builder, rhs: MessagesClient5.MessageThreadsReport.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.MessageThreadsReport, rhs: MessagesClient5.MessageThreadsReport) -> Swift.Bool
}
public protocol MessagecenterAPIProtocol {
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteConversationThreadsRequestParams class.")
  func deleteConversationThreadsCall(ids: [Swift.String], xBBSVCRequestId: Swift.String?) throws -> ClientCommon.Call<MessagesClient5.ConversationThreadsDeleteResponseBody>
  func deleteConversationThreadsCall(params: MessagesClient5.DeleteConversationThreadsRequestParams) throws -> ClientCommon.Call<MessagesClient5.ConversationThreadsDeleteResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteMessageAttachmentsRequestParams class.")
  func deleteMessageAttachmentsCall(ids: [Swift.String]) throws -> ClientCommon.Call<MessagesClient5.DeleteResponseBody>
  func deleteMessageAttachmentsCall(params: MessagesClient5.DeleteMessageAttachmentsRequestParams) throws -> ClientCommon.Call<MessagesClient5.DeleteResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteMessageDraftsRequestParams class.")
  func deleteMessageDraftsCall(ids: [Swift.String]) throws -> ClientCommon.Call<MessagesClient5.DeleteDraftsResponseBody>
  func deleteMessageDraftsCall(params: MessagesClient5.DeleteMessageDraftsRequestParams) throws -> ClientCommon.Call<MessagesClient5.DeleteDraftsResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetConversationThreadsRequestParams class.")
  func getConversationThreadsCall(mailboxType: Swift.String?, from: Swift.Int?, size: Swift.Int?, orderBy: Swift.String?, direction: MessagesClient5.MessagecenterAPI.Direction_getConversationThreads?) throws -> ClientCommon.Call<[MessagesClient5.ConversationThread]>
  func getConversationThreadsCall(params: MessagesClient5.GetConversationThreadsRequestParams) throws -> ClientCommon.Call<[MessagesClient5.ConversationThread]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMessageAttachmentRequestParams class.")
  func getMessageAttachmentCall(attachmentId: Swift.String) throws -> ClientCommon.Call<Foundation.Data>
  func getMessageAttachmentCall(params: MessagesClient5.GetMessageAttachmentRequestParams) throws -> ClientCommon.Call<Foundation.Data>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMessageDraftRequestParams class.")
  func getMessageDraftCall(draftId: Swift.String) throws -> ClientCommon.Call<MessagesClient5.MessageDraftGetResponseBody>
  func getMessageDraftCall(params: MessagesClient5.GetMessageDraftRequestParams) throws -> ClientCommon.Call<MessagesClient5.MessageDraftGetResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMessageDraftsRequestParams class.")
  func getMessageDraftsCall(from: Swift.Int?, size: Swift.Int?) throws -> ClientCommon.Call<[MessagesClient5.MessageDraftsGetResponseBody]>
  func getMessageDraftsCall(params: MessagesClient5.GetMessageDraftsRequestParams) throws -> ClientCommon.Call<[MessagesClient5.MessageDraftsGetResponseBody]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMessageThreadRequestParams class.")
  func getMessageThreadCall(messageId: Swift.String) throws -> ClientCommon.Call<MessagesClient5.MessageThreadGetResponseBody>
  func getMessageThreadCall(params: MessagesClient5.GetMessageThreadRequestParams) throws -> ClientCommon.Call<MessagesClient5.MessageThreadGetResponseBody>
  func getTopicsCall() throws -> ClientCommon.Call<[MessagesClient5.TopicsGetResponseBody]>
  func getUnreadConversationsCountCall() throws -> ClientCommon.Call<MessagesClient5.UnreadConversationsGetResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostConversationMessageDraftRequestParams class.")
  func postConversationMessageDraftCall(messageId: Swift.String, conversationMessageDraftPostRequestBody: MessagesClient5.ConversationMessageDraftPostRequestBody?) throws -> ClientCommon.Call<MessagesClient5.DraftPostResponseBody>
  func postConversationMessageDraftCall(params: MessagesClient5.PostConversationMessageDraftRequestParams) throws -> ClientCommon.Call<MessagesClient5.DraftPostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessageAttachmentsRequestParams class.")
  func postMessageAttachmentsCall(messageId: Swift.String?, attachment: Foundation.URL?) throws -> ClientCommon.Call<MessagesClient5.Metadata>
  func postMessageAttachmentsCall(params: MessagesClient5.PostMessageAttachmentsRequestParams) throws -> ClientCommon.Call<MessagesClient5.Metadata>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessageDraftsRequestParams class.")
  func postMessageDraftsCall(messageDraftsPostRequestBody: MessagesClient5.MessageDraftsPostRequestBody?) throws -> ClientCommon.Call<MessagesClient5.DraftPostResponseBody>
  func postMessageDraftsCall(params: MessagesClient5.PostMessageDraftsRequestParams) throws -> ClientCommon.Call<MessagesClient5.DraftPostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessageReplyRequestParams class.")
  func postMessageReplyCall(messageId: Swift.String, messageReplyPostRequestBody: MessagesClient5.MessageReplyPostRequestBody?) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  func postMessageReplyCall(params: MessagesClient5.PostMessageReplyRequestParams) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessagesRequestParams class.")
  func postMessagesCall(presentationMessagePostRequestBody: MessagesClient5.PresentationMessagePostRequestBody?) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  func postMessagesCall(params: MessagesClient5.PostMessagesRequestParams) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutConversationMessageDraftRequestParams class.")
  func putConversationMessageDraftCall(messageId: Swift.String, conversationMessageDraftPutRequestBody: MessagesClient5.ConversationMessageDraftPutRequestBody?) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  func putConversationMessageDraftCall(params: MessagesClient5.PutConversationMessageDraftRequestParams) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutMarkAsReadUnreadRequestParams class.")
  func putMarkAsReadUnreadCall(markAsReadUnreadPutRequestBody: MessagesClient5.MarkAsReadUnreadPutRequestBody?) throws -> ClientCommon.Call<MessagesClient5.MarkAsReadUnreadPutResponseBody>
  func putMarkAsReadUnreadCall(params: MessagesClient5.PutMarkAsReadUnreadRequestParams) throws -> ClientCommon.Call<MessagesClient5.MarkAsReadUnreadPutResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutMessageDraftRequestParams class.")
  func putMessageDraftCall(draftId: Swift.String, messageDraftPutRequestBody: MessagesClient5.MessageDraftPutRequestBody?) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  func putMessageDraftCall(params: MessagesClient5.PutMessageDraftRequestParams) throws -> ClientCommon.Call<ClientCommon.NoResponse>
}
@objc @_inheritsConvenienceInitializers public class MessagecenterAPI : ObjectiveC.NSObject, DBSClient, MessagesClient5.MessagecenterAPIProtocol {
  @objc public var dataProvider: DBSDataProvider?
  @objc public var baseURL: Foundation.URL
  @objc override dynamic public init()
  required public init(dataProvider: DBSDataProvider, baseURL: Foundation.URL)
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteConversationThreadsRequestParams class.")
  open func deleteConversationThreadsCall(ids: [Swift.String], xBBSVCRequestId: Swift.String? = nil) throws -> ClientCommon.Call<MessagesClient5.ConversationThreadsDeleteResponseBody>
  open func deleteConversationThreadsCall(params: MessagesClient5.DeleteConversationThreadsRequestParams) throws -> ClientCommon.Call<MessagesClient5.ConversationThreadsDeleteResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteMessageAttachmentsRequestParams class.")
  open func deleteMessageAttachmentsCall(ids: [Swift.String]) throws -> ClientCommon.Call<MessagesClient5.DeleteResponseBody>
  open func deleteMessageAttachmentsCall(params: MessagesClient5.DeleteMessageAttachmentsRequestParams) throws -> ClientCommon.Call<MessagesClient5.DeleteResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with DeleteMessageDraftsRequestParams class.")
  open func deleteMessageDraftsCall(ids: [Swift.String]) throws -> ClientCommon.Call<MessagesClient5.DeleteDraftsResponseBody>
  open func deleteMessageDraftsCall(params: MessagesClient5.DeleteMessageDraftsRequestParams) throws -> ClientCommon.Call<MessagesClient5.DeleteDraftsResponseBody>
  @available(*, deprecated, message: "This enum is deprecated in favor of the alternative enum inside the GetConversationThreadsRequestParams class.")
  public enum Direction_getConversationThreads : Swift.String, Swift.CaseIterable {
    case asc
    case desc
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [MessagesClient5.MessagecenterAPI.Direction_getConversationThreads]
    public static var allCases: [MessagesClient5.MessagecenterAPI.Direction_getConversationThreads] {
      get
    }
  }
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetConversationThreadsRequestParams class.")
  open func getConversationThreadsCall(mailboxType: Swift.String? = nil, from: Swift.Int? = nil, size: Swift.Int? = nil, orderBy: Swift.String? = nil, direction: MessagesClient5.MessagecenterAPI.Direction_getConversationThreads? = nil) throws -> ClientCommon.Call<[MessagesClient5.ConversationThread]>
  open func getConversationThreadsCall(params: MessagesClient5.GetConversationThreadsRequestParams) throws -> ClientCommon.Call<[MessagesClient5.ConversationThread]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMessageAttachmentRequestParams class.")
  open func getMessageAttachmentCall(attachmentId: Swift.String) throws -> ClientCommon.Call<Foundation.Data>
  open func getMessageAttachmentCall(params: MessagesClient5.GetMessageAttachmentRequestParams) throws -> ClientCommon.Call<Foundation.Data>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMessageDraftRequestParams class.")
  open func getMessageDraftCall(draftId: Swift.String) throws -> ClientCommon.Call<MessagesClient5.MessageDraftGetResponseBody>
  open func getMessageDraftCall(params: MessagesClient5.GetMessageDraftRequestParams) throws -> ClientCommon.Call<MessagesClient5.MessageDraftGetResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMessageDraftsRequestParams class.")
  open func getMessageDraftsCall(from: Swift.Int? = nil, size: Swift.Int? = nil) throws -> ClientCommon.Call<[MessagesClient5.MessageDraftsGetResponseBody]>
  open func getMessageDraftsCall(params: MessagesClient5.GetMessageDraftsRequestParams) throws -> ClientCommon.Call<[MessagesClient5.MessageDraftsGetResponseBody]>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetMessageThreadRequestParams class.")
  open func getMessageThreadCall(messageId: Swift.String) throws -> ClientCommon.Call<MessagesClient5.MessageThreadGetResponseBody>
  open func getMessageThreadCall(params: MessagesClient5.GetMessageThreadRequestParams) throws -> ClientCommon.Call<MessagesClient5.MessageThreadGetResponseBody>
  open func getTopicsCall() throws -> ClientCommon.Call<[MessagesClient5.TopicsGetResponseBody]>
  open func getUnreadConversationsCountCall() throws -> ClientCommon.Call<MessagesClient5.UnreadConversationsGetResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostConversationMessageDraftRequestParams class.")
  open func postConversationMessageDraftCall(messageId: Swift.String, conversationMessageDraftPostRequestBody: MessagesClient5.ConversationMessageDraftPostRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.DraftPostResponseBody>
  open func postConversationMessageDraftCall(params: MessagesClient5.PostConversationMessageDraftRequestParams) throws -> ClientCommon.Call<MessagesClient5.DraftPostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessageAttachmentsRequestParams class.")
  open func postMessageAttachmentsCall(messageId: Swift.String? = nil, attachment: Foundation.URL? = nil) throws -> ClientCommon.Call<MessagesClient5.Metadata>
  open func postMessageAttachmentsCall(params: MessagesClient5.PostMessageAttachmentsRequestParams) throws -> ClientCommon.Call<MessagesClient5.Metadata>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessageDraftsRequestParams class.")
  open func postMessageDraftsCall(messageDraftsPostRequestBody: MessagesClient5.MessageDraftsPostRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.DraftPostResponseBody>
  open func postMessageDraftsCall(params: MessagesClient5.PostMessageDraftsRequestParams) throws -> ClientCommon.Call<MessagesClient5.DraftPostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessageReplyRequestParams class.")
  open func postMessageReplyCall(messageId: Swift.String, messageReplyPostRequestBody: MessagesClient5.MessageReplyPostRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  open func postMessageReplyCall(params: MessagesClient5.PostMessageReplyRequestParams) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PostMessagesRequestParams class.")
  open func postMessagesCall(presentationMessagePostRequestBody: MessagesClient5.PresentationMessagePostRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  open func postMessagesCall(params: MessagesClient5.PostMessagesRequestParams) throws -> ClientCommon.Call<MessagesClient5.PresentationMessagePostResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutConversationMessageDraftRequestParams class.")
  open func putConversationMessageDraftCall(messageId: Swift.String, conversationMessageDraftPutRequestBody: MessagesClient5.ConversationMessageDraftPutRequestBody? = nil) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  open func putConversationMessageDraftCall(params: MessagesClient5.PutConversationMessageDraftRequestParams) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutMarkAsReadUnreadRequestParams class.")
  open func putMarkAsReadUnreadCall(markAsReadUnreadPutRequestBody: MessagesClient5.MarkAsReadUnreadPutRequestBody? = nil) throws -> ClientCommon.Call<MessagesClient5.MarkAsReadUnreadPutResponseBody>
  open func putMarkAsReadUnreadCall(params: MessagesClient5.PutMarkAsReadUnreadRequestParams) throws -> ClientCommon.Call<MessagesClient5.MarkAsReadUnreadPutResponseBody>
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with PutMessageDraftRequestParams class.")
  open func putMessageDraftCall(draftId: Swift.String, messageDraftPutRequestBody: MessagesClient5.MessageDraftPutRequestBody? = nil) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  open func putMessageDraftCall(params: MessagesClient5.PutMessageDraftRequestParams) throws -> ClientCommon.Call<ClientCommon.NoResponse>
  @objc deinit
}
public struct DeleteConversationThreadsRequestParams : Swift.Equatable {
  public let ids: [Swift.String]
  public let xBBSVCRequestId: Swift.String?
  final public class Builder : Swift.Equatable {
    final public let ids: [Swift.String]
    final public var xBBSVCRequestId: Swift.String? {
      get
    }
    public init(ids: [Swift.String])
    final public func set(xBBSVCRequestId: Swift.String?) -> Self
    final public func build() -> MessagesClient5.DeleteConversationThreadsRequestParams
    public static func == (lhs: MessagesClient5.DeleteConversationThreadsRequestParams.Builder, rhs: MessagesClient5.DeleteConversationThreadsRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.DeleteConversationThreadsRequestParams, rhs: MessagesClient5.DeleteConversationThreadsRequestParams) -> Swift.Bool
}
public struct DeleteMessageAttachmentsRequestParams : Swift.Equatable {
  public let ids: [Swift.String]
  final public class Builder : Swift.Equatable {
    final public let ids: [Swift.String]
    public init(ids: [Swift.String])
    final public func build() -> MessagesClient5.DeleteMessageAttachmentsRequestParams
    public static func == (lhs: MessagesClient5.DeleteMessageAttachmentsRequestParams.Builder, rhs: MessagesClient5.DeleteMessageAttachmentsRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.DeleteMessageAttachmentsRequestParams, rhs: MessagesClient5.DeleteMessageAttachmentsRequestParams) -> Swift.Bool
}
public struct DeleteMessageDraftsRequestParams : Swift.Equatable {
  public let ids: [Swift.String]
  final public class Builder : Swift.Equatable {
    final public let ids: [Swift.String]
    public init(ids: [Swift.String])
    final public func build() -> MessagesClient5.DeleteMessageDraftsRequestParams
    public static func == (lhs: MessagesClient5.DeleteMessageDraftsRequestParams.Builder, rhs: MessagesClient5.DeleteMessageDraftsRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.DeleteMessageDraftsRequestParams, rhs: MessagesClient5.DeleteMessageDraftsRequestParams) -> Swift.Bool
}
public struct GetConversationThreadsRequestParams : Swift.Equatable {
  public enum Direction : Swift.String, Swift.Codable, Swift.CaseIterable {
    case asc
    case desc
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [MessagesClient5.GetConversationThreadsRequestParams.Direction]
    public static var allCases: [MessagesClient5.GetConversationThreadsRequestParams.Direction] {
      get
    }
  }
  public let mailboxType: Swift.String?
  public let from: Swift.Int?
  public let size: Swift.Int?
  public let orderBy: Swift.String?
  public let direction: MessagesClient5.GetConversationThreadsRequestParams.Direction?
  final public class Builder : Swift.Equatable {
    final public var mailboxType: Swift.String? {
      get
    }
    final public var from: Swift.Int? {
      get
    }
    final public var size: Swift.Int? {
      get
    }
    final public var orderBy: Swift.String? {
      get
    }
    final public var direction: MessagesClient5.GetConversationThreadsRequestParams.Direction? {
      get
    }
    public init()
    final public func set(mailboxType: Swift.String?) -> Self
    final public func set(from: Swift.Int?) -> Self
    final public func set(size: Swift.Int?) -> Self
    final public func set(orderBy: Swift.String?) -> Self
    final public func set(direction: MessagesClient5.GetConversationThreadsRequestParams.Direction?) -> Self
    final public func build() -> MessagesClient5.GetConversationThreadsRequestParams
    public static func == (lhs: MessagesClient5.GetConversationThreadsRequestParams.Builder, rhs: MessagesClient5.GetConversationThreadsRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetConversationThreadsRequestParams, rhs: MessagesClient5.GetConversationThreadsRequestParams) -> Swift.Bool
}
public struct GetMessageAttachmentRequestParams : Swift.Equatable {
  public let attachmentId: Swift.String
  final public class Builder : Swift.Equatable {
    final public let attachmentId: Swift.String
    public init(attachmentId: Swift.String)
    final public func build() -> MessagesClient5.GetMessageAttachmentRequestParams
    public static func == (lhs: MessagesClient5.GetMessageAttachmentRequestParams.Builder, rhs: MessagesClient5.GetMessageAttachmentRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetMessageAttachmentRequestParams, rhs: MessagesClient5.GetMessageAttachmentRequestParams) -> Swift.Bool
}
public struct GetMessageDraftRequestParams : Swift.Equatable {
  public let draftId: Swift.String
  final public class Builder : Swift.Equatable {
    final public let draftId: Swift.String
    public init(draftId: Swift.String)
    final public func build() -> MessagesClient5.GetMessageDraftRequestParams
    public static func == (lhs: MessagesClient5.GetMessageDraftRequestParams.Builder, rhs: MessagesClient5.GetMessageDraftRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetMessageDraftRequestParams, rhs: MessagesClient5.GetMessageDraftRequestParams) -> Swift.Bool
}
public struct GetMessageDraftsRequestParams : Swift.Equatable {
  public let from: Swift.Int?
  public let size: Swift.Int?
  final public class Builder : Swift.Equatable {
    final public var from: Swift.Int? {
      get
    }
    final public var size: Swift.Int? {
      get
    }
    public init()
    final public func set(from: Swift.Int?) -> Self
    final public func set(size: Swift.Int?) -> Self
    final public func build() -> MessagesClient5.GetMessageDraftsRequestParams
    public static func == (lhs: MessagesClient5.GetMessageDraftsRequestParams.Builder, rhs: MessagesClient5.GetMessageDraftsRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetMessageDraftsRequestParams, rhs: MessagesClient5.GetMessageDraftsRequestParams) -> Swift.Bool
}
public struct GetMessageThreadRequestParams : Swift.Equatable {
  public let messageId: Swift.String
  final public class Builder : Swift.Equatable {
    final public let messageId: Swift.String
    public init(messageId: Swift.String)
    final public func build() -> MessagesClient5.GetMessageThreadRequestParams
    public static func == (lhs: MessagesClient5.GetMessageThreadRequestParams.Builder, rhs: MessagesClient5.GetMessageThreadRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.GetMessageThreadRequestParams, rhs: MessagesClient5.GetMessageThreadRequestParams) -> Swift.Bool
}
public struct PostConversationMessageDraftRequestParams : Swift.Equatable {
  public let messageId: Swift.String
  public let conversationMessageDraftPostRequestBody: MessagesClient5.ConversationMessageDraftPostRequestBody?
  final public class Builder : Swift.Equatable {
    final public let messageId: Swift.String
    final public var conversationMessageDraftPostRequestBody: MessagesClient5.ConversationMessageDraftPostRequestBody? {
      get
    }
    public init(messageId: Swift.String)
    final public func set(conversationMessageDraftPostRequestBody: MessagesClient5.ConversationMessageDraftPostRequestBody?) -> Self
    final public func build() -> MessagesClient5.PostConversationMessageDraftRequestParams
    public static func == (lhs: MessagesClient5.PostConversationMessageDraftRequestParams.Builder, rhs: MessagesClient5.PostConversationMessageDraftRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostConversationMessageDraftRequestParams, rhs: MessagesClient5.PostConversationMessageDraftRequestParams) -> Swift.Bool
}
public struct PostMessageAttachmentsRequestParams : Swift.Equatable {
  public let messageId: Swift.String?
  public let attachment: Foundation.URL?
  final public class Builder : Swift.Equatable {
    final public var messageId: Swift.String? {
      get
    }
    final public var attachment: Foundation.URL? {
      get
    }
    public init()
    final public func set(messageId: Swift.String?) -> Self
    final public func set(attachment: Foundation.URL?) -> Self
    final public func build() -> MessagesClient5.PostMessageAttachmentsRequestParams
    public static func == (lhs: MessagesClient5.PostMessageAttachmentsRequestParams.Builder, rhs: MessagesClient5.PostMessageAttachmentsRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostMessageAttachmentsRequestParams, rhs: MessagesClient5.PostMessageAttachmentsRequestParams) -> Swift.Bool
}
public struct PostMessageDraftsRequestParams : Swift.Equatable {
  public let messageDraftsPostRequestBody: MessagesClient5.MessageDraftsPostRequestBody?
  final public class Builder : Swift.Equatable {
    final public var messageDraftsPostRequestBody: MessagesClient5.MessageDraftsPostRequestBody? {
      get
    }
    public init()
    final public func set(messageDraftsPostRequestBody: MessagesClient5.MessageDraftsPostRequestBody?) -> Self
    final public func build() -> MessagesClient5.PostMessageDraftsRequestParams
    public static func == (lhs: MessagesClient5.PostMessageDraftsRequestParams.Builder, rhs: MessagesClient5.PostMessageDraftsRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostMessageDraftsRequestParams, rhs: MessagesClient5.PostMessageDraftsRequestParams) -> Swift.Bool
}
public struct PostMessageReplyRequestParams : Swift.Equatable {
  public let messageId: Swift.String
  public let messageReplyPostRequestBody: MessagesClient5.MessageReplyPostRequestBody?
  final public class Builder : Swift.Equatable {
    final public let messageId: Swift.String
    final public var messageReplyPostRequestBody: MessagesClient5.MessageReplyPostRequestBody? {
      get
    }
    public init(messageId: Swift.String)
    final public func set(messageReplyPostRequestBody: MessagesClient5.MessageReplyPostRequestBody?) -> Self
    final public func build() -> MessagesClient5.PostMessageReplyRequestParams
    public static func == (lhs: MessagesClient5.PostMessageReplyRequestParams.Builder, rhs: MessagesClient5.PostMessageReplyRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostMessageReplyRequestParams, rhs: MessagesClient5.PostMessageReplyRequestParams) -> Swift.Bool
}
public struct PostMessagesRequestParams : Swift.Equatable {
  public let presentationMessagePostRequestBody: MessagesClient5.PresentationMessagePostRequestBody?
  final public class Builder : Swift.Equatable {
    final public var presentationMessagePostRequestBody: MessagesClient5.PresentationMessagePostRequestBody? {
      get
    }
    public init()
    final public func set(presentationMessagePostRequestBody: MessagesClient5.PresentationMessagePostRequestBody?) -> Self
    final public func build() -> MessagesClient5.PostMessagesRequestParams
    public static func == (lhs: MessagesClient5.PostMessagesRequestParams.Builder, rhs: MessagesClient5.PostMessagesRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PostMessagesRequestParams, rhs: MessagesClient5.PostMessagesRequestParams) -> Swift.Bool
}
public struct PutConversationMessageDraftRequestParams : Swift.Equatable {
  public let messageId: Swift.String
  public let conversationMessageDraftPutRequestBody: MessagesClient5.ConversationMessageDraftPutRequestBody?
  final public class Builder : Swift.Equatable {
    final public let messageId: Swift.String
    final public var conversationMessageDraftPutRequestBody: MessagesClient5.ConversationMessageDraftPutRequestBody? {
      get
    }
    public init(messageId: Swift.String)
    final public func set(conversationMessageDraftPutRequestBody: MessagesClient5.ConversationMessageDraftPutRequestBody?) -> Self
    final public func build() -> MessagesClient5.PutConversationMessageDraftRequestParams
    public static func == (lhs: MessagesClient5.PutConversationMessageDraftRequestParams.Builder, rhs: MessagesClient5.PutConversationMessageDraftRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PutConversationMessageDraftRequestParams, rhs: MessagesClient5.PutConversationMessageDraftRequestParams) -> Swift.Bool
}
public struct PutMarkAsReadUnreadRequestParams : Swift.Equatable {
  public let markAsReadUnreadPutRequestBody: MessagesClient5.MarkAsReadUnreadPutRequestBody?
  final public class Builder : Swift.Equatable {
    final public var markAsReadUnreadPutRequestBody: MessagesClient5.MarkAsReadUnreadPutRequestBody? {
      get
    }
    public init()
    final public func set(markAsReadUnreadPutRequestBody: MessagesClient5.MarkAsReadUnreadPutRequestBody?) -> Self
    final public func build() -> MessagesClient5.PutMarkAsReadUnreadRequestParams
    public static func == (lhs: MessagesClient5.PutMarkAsReadUnreadRequestParams.Builder, rhs: MessagesClient5.PutMarkAsReadUnreadRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PutMarkAsReadUnreadRequestParams, rhs: MessagesClient5.PutMarkAsReadUnreadRequestParams) -> Swift.Bool
}
public struct PutMessageDraftRequestParams : Swift.Equatable {
  public let draftId: Swift.String
  public let messageDraftPutRequestBody: MessagesClient5.MessageDraftPutRequestBody?
  final public class Builder : Swift.Equatable {
    final public let draftId: Swift.String
    final public var messageDraftPutRequestBody: MessagesClient5.MessageDraftPutRequestBody? {
      get
    }
    public init(draftId: Swift.String)
    final public func set(messageDraftPutRequestBody: MessagesClient5.MessageDraftPutRequestBody?) -> Self
    final public func build() -> MessagesClient5.PutMessageDraftRequestParams
    public static func == (lhs: MessagesClient5.PutMessageDraftRequestParams.Builder, rhs: MessagesClient5.PutMessageDraftRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: MessagesClient5.PutMessageDraftRequestParams, rhs: MessagesClient5.PutMessageDraftRequestParams) -> Swift.Bool
}
public struct Metadata : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var filename: Swift.String
  public var size: Swift.Double
  public var createdAt: Foundation.Date
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of Metadata.Builder class.")
  public init(id: Swift.String, filename: Swift.String, size: Swift.Double, createdAt: Foundation.Date, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public let filename: Swift.String
    final public let size: Swift.Double
    final public let createdAt: Foundation.Date
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, filename: Swift.String, size: Swift.Double, createdAt: Foundation.Date)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.Metadata
    public static func == (lhs: MessagesClient5.Metadata.Builder, rhs: MessagesClient5.Metadata.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.Metadata, rhs: MessagesClient5.Metadata) -> Swift.Bool
}
public struct NotFoundError : Swift.Codable, Swift.Equatable {
  public var message: Swift.String?
  public var errors: [MessagesClient5.ErrorItem]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of NotFoundError.Builder class.")
  public init(message: Swift.String? = nil, errors: [MessagesClient5.ErrorItem]? = nil)
  final public class Builder : Swift.Equatable {
    final public var message: Swift.String? {
      get
    }
    final public var errors: [MessagesClient5.ErrorItem]? {
      get
    }
    public init()
    final public func set(message: Swift.String?) -> Self
    final public func set(errors: [MessagesClient5.ErrorItem]?) -> Self
    final public func build() -> MessagesClient5.NotFoundError
    public static func == (lhs: MessagesClient5.NotFoundError.Builder, rhs: MessagesClient5.NotFoundError.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.NotFoundError, rhs: MessagesClient5.NotFoundError) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OpenISO8601DateFormatter : Foundation.DateFormatter {
  @objc override dynamic public func date(from string: Swift.String) -> Foundation.Date?
  @objc deinit
}
public struct PresentationBaseMessagePostRequestBody : Swift.Codable, Swift.Equatable {
  public var subject: Swift.String
  public var body: Swift.String
  public var topic: Swift.String
  public var sender: MessagesClient5.MessageSender?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of PresentationBaseMessagePostRequestBody.Builder class.")
  public init(subject: Swift.String, body: Swift.String, topic: Swift.String, sender: MessagesClient5.MessageSender? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let subject: Swift.String
    final public let body: Swift.String
    final public let topic: Swift.String
    final public var sender: MessagesClient5.MessageSender? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(subject: Swift.String, body: Swift.String, topic: Swift.String)
    final public func set(sender: MessagesClient5.MessageSender?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.PresentationBaseMessagePostRequestBody
    public static func == (lhs: MessagesClient5.PresentationBaseMessagePostRequestBody.Builder, rhs: MessagesClient5.PresentationBaseMessagePostRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.PresentationBaseMessagePostRequestBody, rhs: MessagesClient5.PresentationBaseMessagePostRequestBody) -> Swift.Bool
}
public struct PresentationMessageEmployeePostRequestBody : Swift.Codable, Swift.Equatable {
  public var recipient: Swift.String
  public var important: Swift.Bool?
  public var readOnly: Swift.Bool?
  public var deletable: Swift.Bool?
  public var attachments: [Swift.String]?
  public var subject: Swift.String
  public var body: Swift.String
  public var topic: Swift.String
  public var sender: MessagesClient5.MessageSender?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of PresentationMessageEmployeePostRequestBody.Builder class.")
  public init(recipient: Swift.String, important: Swift.Bool? = nil, readOnly: Swift.Bool? = nil, deletable: Swift.Bool? = nil, attachments: [Swift.String]? = nil, subject: Swift.String, body: Swift.String, topic: Swift.String, sender: MessagesClient5.MessageSender? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let recipient: Swift.String
    final public var important: Swift.Bool? {
      get
    }
    final public var readOnly: Swift.Bool? {
      get
    }
    final public var deletable: Swift.Bool? {
      get
    }
    final public var attachments: [Swift.String]? {
      get
    }
    final public let subject: Swift.String
    final public let body: Swift.String
    final public let topic: Swift.String
    final public var sender: MessagesClient5.MessageSender? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(recipient: Swift.String, subject: Swift.String, body: Swift.String, topic: Swift.String)
    final public func set(important: Swift.Bool?) -> Self
    final public func set(readOnly: Swift.Bool?) -> Self
    final public func set(deletable: Swift.Bool?) -> Self
    final public func set(attachments: [Swift.String]?) -> Self
    final public func set(sender: MessagesClient5.MessageSender?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.PresentationMessageEmployeePostRequestBody
    public static func == (lhs: MessagesClient5.PresentationMessageEmployeePostRequestBody.Builder, rhs: MessagesClient5.PresentationMessageEmployeePostRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.PresentationMessageEmployeePostRequestBody, rhs: MessagesClient5.PresentationMessageEmployeePostRequestBody) -> Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case recipient
    case important
    case readOnly
    case deletable
    case attachments
    case subject
    case body
    case topic
    case sender
    case additions
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
    public typealias AllCases = [MessagesClient5.PresentationMessageEmployeePostRequestBody.CodingKeys]
    public static var allCases: [MessagesClient5.PresentationMessageEmployeePostRequestBody.CodingKeys] {
      get
    }
  }
}
public struct PresentationMessagePostRequestBody : Swift.Codable, Swift.Equatable {
  public var attachments: [Swift.String]?
  public var subject: Swift.String
  public var body: Swift.String
  public var topic: Swift.String
  public var sender: MessagesClient5.MessageSender?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of PresentationMessagePostRequestBody.Builder class.")
  public init(attachments: [Swift.String]? = nil, subject: Swift.String, body: Swift.String, topic: Swift.String, sender: MessagesClient5.MessageSender? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var attachments: [Swift.String]? {
      get
    }
    final public let subject: Swift.String
    final public let body: Swift.String
    final public let topic: Swift.String
    final public var sender: MessagesClient5.MessageSender? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(subject: Swift.String, body: Swift.String, topic: Swift.String)
    final public func set(attachments: [Swift.String]?) -> Self
    final public func set(sender: MessagesClient5.MessageSender?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.PresentationMessagePostRequestBody
    public static func == (lhs: MessagesClient5.PresentationMessagePostRequestBody.Builder, rhs: MessagesClient5.PresentationMessagePostRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.PresentationMessagePostRequestBody, rhs: MessagesClient5.PresentationMessagePostRequestBody) -> Swift.Bool
}
public struct PresentationMessagePostResponseBody : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of PresentationMessagePostResponseBody.Builder class.")
  public init(id: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.PresentationMessagePostResponseBody
    public static func == (lhs: MessagesClient5.PresentationMessagePostResponseBody.Builder, rhs: MessagesClient5.PresentationMessagePostResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.PresentationMessagePostResponseBody, rhs: MessagesClient5.PresentationMessagePostResponseBody) -> Swift.Bool
}
public struct RecipientsData : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of RecipientsData.Builder class.")
  public init(id: Swift.String)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    public init(id: Swift.String)
    final public func build() -> MessagesClient5.RecipientsData
    public static func == (lhs: MessagesClient5.RecipientsData.Builder, rhs: MessagesClient5.RecipientsData.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.RecipientsData, rhs: MessagesClient5.RecipientsData) -> Swift.Bool
}
public struct SubscribersPostRequestBody : Swift.Codable, Swift.Equatable {
  public var subscriberId: [Swift.String]
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of SubscribersPostRequestBody.Builder class.")
  public init(subscriberId: [Swift.String], additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let subscriberId: [Swift.String]
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(subscriberId: [Swift.String])
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.SubscribersPostRequestBody
    public static func == (lhs: MessagesClient5.SubscribersPostRequestBody.Builder, rhs: MessagesClient5.SubscribersPostRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.SubscribersPostRequestBody, rhs: MessagesClient5.SubscribersPostRequestBody) -> Swift.Bool
}
public struct SubscribersPostResponseBody : Swift.Codable, Swift.Equatable {
  public var subscriberId: Swift.String
  public var isSubscribed: Swift.Bool
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of SubscribersPostResponseBody.Builder class.")
  public init(subscriberId: Swift.String, isSubscribed: Swift.Bool, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let subscriberId: Swift.String
    final public let isSubscribed: Swift.Bool
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(subscriberId: Swift.String, isSubscribed: Swift.Bool = false)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.SubscribersPostResponseBody
    public static func == (lhs: MessagesClient5.SubscribersPostResponseBody.Builder, rhs: MessagesClient5.SubscribersPostResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.SubscribersPostResponseBody, rhs: MessagesClient5.SubscribersPostResponseBody) -> Swift.Bool
}
public struct SubscriptionsGetResponseBody : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var internalUserId: Swift.String
  public var subscriberName: Swift.String?
  public var subscriptionDate: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of SubscriptionsGetResponseBody.Builder class.")
  public init(id: Swift.String, internalUserId: Swift.String, subscriberName: Swift.String? = nil, subscriptionDate: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public let internalUserId: Swift.String
    final public var subscriberName: Swift.String? {
      get
    }
    final public let subscriptionDate: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, internalUserId: Swift.String, subscriptionDate: Swift.String)
    final public func set(subscriberName: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.SubscriptionsGetResponseBody
    public static func == (lhs: MessagesClient5.SubscriptionsGetResponseBody.Builder, rhs: MessagesClient5.SubscriptionsGetResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.SubscriptionsGetResponseBody, rhs: MessagesClient5.SubscriptionsGetResponseBody) -> Swift.Bool
}
public struct SubscriptionsPostRequestBody : Swift.Codable, Swift.Equatable {
  public var internalUserId: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of SubscriptionsPostRequestBody.Builder class.")
  public init(internalUserId: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let internalUserId: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(internalUserId: Swift.String)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.SubscriptionsPostRequestBody
    public static func == (lhs: MessagesClient5.SubscriptionsPostRequestBody.Builder, rhs: MessagesClient5.SubscriptionsPostRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.SubscriptionsPostRequestBody, rhs: MessagesClient5.SubscriptionsPostRequestBody) -> Swift.Bool
}
public struct SubscriptionsPostResponseBody : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of SubscriptionsPostResponseBody.Builder class.")
  public init(id: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.SubscriptionsPostResponseBody
    public static func == (lhs: MessagesClient5.SubscriptionsPostResponseBody.Builder, rhs: MessagesClient5.SubscriptionsPostResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.SubscriptionsPostResponseBody, rhs: MessagesClient5.SubscriptionsPostResponseBody) -> Swift.Bool
}
public struct Topic : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var name: Swift.String
  public var deleted: Swift.Bool
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of Topic.Builder class.")
  public init(id: Swift.String, name: Swift.String, deleted: Swift.Bool, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public let name: Swift.String
    final public let deleted: Swift.Bool
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, name: Swift.String, deleted: Swift.Bool)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.Topic
    public static func == (lhs: MessagesClient5.Topic.Builder, rhs: MessagesClient5.Topic.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.Topic, rhs: MessagesClient5.Topic) -> Swift.Bool
}
public struct TopicGetResponseBody : Swift.Codable, Swift.Equatable {
  public var mailoutTopic: Swift.Bool
  public var id: Swift.String
  public var code: Swift.String?
  public var name: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of TopicGetResponseBody.Builder class.")
  public init(mailoutTopic: Swift.Bool, id: Swift.String, code: Swift.String? = nil, name: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let mailoutTopic: Swift.Bool
    final public let id: Swift.String
    final public var code: Swift.String? {
      get
    }
    final public let name: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(mailoutTopic: Swift.Bool = false, id: Swift.String, name: Swift.String)
    final public func set(code: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.TopicGetResponseBody
    public static func == (lhs: MessagesClient5.TopicGetResponseBody.Builder, rhs: MessagesClient5.TopicGetResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.TopicGetResponseBody, rhs: MessagesClient5.TopicGetResponseBody) -> Swift.Bool
}
public struct TopicPutRequestBody : Swift.Codable, Swift.Equatable {
  public var name: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of TopicPutRequestBody.Builder class.")
  public init(name: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let name: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(name: Swift.String)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.TopicPutRequestBody
    public static func == (lhs: MessagesClient5.TopicPutRequestBody.Builder, rhs: MessagesClient5.TopicPutRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.TopicPutRequestBody, rhs: MessagesClient5.TopicPutRequestBody) -> Swift.Bool
}
public struct TopicPutResponseBody : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var code: Swift.String?
  public var name: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of TopicPutResponseBody.Builder class.")
  public init(id: Swift.String, code: Swift.String? = nil, name: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public var code: Swift.String? {
      get
    }
    final public let name: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, name: Swift.String)
    final public func set(code: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.TopicPutResponseBody
    public static func == (lhs: MessagesClient5.TopicPutResponseBody.Builder, rhs: MessagesClient5.TopicPutResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.TopicPutResponseBody, rhs: MessagesClient5.TopicPutResponseBody) -> Swift.Bool
}
public struct TopicsGetEmployeeResponseBody : Swift.Codable, Swift.Equatable {
  public var subscribersCount: Swift.Double
  public var mailoutTopic: Swift.Bool
  public var id: Swift.String
  public var code: Swift.String?
  public var name: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of TopicsGetEmployeeResponseBody.Builder class.")
  public init(subscribersCount: Swift.Double, mailoutTopic: Swift.Bool, id: Swift.String, code: Swift.String? = nil, name: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let subscribersCount: Swift.Double
    final public let mailoutTopic: Swift.Bool
    final public let id: Swift.String
    final public var code: Swift.String? {
      get
    }
    final public let name: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(subscribersCount: Swift.Double, mailoutTopic: Swift.Bool = false, id: Swift.String, name: Swift.String)
    final public func set(code: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.TopicsGetEmployeeResponseBody
    public static func == (lhs: MessagesClient5.TopicsGetEmployeeResponseBody.Builder, rhs: MessagesClient5.TopicsGetEmployeeResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.TopicsGetEmployeeResponseBody, rhs: MessagesClient5.TopicsGetEmployeeResponseBody) -> Swift.Bool
}
public struct TopicsGetResponseBody : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var code: Swift.String?
  public var name: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of TopicsGetResponseBody.Builder class.")
  public init(id: Swift.String, code: Swift.String? = nil, name: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public var code: Swift.String? {
      get
    }
    final public let name: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, name: Swift.String)
    final public func set(code: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.TopicsGetResponseBody
    public static func == (lhs: MessagesClient5.TopicsGetResponseBody.Builder, rhs: MessagesClient5.TopicsGetResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.TopicsGetResponseBody, rhs: MessagesClient5.TopicsGetResponseBody) -> Swift.Bool
}
public struct TopicsPostRequestBody : Swift.Codable, Swift.Equatable {
  public var name: Swift.String
  public var subscribers: [Swift.String]?
  public var mailoutTopic: Swift.Bool?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of TopicsPostRequestBody.Builder class.")
  public init(name: Swift.String, subscribers: [Swift.String]? = nil, mailoutTopic: Swift.Bool? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let name: Swift.String
    final public var subscribers: [Swift.String]? {
      get
    }
    final public var mailoutTopic: Swift.Bool? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(name: Swift.String)
    final public func set(subscribers: [Swift.String]?) -> Self
    final public func set(mailoutTopic: Swift.Bool?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.TopicsPostRequestBody
    public static func == (lhs: MessagesClient5.TopicsPostRequestBody.Builder, rhs: MessagesClient5.TopicsPostRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.TopicsPostRequestBody, rhs: MessagesClient5.TopicsPostRequestBody) -> Swift.Bool
}
public struct TopicsPostResponseBody : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of TopicsPostResponseBody.Builder class.")
  public init(id: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.TopicsPostResponseBody
    public static func == (lhs: MessagesClient5.TopicsPostResponseBody.Builder, rhs: MessagesClient5.TopicsPostResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.TopicsPostResponseBody, rhs: MessagesClient5.TopicsPostResponseBody) -> Swift.Bool
}
public struct UnauthorizedError : Swift.Codable, Swift.Equatable {
  public var message: Swift.String?
  public var errors: [MessagesClient5.ErrorItem]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of UnauthorizedError.Builder class.")
  public init(message: Swift.String? = nil, errors: [MessagesClient5.ErrorItem]? = nil)
  final public class Builder : Swift.Equatable {
    final public var message: Swift.String? {
      get
    }
    final public var errors: [MessagesClient5.ErrorItem]? {
      get
    }
    public init()
    final public func set(message: Swift.String?) -> Self
    final public func set(errors: [MessagesClient5.ErrorItem]?) -> Self
    final public func build() -> MessagesClient5.UnauthorizedError
    public static func == (lhs: MessagesClient5.UnauthorizedError.Builder, rhs: MessagesClient5.UnauthorizedError.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.UnauthorizedError, rhs: MessagesClient5.UnauthorizedError) -> Swift.Bool
}
public struct UnreadConversationsGetResponseBody : Swift.Codable, Swift.Equatable {
  public var unreadCount: Swift.Double
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of UnreadConversationsGetResponseBody.Builder class.")
  public init(unreadCount: Swift.Double, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let unreadCount: Swift.Double
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(unreadCount: Swift.Double)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.UnreadConversationsGetResponseBody
    public static func == (lhs: MessagesClient5.UnreadConversationsGetResponseBody.Builder, rhs: MessagesClient5.UnreadConversationsGetResponseBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.UnreadConversationsGetResponseBody, rhs: MessagesClient5.UnreadConversationsGetResponseBody) -> Swift.Bool
}
public struct UpdateMessageTopicRequestBody : Swift.Codable, Swift.Equatable {
  public var topicId: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of UpdateMessageTopicRequestBody.Builder class.")
  public init(topicId: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let topicId: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(topicId: Swift.String)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> MessagesClient5.UpdateMessageTopicRequestBody
    public static func == (lhs: MessagesClient5.UpdateMessageTopicRequestBody.Builder, rhs: MessagesClient5.UpdateMessageTopicRequestBody.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: MessagesClient5.UpdateMessageTopicRequestBody, rhs: MessagesClient5.UpdateMessageTopicRequestBody) -> Swift.Bool
}
public enum WorkflowStatus : Swift.String, Swift.Codable, Swift.CaseIterable {
  case new
  case inProgress
  case resolved
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [MessagesClient5.WorkflowStatus]
  public static var allCases: [MessagesClient5.WorkflowStatus] {
    get
  }
}
extension MessagesClient5.ConversationThread.CodingKeys : Swift.Equatable {}
extension MessagesClient5.ConversationThread.CodingKeys : Swift.Hashable {}
extension MessagesClient5.ConversationThread.CodingKeys : Swift.RawRepresentable {}
extension MessagesClient5.ConversationThreadsGetResponseBody.CodingKeys : Swift.Equatable {}
extension MessagesClient5.ConversationThreadsGetResponseBody.CodingKeys : Swift.Hashable {}
extension MessagesClient5.ConversationThreadsGetResponseBody.CodingKeys : Swift.RawRepresentable {}
extension MessagesClient5.ConversationsThread.CodingKeys : Swift.Equatable {}
extension MessagesClient5.ConversationsThread.CodingKeys : Swift.Hashable {}
extension MessagesClient5.ConversationsThread.CodingKeys : Swift.RawRepresentable {}
@available(*, deprecated, message: "This enum is deprecated in favor of the alternative enum inside the GetConversationThreadsEmployeeRequestParams class.")
extension MessagesClient5.EmployeeAPI.Direction_getConversationThreadsEmployee : Swift.Equatable {}
@available(*, deprecated, message: "This enum is deprecated in favor of the alternative enum inside the GetConversationThreadsEmployeeRequestParams class.")
extension MessagesClient5.EmployeeAPI.Direction_getConversationThreadsEmployee : Swift.Hashable {}
@available(*, deprecated, message: "This enum is deprecated in favor of the alternative enum inside the GetConversationThreadsEmployeeRequestParams class.")
extension MessagesClient5.EmployeeAPI.Direction_getConversationThreadsEmployee : Swift.RawRepresentable {}
extension MessagesClient5.GetConversationThreadsEmployeeRequestParams.Direction : Swift.Equatable {}
extension MessagesClient5.GetConversationThreadsEmployeeRequestParams.Direction : Swift.Hashable {}
extension MessagesClient5.GetConversationThreadsEmployeeRequestParams.Direction : Swift.RawRepresentable {}
extension MessagesClient5.EmployeeConversationThread.CodingKeys : Swift.Equatable {}
extension MessagesClient5.EmployeeConversationThread.CodingKeys : Swift.Hashable {}
extension MessagesClient5.EmployeeConversationThread.CodingKeys : Swift.RawRepresentable {}
extension MessagesClient5.MailoutStatus : Swift.Equatable {}
extension MessagesClient5.MailoutStatus : Swift.Hashable {}
extension MessagesClient5.MailoutStatus : Swift.RawRepresentable {}
extension MessagesClient5.MarkAsReadUnreadPutRequestBody.Status : Swift.Equatable {}
extension MessagesClient5.MarkAsReadUnreadPutRequestBody.Status : Swift.Hashable {}
extension MessagesClient5.MarkAsReadUnreadPutRequestBody.Status : Swift.RawRepresentable {}
extension MessagesClient5.MessageThreadAssignmentRequestBody.CodingKeys : Swift.Equatable {}
extension MessagesClient5.MessageThreadAssignmentRequestBody.CodingKeys : Swift.Hashable {}
extension MessagesClient5.MessageThreadAssignmentRequestBody.CodingKeys : Swift.RawRepresentable {}
extension MessagesClient5.MessageThreadBulkAssignementRequestBody.CodingKeys : Swift.Equatable {}
extension MessagesClient5.MessageThreadBulkAssignementRequestBody.CodingKeys : Swift.Hashable {}
extension MessagesClient5.MessageThreadBulkAssignementRequestBody.CodingKeys : Swift.RawRepresentable {}
extension MessagesClient5.MessageThreadBulkAssignmentRequestBody.CodingKeys : Swift.Equatable {}
extension MessagesClient5.MessageThreadBulkAssignmentRequestBody.CodingKeys : Swift.Hashable {}
extension MessagesClient5.MessageThreadBulkAssignmentRequestBody.CodingKeys : Swift.RawRepresentable {}
extension MessagesClient5.MessageThreadGetResponseBody.CodingKeys : Swift.Equatable {}
extension MessagesClient5.MessageThreadGetResponseBody.CodingKeys : Swift.Hashable {}
extension MessagesClient5.MessageThreadGetResponseBody.CodingKeys : Swift.RawRepresentable {}
extension MessagesClient5.MessageThreadGetResponseBodyParent.CodingKeys : Swift.Equatable {}
extension MessagesClient5.MessageThreadGetResponseBodyParent.CodingKeys : Swift.Hashable {}
extension MessagesClient5.MessageThreadGetResponseBodyParent.CodingKeys : Swift.RawRepresentable {}
@available(*, deprecated, message: "This enum is deprecated in favor of the alternative enum inside the GetConversationThreadsRequestParams class.")
extension MessagesClient5.MessagecenterAPI.Direction_getConversationThreads : Swift.Equatable {}
@available(*, deprecated, message: "This enum is deprecated in favor of the alternative enum inside the GetConversationThreadsRequestParams class.")
extension MessagesClient5.MessagecenterAPI.Direction_getConversationThreads : Swift.Hashable {}
@available(*, deprecated, message: "This enum is deprecated in favor of the alternative enum inside the GetConversationThreadsRequestParams class.")
extension MessagesClient5.MessagecenterAPI.Direction_getConversationThreads : Swift.RawRepresentable {}
extension MessagesClient5.GetConversationThreadsRequestParams.Direction : Swift.Equatable {}
extension MessagesClient5.GetConversationThreadsRequestParams.Direction : Swift.Hashable {}
extension MessagesClient5.GetConversationThreadsRequestParams.Direction : Swift.RawRepresentable {}
extension MessagesClient5.PresentationMessageEmployeePostRequestBody.CodingKeys : Swift.Equatable {}
extension MessagesClient5.PresentationMessageEmployeePostRequestBody.CodingKeys : Swift.Hashable {}
extension MessagesClient5.PresentationMessageEmployeePostRequestBody.CodingKeys : Swift.RawRepresentable {}
extension MessagesClient5.WorkflowStatus : Swift.Equatable {}
extension MessagesClient5.WorkflowStatus : Swift.Hashable {}
extension MessagesClient5.WorkflowStatus : Swift.RawRepresentable {}
