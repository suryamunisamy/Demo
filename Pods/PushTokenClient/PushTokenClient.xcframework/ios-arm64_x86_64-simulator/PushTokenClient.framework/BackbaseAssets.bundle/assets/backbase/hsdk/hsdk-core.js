/**
 * Name: hsdk-core
 * Description: Web API of Mobile SDK
 * Version: 1.10.0
 * SHA-1: 2e0e720d2a7f983cb0dd230501141f9bc03d9c76
 */
(function(exports){"use strict";const globalContext=typeof global!=="undefined"?global:window;const createObject=Object.create;const getUserAgent=()=>globalContext.navigator&&globalContext.navigator.userAgent||"";const isIOS=()=>/AppleWebKit/i.test(getUserAgent());var EventOrigin;(function(EventOrigin){EventOrigin["System"]="SYSTEM";EventOrigin["Web"]="WEB"})(EventOrigin||(EventOrigin={}));var BridgePlatform;(function(BridgePlatform){BridgePlatform["Android"]="Android";BridgePlatform["IOS"]="iOS"})(BridgePlatform||(BridgePlatform={}));const createAndroidBridge=()=>{const bridgePlatform=BridgePlatform.Android;const getNativeAndroidBridge=()=>globalContext.mobile;const itemLoaded=time=>{getNativeAndroidBridge().itemLoaded(time)};const publish=(eventName,payload,eventOrigin)=>{getNativeAndroidBridge().publish(eventName,payload,eventOrigin)};const reload=()=>{getNativeAndroidBridge().reload()};const resize=(width,height)=>{getNativeAndroidBridge().resize(width,height)};const scrollTo=(x,y)=>{getNativeAndroidBridge().scrollTo(x,y)};const subscribe=eventName=>{getNativeAndroidBridge().subscribe(eventName)};const unsubscribe=eventName=>{getNativeAndroidBridge().unsubscribe(eventName)};return{bridgePlatform:bridgePlatform,itemLoaded:itemLoaded,publish:publish,reload:reload,resize:resize,scrollTo:scrollTo,subscribe:subscribe,unsubscribe:unsubscribe}};const isArray=Array.isArray;const isFunction=testValue=>typeof testValue==="function";const isObject=testValue=>testValue!==null&&typeof testValue==="object"&&!isArray(testValue);const isString=testValue=>typeof testValue==="string";const generateUid=()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,c=>{const r=Math.random()*16|0;const v=c==="x"?r:r&3|8;return v.toString(16)});const createIOSBridge=getPubsub=>{const bridgePlatform=BridgePlatform.IOS;const encodeURIExtras=str=>encodeURIComponent(str).replace(/[!()*]/g,match=>`%${match.charCodeAt(0).toString(16)}`).replace(/[']/g,()=>`\\'`);const appendElement=(element,target)=>{target=target||globalContext.document.documentElement;target.appendChild(element)};const removeElement=element=>{const parent=element.parentNode;if(parent){parent.removeChild(element)}};const addIframe=src=>{const iframe=globalContext.document.createElement("IFRAME");iframe.setAttribute("src",src);appendElement(iframe);removeElement(iframe)};const addPluginIframe=(pluginName,pluginMethod,params)=>{params=encodePluginParams(params);addIframe(`bb-plugin://`+`?plugin=${encodeURIExtras(pluginName)}`+`&method=${encodeURIExtras(pluginMethod)}`+`&params=${params.join("&params=")}`)};const encodePluginParams=params=>params.map(param=>encodeURIExtras(param));const stringifyPluginParams=params=>params.map(param=>isObject(param)||isArray(param)?JSON.stringify(param):param);const callPlugin=(pluginName,pluginMethod,args,onSuccess,onError)=>{const pubsub=getPubsub();const pluginCallbackUid=generateUid();const baseEventName=`${pluginName}.${pluginMethod}.${pluginCallbackUid}`;const successEventName=`plugin.success.${baseEventName}`;const errorEventName=`plugin.error.${baseEventName}`;args=stringifyPluginParams(args);const subscribeToPluginEvents=()=>{pubsub.subscribe(successEventName,handlePluginSuccessEvent);pubsub.subscribe(errorEventName,handlePluginErrorEvent)};const unsubscribeFromPluginEvents=()=>{pubsub.unsubscribe(successEventName,handlePluginSuccessEvent);pubsub.unsubscribe(errorEventName,handlePluginErrorEvent)};const handlePluginSuccessEvent=response=>{if(!response.keep){unsubscribeFromPluginEvents()}if(isFunction(onSuccess)){onSuccess(response.data)}};const handlePluginErrorEvent=response=>{if(!response.keep){unsubscribeFromPluginEvents()}if(isFunction(onError)){onError(response.data)}};subscribeToPluginEvents();addPluginIframe(pluginName,pluginMethod,[pluginCallbackUid,...args]);return pluginCallbackUid};const itemLoaded=time=>{addIframe(`bb-loaded://?time=${time}`)};const publish=(eventName,payload,eventOrigin)=>{addIframe(`bb-publish://?event=${encodeURIExtras(eventName)}`+`&type=${encodeURIExtras(eventOrigin)}`+`&payload=${encodeURIExtras(payload)}`)};const reload=()=>{addIframe("bb-reload://")};const resize=(width,height)=>{addIframe(`bb-resize://?w=${width}&h=${height}`)};const scrollTo=(x,y)=>{addIframe(`bb-scroll://?x=${x}&y=${y}`)};const subscribe=eventName=>{addIframe(`bb-subscribe://?event=${encodeURIExtras(eventName)}`)};const unsubscribe=eventName=>{addIframe(`bb-unsubscribe://?event=${encodeURIExtras(eventName)}`)};return{bridgePlatform:bridgePlatform,callPlugin:callPlugin,itemLoaded:itemLoaded,publish:publish,reload:reload,resize:resize,scrollTo:scrollTo,subscribe:subscribe,unsubscribe:unsubscribe}};const createBridge=isIOS=>isIOS?createIOSBridge(getPubsub):createAndroidBridge();let bridge;const getBridge=()=>{if(!bridge){bridge=createBridge(isIOS())}return bridge};const createPlainError=message=>new Error(message);const createPlainTypeError=message=>new TypeError(message);const createErrorFactory=componentName=>message=>createPlainError(`[${componentName}] ${message}`);const createTypeErrorFactory=componentName=>message=>createPlainTypeError(`[${componentName}] ${message}`);const createTypeError=createTypeErrorFactory("hsdk-core");const throwIfInvalidEventName=(errorPrefix,eventName)=>{if(!isString(eventName)){throw createTypeError(`${errorPrefix}: Expected the name of the event to be a string, `+`but got '${typeof eventName}'`)}if(eventName.trim().length<1){throw createTypeError(`${errorPrefix}: The name of the event must contain at least 1 character`)}};const throwIfInvalidEventListener=(errorPrefix,eventListener)=>{if(!isFunction(eventListener)){throw createTypeError(`${errorPrefix}: Expected the event listener to be a function, `+`but got '${typeof eventListener}'`)}};const throwIfInvalidEventPayload=(errorPrefix,eventPayload)=>{if(!eventPayload){throw createTypeError(`${errorPrefix}: Expected a payload, but got '${eventPayload}'`)}};const throwIfInvalidEventOrigin=(errorPrefix,eventOrigin)=>{if(eventOrigin&&eventOrigin!==EventOrigin.Web&&eventOrigin!==EventOrigin.System){throw createTypeError(`${errorPrefix}: Expected the eventOrigin parameter to be 'WEB' or 'SYSTEM', `+`but got '${eventOrigin}'`)}};const createEventBus=(instanceName,bridge)=>{const eventEmitter=Object.create(null);const name=instanceName.toString();const all=Object.create(null);const getOrCreateListeners=eventName=>{let listeners=all[eventName];if(!listeners){listeners=[];all[eventName]=listeners}return listeners};const publishToNativeIfNeeded=(eventName,payload,eventOrigin)=>{const payloadString=JSON.stringify(payload);if(eventOrigin!==EventOrigin.System){bridge.publish(eventName,payloadString,eventOrigin)}};const publish=(eventName,payload,...nativeExtraArguments)=>{const errorPrefix=`Could not publish the event`;const eventOrigin=nativeExtraArguments[1];throwIfInvalidEventName(errorPrefix,eventName);throwIfInvalidEventPayload(errorPrefix,payload);throwIfInvalidEventOrigin(errorPrefix,eventOrigin);publishToNativeIfNeeded(eventName,payload,eventOrigin);const listeners=all[eventName];if(listeners){listeners.slice().forEach(listener=>{listener(payload)})}};const subscribe=(eventName,eventListener)=>{const errorPrefix="Could not subscribe to the event";throwIfInvalidEventName(errorPrefix,eventName);throwIfInvalidEventListener(errorPrefix,eventListener);const listeners=getOrCreateListeners(eventName);listeners.push(eventListener);bridge.subscribe(eventName)};const unsubscribe=(eventName,eventListener)=>{const errorPrefix="Could not unsubscribe to the event";throwIfInvalidEventName(errorPrefix,eventName);throwIfInvalidEventListener(errorPrefix,eventListener);const listeners=all[eventName];if(listeners){const idx=listeners.indexOf(eventListener);if(idx!==-1){listeners.splice(idx,1);bridge.unsubscribe(eventName)}}};return Object.assign(eventEmitter,{name:name,publish:publish,subscribe:subscribe,unsubscribe:unsubscribe})};let pubsub;const getPubsub=()=>{if(!pubsub){pubsub=createEventBus("pubsub",getBridge())}return pubsub};const mobile=getBridge();const pubsub$1=getPubsub();Object.assign(globalContext,{cxp:{mobile:mobile},gadgets:{pubsub:pubsub$1}});if(!globalContext.mobile){Object.assign(globalContext,{mobile:mobile})}var LogMethod;(function(LogMethod){LogMethod["Debug"]="debug";LogMethod["Error"]="error";LogMethod["Info"]="info";LogMethod["Warn"]="warn"})(LogMethod||(LogMethod={}));(function(LogLevel){LogLevel["All"]="all";LogLevel["Debug"]="debug";LogLevel["Error"]="error";LogLevel["Info"]="info";LogLevel["None"]="none";LogLevel["Warn"]="warn"})(exports.LogLevel||(exports.LogLevel={}));const createExtendedConsole=nativeConsole=>{let logBuffer=[];const nativeMethods={debug:nativeConsole.debug,error:nativeConsole.error,info:nativeConsole.info,log:nativeConsole.log,warn:nativeConsole.warn};const callNativeMethod=(methodName,argsToPrint)=>nativeMethods[methodName].call(nativeConsole,...argsToPrint);const addCallToBuffer=(methodName,argsToPrint)=>logBuffer.push([methodName,argsToPrint]);const createMethod=methodName=>(...argsToPrint)=>{addCallToBuffer(methodName,argsToPrint);callNativeMethod(methodName,argsToPrint)};const debug=createMethod("debug");const error=createMethod("error");const info=createMethod("info");const log=createMethod("log");const warn=createMethod("warn");const flush=()=>{logBuffer.forEach(entry=>{const[logMethod,argsToPrint]=entry;nativeMethods[logMethod].call(nativeConsole,...argsToPrint)});logBuffer=[]};return{debug:debug,error:error,flush:flush,info:info,log:log,warn:warn}};const nativeConsole=globalContext.console;const nativeDebug=nativeConsole.debug;const nativeError=nativeConsole.error;const nativeInfo=nativeConsole.info;const nativeLog=nativeConsole.log;const nativeWarn=nativeConsole.warn;const enableExtendedConsole=()=>{const extendedConsole=createExtendedConsole(nativeConsole);nativeConsole.debug=extendedConsole.debug;nativeConsole.error=extendedConsole.error;nativeConsole.info=extendedConsole.info;nativeConsole.log=extendedConsole.log;nativeConsole.warn=extendedConsole.warn;nativeConsole.flush=()=>{extendedConsole.flush();nativeConsole.debug=nativeDebug;nativeConsole.error=nativeError;nativeConsole.info=nativeInfo;nativeConsole.log=nativeLog;nativeConsole.warn=nativeWarn}};let currentLogLevel=exports.LogLevel.All;const setLogLevel=logLevel=>{currentLogLevel=logLevel};const getLogLevel=()=>currentLogLevel;const createTypeError$1=createTypeErrorFactory("hsdk-core");const throwIfInvalidInstanceName=(errorPrefix,instanceName)=>{if(!isString(instanceName)){throw createTypeError$1(`${errorPrefix}: Expected a string, but got '${typeof instanceName}'`)}if(instanceName.trim().length<1){throw createTypeError$1(`${errorPrefix}: The name of the logger must contain at least 1 character`)}};const SUPPORTED_LOG_LEVELS=[exports.LogLevel.All,exports.LogLevel.Debug,exports.LogLevel.Error,exports.LogLevel.Info,exports.LogLevel.None,exports.LogLevel.Warn];const MethodToLogLevel={[LogMethod.Debug]:exports.LogLevel.Debug,[LogMethod.Error]:exports.LogLevel.Error,[LogMethod.Info]:exports.LogLevel.Info,[LogMethod.Warn]:exports.LogLevel.Warn};const LogLevelSeverity={[exports.LogLevel.None]:100,[exports.LogLevel.Error]:50,[exports.LogLevel.Warn]:30,[exports.LogLevel.Info]:20,[exports.LogLevel.Debug]:10,[exports.LogLevel.All]:0};const createLogger=instanceName=>{const errorPrefix="Could not create a logger";throwIfInvalidInstanceName(errorPrefix,instanceName);const logger=Object.create(null);const name=instanceName;const print=(logMethod,message,args)=>{const messageLogLevel=MethodToLogLevel[logMethod];const messageLogLevelSeverity=LogLevelSeverity[messageLogLevel];const logLevelSeverityThreshold=LogLevelSeverity[getLogLevel()];const shouldSuppressMessage=Boolean(messageLogLevelSeverity<logLevelSeverityThreshold);if(!shouldSuppressMessage){message=String(message);console[logMethod](`[${name}] ${message}`,...args)}};const debug=(message,...args)=>{print(LogMethod.Debug,message,args)};const error=(message,...args)=>{print(LogMethod.Error,message,args)};const info=(message,...args)=>{print(LogMethod.Info,message,args)};const warn=(message,...args)=>{print(LogMethod.Warn,message,args)};const flush=()=>{const flushConsole=console.flush;if(flushConsole){flushConsole()}};return Object.assign(logger,{debug:debug,error:error,flush:flush,info:info,warn:warn})};const logger=createLogger("hsdk-core");let currentConfig=null;const getConfig=()=>currentConfig;const setConfig=config=>{currentConfig=config};const normalizeConfig=rawConfig=>{let apiRoot=rawConfig.apiRoot;if(apiRoot.startsWith("file://")){apiRoot="/api"}const debug=rawConfig.debug;const logLevel=rawConfig.logLevel;const portalName=rawConfig.portalName;let staticResourcesRoot=rawConfig.staticResourcesRoot;if(!staticResourcesRoot.startsWith("file://")){staticResourcesRoot=`${rawConfig.contextRoot}/${staticResourcesRoot}`}const version=rawConfig.version;return{apiRoot:apiRoot,debug:debug,logLevel:logLevel,portalName:portalName,staticResourcesRoot:staticResourcesRoot,version:version}};const createTypeError$2=createTypeErrorFactory("hsdk-core");const throwIfInvalidConfig=(errorPrefix,rawConfig)=>{if(!rawConfig){throw createTypeError$2(`${errorPrefix}: No config provided. Please make sure to pass the config `+`as the first parameter of the createHSDKCoreAPI function`)}if(!isString(rawConfig.apiRoot)){throw createTypeError$2(`${errorPrefix}: Invalid parameter provided in the config: `+`Expected the \`config.apiRoot\` to be a string, `+`but got '${typeof rawConfig.apiRoot}' instead`)}if(!isString(rawConfig.logLevel)){throw createTypeError$2(`${errorPrefix}: Invalid parameter provided in the config: `+`Expected the \`config.logLevel\` to be a string, `+`but got '${typeof rawConfig.logLevel}' instead`)}if(!SUPPORTED_LOG_LEVELS.includes(rawConfig.logLevel)){const supportedLogLevelsString=SUPPORTED_LOG_LEVELS.map(level=>`'${level}'`).join(", ");throw createTypeError$2(`${errorPrefix}: Invalid parameter provided in the config: `+`Expected the \`config.logLevel\` to be one of the following values: ${supportedLogLevelsString}, `+`but got '${rawConfig.logLevel}' instead`)}if(!isString(rawConfig.staticResourcesRoot)){throw createTypeError$2(`${errorPrefix}: Invalid parameter provided in the config: `+`Expected the \`config.staticResourcesRoot\` to be a string, `+`but got '${typeof rawConfig.staticResourcesRoot}' instead`)}};const throwIfInvalidPlugins=(errorPrefix,plugins)=>{if(!isObject(plugins)){throw createTypeError$2(`${errorPrefix}: Invalid plugins provided: `+`Expected the plugins to be an object`)}};const createAPI=members=>{const api=createObject(null);Object.keys(members).forEach(key=>{Object.defineProperty(api,key,{configurable:false,enumerable:true,value:members[key],writable:false})});Object.freeze(api);return api};const createPluginsRegistry=plugins=>{const getPluginByName=pluginName=>{if({}.hasOwnProperty.call(plugins,pluginName)){return plugins[pluginName]}return null};const getPublicPlugins=()=>{const publicPlugins={};Object.keys(plugins).forEach(pluginName=>{publicPlugins[pluginName]=plugins[pluginName]});return createAPI(publicPlugins)};const getPublicPluginNames=()=>Object.keys(getPublicPlugins());logger.info("Registered native plugins:",getPublicPluginNames());return{getPluginByName:getPluginByName,getPublicPlugins:getPublicPlugins}};const domReady=()=>new Promise(resolve=>{if(globalContext.document.readyState==="loading"){globalContext.document.addEventListener("DOMContentLoaded",()=>{resolve()})}else{resolve()}});const createError=createErrorFactory("hsdk-core");const createDefaultRenderer=()=>({name:"hsdk-renderer-default",renderItem:()=>{throw createError("Could not render item: No renderer has been set. "+"Please make sure the renderer is included in the application config.")}});const createTypeError$3=createTypeErrorFactory("hsdk-core");const throwIfInvalidCreateRenderer=(errorPrefix,createRenderer)=>{if(!isFunction(createRenderer)){throw createTypeError$3(`${errorPrefix}: Expected a function, but got '${typeof createRenderer}'`)}};const throwIfInvalidRenderer=(errorPrefix,renderer)=>{if(!isObject(renderer)){throw createTypeError$3(`Invalid renderer: Expected an object, but got '${renderer}'`)}if(!isFunction(renderer.renderItem)){throw createTypeError$3(`Invalid renderer: Please make sure that your renderer has a 'renderItem' function`)}};let currentRenderer=createDefaultRenderer();const getCurrentRenderer=()=>currentRenderer;const getRenderer=()=>domReady().then(getCurrentRenderer);const setRenderer=createRenderer=>{const errorPrefix="Could not set the renderer";throwIfInvalidCreateRenderer(errorPrefix,createRenderer);const config=getConfig();const renderer=createRenderer(config);throwIfInvalidRenderer(errorPrefix,renderer);currentRenderer=renderer;logger.info("Registered the renderer:",renderer.name)};const registerRenderer=createRenderer=>{logger.warn("The `registerRenderer()` method is deprecated. "+"Use the `setRenderer()` method instead.");return setRenderer(createRenderer)};const createHSDKCoreAPI=(rawConfig,injectedNativePlugins)=>{const errorPrefix="Could not initialize the library";throwIfInvalidConfig(errorPrefix,rawConfig);throwIfInvalidPlugins(errorPrefix,injectedNativePlugins);const{debug:debug,logLevel:logLevel}=rawConfig;if(debug){enableExtendedConsole()}const config=normalizeConfig(rawConfig);logger.debug("Set config:",config);setConfig(config);logger.debug("Set log level:",logLevel);setLogLevel(logLevel);logger.info("Initialized HSDK Core");const pluginsRegistry=createPluginsRegistry(injectedNativePlugins);return Object.create(null,{config:{value:config},createLogger:{value:createLogger},getRenderer:{value:getRenderer},plugins:{value:pluginsRegistry.getPublicPlugins()},pubsub:{value:getPubsub()},registerRenderer:{value:registerRenderer},setRenderer:{value:setRenderer}})};exports.create=createHSDKCoreAPI})(this["@backbase/hsdk-core"]=this["@backbase/hsdk-core"]||{});
