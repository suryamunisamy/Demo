/**
 * Name: hsdk-app-shell
 * Description: HSDK App Shell implements a generic application shell that can be used in hybrid mobile applications
 * Version: 1.10.0
 * SHA-1: 78b301ebec7a0d14f70e60c7382e83fbedc74fcb
 */
(function(exports){"use strict";const createAPI=api=>{const result=Object.create(null);Object.defineProperties(result,Object.getOwnPropertyDescriptors(api));return result};const createErrorFactory=componentName=>message=>new Error(`[${componentName}] ${message}`);const createTypeErrorFactory=componentName=>message=>new TypeError(`[${componentName}] ${message}`);const isArray=arg=>Array.isArray(arg);const isFunction=arg=>typeof arg==="function";const isString=arg=>typeof arg==="string";const createTypeError=createTypeErrorFactory("event-emitter");const throwIfInvalidEventListener=(errorPrefix,eventListener)=>{if(!isFunction(eventListener)){throw createTypeError(`${errorPrefix}: `+`Expected the event listener to be a function, but got '${eventListener}'`)}};const throwIfInvalidEventName=(errorPrefix,eventName)=>{if(!isString(eventName)){throw createTypeError(`${errorPrefix}: `+`Expected the name of the event to be a string, but got '${eventName}'`)}if(eventName.trim().length<1){throw createTypeError(`${errorPrefix}: The name of the event must contain at least 1 character`)}};const createEventEmitter=instanceName=>{const all=new Map;const name=instanceName.toString();const getOrCreateListeners=eventName=>{let listeners=all.get(eventName);if(!listeners){listeners=[];all.set(eventName,listeners)}return listeners};const emit=(eventName,payload)=>{throwIfInvalidEventName("Could not emit the event",eventName);const listeners=all.get(eventName);if(listeners){listeners.slice().forEach(listener=>{listener(payload)})}};const off=(eventName,eventListener)=>{const errorPrefix="Could not unsubscribe from the event";throwIfInvalidEventName(errorPrefix,eventName);throwIfInvalidEventListener(errorPrefix,eventListener);const listeners=all.get(eventName);if(listeners){const idx=listeners.indexOf(eventListener);if(idx!==-1){listeners.splice(idx,1)}}};const on=(eventName,eventListener)=>{const errorPrefix="Could not subscribe to the event";throwIfInvalidEventName(errorPrefix,eventName);throwIfInvalidEventListener(errorPrefix,eventListener);const listeners=getOrCreateListeners(eventName);listeners.push(eventListener)};return createAPI({emit:emit,name:name,off:off,on:on})};const generateUid=()=>"xxxxxxxx".replace(/[x]/g,()=>{const r=Math.random()*16|0;return r.toString(16)});function __awaiter(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator["throw"](value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))}var NavigationProgress;(function(NavigationProgress){NavigationProgress["AfterNavigate"]="afterNavigate";NavigationProgress["AfterTransitionEnd"]="afterTransitionEnd";NavigationProgress["BeforeNavigate"]="beforeNavigate";NavigationProgress["BeforeTransitionStart"]="beforeTransitionStart"})(NavigationProgress||(NavigationProgress={}));(function(NavigationResultStatus){NavigationResultStatus["Canceled"]="canceled";NavigationResultStatus["Complete"]="complete";NavigationResultStatus["Failed"]="failed"})(exports.NavigationResultStatus||(exports.NavigationResultStatus={}));const createError=createErrorFactory("menu-navigation-layout.controller");const createInvalidMenuItemError=(errorPrefix,uri)=>createError(`${errorPrefix}: There is no menu item with URI "${uri}".`);class ConnectedMenuNavigationLayoutController{constructor(navigationPipeline,layoutId,layoutState){this.navigationPipeline=navigationPipeline;this.layoutId=layoutId;this.layoutState=layoutState;this.defaultTransition=()=>__awaiter(this,void 0,void 0,(function*(){console.warn("[menu-layout.controller] Transitions are not configured")}));this.transitionsValue=null}get activeMenuItem(){return this.layoutState.activeMenuItem.uri}get activeStack(){return this.layoutState.activeStack.getController()}get id(){return this.layoutId}get menuItems(){return this.layoutState.menuItems.map(menuItem=>menuItem.uri)}get transitions(){return this.transitionsValue}set transitions(transitionsToSet){this.transitionsValue=transitionsToSet}select(targetURI){const errorPrefix="Could not change the active stack";const{menuItems:menuItems}=this.layoutState;const targetView=menuItems.find(menuItem=>menuItem.uri===targetURI);if(!targetView){throw createInvalidMenuItemError(errorPrefix,targetURI)}const targetViewId=targetView.id;const targetViewIndex=menuItems.indexOf(targetView);if(targetViewIndex===this.layoutState.activeStackIndex){return Promise.resolve({status:exports.NavigationResultStatus.Complete})}const originViewInstanceId=this.layoutState.activeViewInstance;const updateStateFunction=()=>{this.layoutState.activeStackIndex=targetViewIndex;return this.layoutState.activeViewInstance};return this.navigationPipeline.performNavigation(originViewInstanceId,targetViewId,updateStateFunction,this.transitionFor("select"))}transitionFor(name){const{transitions:transitions}=this;return transitions?transitionContext=>transitions[name](transitionContext):this.defaultTransition}}const MENU_NAVIGATION_LAYOUT_NAME="MenuNavigationLayout";const validateViewInstanceId=viewInstanceId=>{if(!isString(viewInstanceId)){return[`Expected the view reference to be of type string, `+`but "${typeof viewInstanceId}" was given`]}if(!viewInstanceId.trim()){return["Expected the view reference to be a string of at least one character"]}return[]};const createTypeError$1=createTypeErrorFactory("menu-navigation-layout");const createViewNotFoundByURIError=(errorPrefix,viewURI)=>createTypeError$1(`${errorPrefix}: Could not find the view by provided URI "${viewURI}". `+`Make sure you provide correct URIs in menu items`);const throwIfInvalidLayoutOptions=(errorPrefix,layoutOptions)=>{if(!isArray(layoutOptions.menuItems)){throw createTypeError$1(`${errorPrefix}: The 'menuItems' parameter is required. `+`Make sure you provide an array of menu items in the `+`'layoutOptions' when you add 'MenuNavigationLayout'`)}};const throwIfInvalidViewInstanceId=(errorPrefix,viewInstanceId)=>{const errors=validateViewInstanceId(viewInstanceId);if(errors.length>0){throw createTypeError$1(`${errorPrefix}: ${errors[0]}`)}};class ConnectedMenuNavigationLayoutRenderState{constructor(layoutId,layoutState){this.layoutId=layoutId;this.layoutState=layoutState}get renderTree(){const id=this.layoutId;const name=MENU_NAVIGATION_LAYOUT_NAME;const active=this.layoutState.activeStackIndex;const stacks=this.layoutState.stacks;const tree={active:active,stacks:stacks.map(childStack=>childStack.getRenderTree())};return{id:id,name:name,tree:tree}}}class ConnectedMenuNavigationLayoutState{constructor(stackNavigationLayoutFactory,menuItemsValue){this.stackNavigationLayoutFactory=stackNavigationLayoutFactory;this.menuItemsValue=menuItemsValue;this.activeStackIndexValue=0;this.stacksValue=this.menuItemsValue.map(view=>this.stackNavigationLayoutFactory({},view.id))}get activeStackIndex(){return this.activeStackIndexValue}set activeStackIndex(stackIndex){this.activeStackIndexValue=stackIndex}get activeStack(){return this.stacks[this.activeStackIndex]}get activeMenuItem(){return this.menuItemsValue[this.activeStackIndex]}get activeViewInstance(){return this.activeStack.getActiveViewInstance()}get menuItems(){return[...this.menuItemsValue]}get stacks(){return this.stacksValue}}const makeMenuNavigationLayout=(navigationPipeline,stackNavigationLayoutFactory,viewRegistry)=>layoutOptions=>{const layoutErrorPrefix="Could not create a menu layout";const menuLayoutOptions=layoutOptions;throwIfInvalidLayoutOptions(layoutErrorPrefix,menuLayoutOptions);const menuItems=menuLayoutOptions.menuItems.map(viewURI=>{const view=viewRegistry.getViewByURI(viewURI);if(!view){throw createViewNotFoundByURIError(layoutErrorPrefix,viewURI)}return view});const layoutId=`menu-layout-${generateUid()}`;const layoutState=new ConnectedMenuNavigationLayoutState(stackNavigationLayoutFactory,menuItems);const layoutRenderState=new ConnectedMenuNavigationLayoutRenderState(layoutId,layoutState);const layoutController=new ConnectedMenuNavigationLayoutController(navigationPipeline,layoutId,layoutState);const getActiveViewInstance=()=>layoutState.activeViewInstance;const getChildLayoutById=id=>{const stacks=layoutState.stacks;const stack=stacks.find(childStack=>childStack.getId()===id);return stack||null};const getChildLayoutByViewInstance=viewInstanceId=>layoutState.stacks.find(childStack=>childStack.hasViewInstance(viewInstanceId))||null;const getController=()=>layoutController;const getId=()=>layoutId;const getLayoutPathToViewInstance=viewInstanceId=>{throwIfInvalidViewInstanceId("Could not get the path to the given view",viewInstanceId);const stackLayout=getChildLayoutByViewInstance(viewInstanceId);if(!stackLayout){return[]}return[layoutId,stackLayout.getId()]};const getName=()=>MENU_NAVIGATION_LAYOUT_NAME;const getRenderTree=()=>layoutRenderState.renderTree;const hasViewInstance=viewInstanceId=>{throwIfInvalidViewInstanceId("Could not check if the stack has the view",viewInstanceId);return layoutState.stacks.some(childStack=>childStack.hasViewInstance(viewInstanceId))};return createAPI({getActiveViewInstance:getActiveViewInstance,getChildLayoutById:getChildLayoutById,getChildLayoutByViewInstance:getChildLayoutByViewInstance,getController:getController,getId:getId,getLayoutPathToViewInstance:getLayoutPathToViewInstance,getName:getName,getRenderTree:getRenderTree,hasViewInstance:hasViewInstance})};const toViewInstanceId=viewInstanceId=>viewInstanceId;const createError$1=createErrorFactory("modals-navigation-layout.controller");const viewNotFoundError=(errorPrefix,viewURI)=>createError$1(`${errorPrefix}: Could not find the view by URI: "${viewURI}"`);const throwIfStackNotFound=(errorPrefix,stackIndex,stackId)=>{if(stackIndex===-1){throw createError$1(`${errorPrefix}: There is no navigation stack with id "${stackId}" found.`)}};class ConnectedModalsNavigationLayoutController{constructor(navigationPipeline,viewRegistry,layoutId,layoutState){this.navigationPipeline=navigationPipeline;this.viewRegistry=viewRegistry;this.layoutId=layoutId;this.layoutState=layoutState;this.defaultTransition=()=>__awaiter(this,void 0,void 0,(function*(){console.warn("[modals-layout.controller] Transitions are not configured")}));this.transitionsValue=null}dismiss(stackId){const errorPrefix="Could not close the modal stack";throwIfStackNotFound(errorPrefix,this.layoutState.stackIndex(stackId),stackId);const originViewInstance=this.layoutState.activeViewInstance;const updateStateFunction=()=>this.layoutState.removeStack(stackId);return this.navigationPipeline.performNavigation(originViewInstance,null,updateStateFunction,this.transitionFor("dismiss"))}get activeStack(){const{stacks:stacks}=this.layoutState;const stack=stacks.length?stacks[stacks.length-1]:null;return stack?stack.getId():null}get size(){return this.layoutState.stacks.length}open(origin,targetURI){const errorPrefix="Could not open a modal stack";const originViewInstanceId=toViewInstanceId(origin);const targetView=this.viewByURI(targetURI,errorPrefix);const updateStateFunction=()=>this.layoutState.appendStack(targetView.id);return this.navigationPipeline.performNavigation(originViewInstanceId,targetView.id,updateStateFunction,this.transitionFor("open"))}get id(){return this.layoutId}get transitions(){return this.transitionsValue}set transitions(transitionsToSet){this.transitionsValue=transitionsToSet}transitionFor(name){const{transitions:transitions}=this;return transitions?transitionContext=>transitions[name](transitionContext):this.defaultTransition}viewByURI(viewURI,errorPrefix){const view=this.viewRegistry.getViewByURI(viewURI);if(view){return view}throw viewNotFoundError(errorPrefix,viewURI)}}const MODALS_NAVIGATION_LAYOUT_NAME="ModalsNavigationLayout";const validateViewId=viewId=>{if(!isString(viewId)){return[`Expected the view id to be of type string, `+`but "${typeof viewId}" was given`]}if(!viewId.trim()){return["Expected the view id reference to be a string of at least one character"]}return[]};const validateViewURI=(viewURI,viewId)=>{if(!isString(viewURI)){return[`Invalid view URI: Expected the URI of view "${viewId}" to be of type string, `+`but "${typeof viewURI}" was given`]}return[]};const createTypeError$2=createTypeErrorFactory("menu-navigation-layout");const throwIfInvalidInitialView=(errorPrefix,viewId)=>{if(viewId!==undefined){const errors=validateViewId(viewId);if(errors.length>0){throw createTypeError$2(`${errorPrefix}: The given initial view is invalid: ${errors[0]}`)}}};const throwIfInvalidViewInstanceId$1=(errorPrefix,viewInstanceId)=>{const errors=validateViewInstanceId(viewInstanceId);if(errors.length>0){throw createTypeError$2(`${errorPrefix}: ${errors[0]}`)}};var ModalsNavigationLayoutStateEvent;(function(ModalsNavigationLayoutStateEvent){ModalsNavigationLayoutStateEvent["AfterStateChanged"]="AfterStateChanged"})(ModalsNavigationLayoutStateEvent||(ModalsNavigationLayoutStateEvent={}));class ConnectedModalsNavigationLayoutRenderState{constructor(layoutId,layoutState){this.layoutId=layoutId;this.layoutState=layoutState;this.stacksToRender=[...this.layoutState.stacks];const handleLayoutStateChange=payload=>{this.stacksToRender.push(...payload.added)};this.layoutState.on(ModalsNavigationLayoutStateEvent.AfterStateChanged,handleLayoutStateChange)}get renderTree(){const id=this.layoutId;const name=MODALS_NAVIGATION_LAYOUT_NAME;this.stacksToRender=this.stacksToRender.filter(stackToRender=>stackToRender.getRenderTree().tree.views.length);const tree={stacks:this.stacksToRender.map(childStack=>childStack.getRenderTree())};return{id:id,name:name,tree:tree}}}class ConnectedModalsNavigationLayoutState{constructor(stackNavigationLayoutFactory,initialViewId){this.stackNavigationLayoutFactory=stackNavigationLayoutFactory;this.eventEmitter=createEventEmitter("modals-navigation-layout-state");this.stacksValue=[];if(initialViewId){this.stacks.push(stackNavigationLayoutFactory({},initialViewId))}}get activeStack(){return this.stacks[this.stacks.length-1]||null}get activeViewInstance(){const{activeStack:activeStack}=this;return activeStack?activeStack.getActiveViewInstance():null}get stacks(){return this.stacksValue}appendStack(target){const stack=this.stackNavigationLayoutFactory({},target);this.stacks.push(stack);this.publishStateChange([stack],[]);return stack.getRootView()}stackIndex(stackId){return this.stacks.findIndex(stack=>stack.getId()===stackId)}on(eventName,eventListener){this.eventEmitter.on(eventName,eventListener)}removeStack(stackId){const stackIndex=this.stackIndex(stackId);const stack=this.stacks[stackIndex];const previousStackIndex=stackIndex-1;const previousStack=this.stacks[previousStackIndex]||null;stack.clear();this.stacks.splice(stackIndex,1);this.publishStateChange([],[stack]);return previousStack?previousStack.getActiveViewInstance():null}publishStateChange(added,removed){const payload={added:added,removed:removed};this.eventEmitter.emit(ModalsNavigationLayoutStateEvent.AfterStateChanged,payload)}}const makeModalsNavigationLayout=(navigationPipeline,stackNavigationLayoutFactory,viewRegistry)=>(layoutOptions,initialViewId)=>{const layoutErrorPrefix="Could not create a modals layout";throwIfInvalidInitialView(layoutErrorPrefix,initialViewId);const layoutId=`modals-layout-${generateUid()}`;const layoutState=new ConnectedModalsNavigationLayoutState(stackNavigationLayoutFactory,initialViewId);const layoutRenderState=new ConnectedModalsNavigationLayoutRenderState(layoutId,layoutState);const layoutController=new ConnectedModalsNavigationLayoutController(navigationPipeline,viewRegistry,layoutId,layoutState);const getActiveViewInstance=()=>layoutState.activeViewInstance;const getChildLayoutById=id=>layoutState.stacks.find(childStack=>childStack.getId()===id)||null;const getChildLayoutByViewInstance=viewInstanceId=>layoutState.stacks.find(childStack=>childStack.hasViewInstance(viewInstanceId))||null;const getController=()=>layoutController;const getId=()=>layoutId;const getLayoutPathToViewInstance=viewInstanceId=>{throwIfInvalidViewInstanceId$1("Could not get the path to the given view",viewInstanceId);const stackLayout=getChildLayoutByViewInstance(viewInstanceId);if(!stackLayout){return[]}return[layoutId,stackLayout.getId()]};const getName=()=>MODALS_NAVIGATION_LAYOUT_NAME;const getRenderTree=()=>layoutRenderState.renderTree;const getSnapshot=()=>layoutState.stacks.map(childStack=>childStack.getSnapshot());const hasViewInstance=viewInstanceId=>{throwIfInvalidViewInstanceId$1("Could not check if the stack has the view",viewInstanceId);return layoutState.stacks.some(childStack=>childStack.hasViewInstance(viewInstanceId))};return createAPI({getActiveViewInstance:getActiveViewInstance,getChildLayoutById:getChildLayoutById,getChildLayoutByViewInstance:getChildLayoutByViewInstance,getController:getController,getId:getId,getLayoutPathToViewInstance:getLayoutPathToViewInstance,getName:getName,getRenderTree:getRenderTree,getSnapshot:getSnapshot,hasViewInstance:hasViewInstance})};const createError$2=createErrorFactory("stack-navigation-layout.controller");const viewNotFoundError$1=(errorPrefix,viewURI)=>createError$2(`${errorPrefix}: Could not find the view by URI: "${viewURI}"`);const viewNotInStackError=errorPrefix=>createError$2(`${errorPrefix}: The target view does not belong to the stack`);const throwIfCannotNavigateBack=(errorPrefix,size)=>{if(size<=1){throw createError$2(`${errorPrefix}: The stack must have more than one view`)}};const throwIfReplaceTheSameView=(errorPrefix,viewA,viewB)=>{if(viewA===viewB){throw createError$2(`${errorPrefix}: The target view and the last view in the stack `+`are the same view: "${viewA}"`)}};class ConnectedStackNavigationLayoutController{constructor(navigationPipeline,viewRegistry,viewInstanceRegistry,layoutId,layoutState){this.navigationPipeline=navigationPipeline;this.viewRegistry=viewRegistry;this.viewInstanceRegistry=viewInstanceRegistry;this.layoutId=layoutId;this.layoutState=layoutState;this.defaultTransition=()=>__awaiter(this,void 0,void 0,(function*(){console.warn("[stack-layout.controller] Transitions are not configured")}));this.viewInstanceRegistryClient=this.viewInstanceRegistry.createClient("stack-layout-controller");this.transitionsValue=null}canGoBack(){return this.layoutState.viewInstances.length>1}get activeView(){const activeViewInstanceId=this.activeViewInstance;return activeViewInstanceId?this.viewInstanceRegistryClient.getViewIdByViewInstance(activeViewInstanceId):null}get activeViewInstance(){return this.layoutState.activeViewInstance}get id(){return this.layoutId}get size(){return this.layoutState.viewInstances.length}get views(){return[...this.layoutState.viewInstances]}back(targetURI){const errorPrefix="Could not navigate back";throwIfCannotNavigateBack(errorPrefix,this.size);const targetIndex=targetURI?this.layoutState.viewIndex(this.viewByURI(targetURI,errorPrefix).id):this.size-2;const targetView=this.viewByIndex(targetIndex,errorPrefix);const originViewInstanceId=this.layoutState.activeViewInstance;const updateStateFunction=()=>this.layoutState.removeAllViewsAfter(targetView.id);return this.navigationPipeline.performNavigation(originViewInstanceId,targetView.id,updateStateFunction,this.transitionFor("back"))}forward(targetURI){const errorPrefix="Could not navigate forward";const targetView=this.viewByURI(targetURI,errorPrefix);const originViewInstanceId=this.layoutState.activeViewInstance;const updateStateFunction=()=>this.layoutState.appendView(targetView.id);return this.navigationPipeline.performNavigation(originViewInstanceId,targetView.id,updateStateFunction,this.transitionFor("forward"))}replace(targetURI){const errorPrefix="Could not replace the active view";const targetView=this.viewByURI(targetURI,errorPrefix);const originViewInstanceId=this.activeViewInstance;const originViewId=this.viewInstanceRegistryClient.getViewIdByViewInstance(originViewInstanceId);throwIfReplaceTheSameView(errorPrefix,targetView.id,originViewId);const updateStateFunction=()=>this.layoutState.replaceLastView(targetView.id);return this.navigationPipeline.performNavigation(originViewInstanceId,targetView.id,updateStateFunction,this.transitionFor("replace"))}get transitions(){return this.transitionsValue}set transitions(transitionsToSet){this.transitionsValue=transitionsToSet}toRoot(){return __awaiter(this,void 0,void 0,(function*(){if(this.size===1){return{status:exports.NavigationResultStatus.Complete}}const targetIndex=0;const{viewInstances:viewInstances}=this.layoutState;const originViewInstanceId=this.layoutState.activeViewInstance;const targetViewInstance=viewInstances[targetIndex];const targetViewId=this.viewInstanceRegistryClient.getViewIdByViewInstance(targetViewInstance);const updateStateFunction=()=>this.layoutState.removeAllViewsAfter(targetViewId);return this.navigationPipeline.performNavigation(originViewInstanceId,targetViewId,updateStateFunction,this.transitionFor("toRoot"))}))}transitionFor(name){const{transitions:transitions}=this;return transitions?transitionContext=>transitions[name](transitionContext):this.defaultTransition}viewByIndex(viewIndex,errorPrefix){const{viewInstances:viewInstances}=this.layoutState;if(viewIndex>=0&&viewIndex<viewInstances.length){const viewId=this.viewInstanceRegistryClient.getViewIdByViewInstance(viewInstances[viewIndex]);return this.viewRegistry.getViewById(viewId)}throw viewNotInStackError(errorPrefix)}viewByURI(viewURI,errorPrefix){const view=this.viewRegistry.getViewByURI(viewURI);if(view){return view}throw viewNotFoundError$1(errorPrefix,viewURI)}}const STACK_NAVIGATION_LAYOUT_NAME="StackNavigationLayout";var StackNavigationLayoutStateEvent;(function(StackNavigationLayoutStateEvent){StackNavigationLayoutStateEvent["AfterStateChanged"]="AfterStateChanged"})(StackNavigationLayoutStateEvent||(StackNavigationLayoutStateEvent={}));class ConnectedStackNavigationLayoutRenderState{constructor(viewRegistry,viewInstanceRegistry,layoutId,layoutState,layoutViewPool){this.viewRegistry=viewRegistry;this.viewInstanceRegistry=viewInstanceRegistry;this.layoutId=layoutId;this.layoutState=layoutState;this.layoutViewPool=layoutViewPool;this.viewInstanceRegistryClient=this.viewInstanceRegistry.createClient("stack-navigation-layout-render-state");this.viewsToRender=[...this.layoutState.viewInstances];const handleLayoutStateChange=()=>{this.updateRenderTree();this.updateViewPool()};this.layoutState.on(StackNavigationLayoutStateEvent.AfterStateChanged,handleLayoutStateChange)}viewByViewInstance(viewInstanceId){const viewId=this.viewInstanceRegistryClient.getViewIdByViewInstance(viewInstanceId);return this.viewRegistry.getViewById(viewId)}get renderTree(){const id=this.layoutId;const name=STACK_NAVIGATION_LAYOUT_NAME;this.updateRenderTree();this.updateViewPool();const tree={views:this.viewsToRender.map((viewInstanceId,index)=>{const view=this.viewByViewInstance(viewInstanceId);const title=view.title;const viewId=view.id;return{index:index,title:title,viewId:viewId,viewInstanceId:viewInstanceId}})};return{id:id,name:name,tree:tree}}updateRenderTree(){this.viewsToRender.push(...this.layoutState.viewInstances.filter(viewInstanceId=>!this.viewsToRender.includes(viewInstanceId)));this.viewsToRender=this.viewsToRender.filter(viewToRender=>this.viewInstanceRegistryClient.hasViewInstance(viewToRender))}updateViewPool(){const availableViews=this.viewsToRender.filter(viewInstanceId=>!this.layoutState.hasViewInstance(viewInstanceId));this.layoutViewPool.setViewInstances(availableViews)}}const createTypeError$3=createTypeErrorFactory("stack-navigation-layout");const throwIfInvalidInitialView$1=(errorPrefix,viewId)=>{const errors=validateViewId(viewId);if(errors.length>0){throw createTypeError$3(`${errorPrefix}: The given initial view id is invalid: ${errors[0]}`)}};const throwIfInvalidViewInstanceId$2=(errorPrefix,viewInstanceId)=>{const errors=validateViewInstanceId(viewInstanceId);if(errors.length>0){throw createTypeError$3(`${errorPrefix}: ${errors[0]}`)}};const findLast=(array,callback)=>{let currentIndex=array.length;while(currentIndex--){const arrayItem=array[currentIndex];if(callback(arrayItem,currentIndex)){return arrayItem}}return null};const contains=property=>(list,item)=>list.some(listItem=>item[property]===listItem[property]);class ConnectedStackNavigationLayoutState{constructor(viewInstanceRegistry,layoutViewPool,initialViewId){this.viewInstanceRegistry=viewInstanceRegistry;this.layoutViewPool=layoutViewPool;this.eventEmitter=createEventEmitter("stack-navigation-layout-state");this.viewInstanceRegistryClient=this.viewInstanceRegistry.createClient("stack-layout-state");this.viewInstancesValue=[];const initialViewInstanceInstanceId=this.viewInstanceRegistryClient.createViewInstance(initialViewId);this.viewInstancesValue.push(initialViewInstanceInstanceId)}get activeViewInstance(){return this.viewInstances[this.viewInstances.length-1]||null}get rootView(){return this.viewInstances[0]||null}get viewInstances(){return this.viewInstancesValue}appendView(viewId){const viewInstanceId=this.getOrCreateViewInstance(viewId);this.viewInstances.push(viewInstanceId);this.publishStateChange([viewInstanceId],[]);return viewInstanceId}hasViewInstance(viewInstanceId){return this.viewInstances.includes(viewInstanceId)}on(eventName,eventListener){this.eventEmitter.on(eventName,eventListener)}removeAllViews(){return this.removeViews(0)}removeAllViewsAfter(viewId){const viewInstanceId=findLast(this.viewInstances,viewToTest=>viewId===this.viewInstanceRegistryClient.getViewIdByViewInstance(viewToTest));this.removeViews(this.viewIndex(viewId)+1);return viewInstanceId}replaceLastView(viewId){const lastIndex=this.viewInstances.length-1;const previousView=this.viewInstances[lastIndex];const newView=this.viewInstanceRegistryClient.createViewInstance(viewId);this.viewInstances[lastIndex]=newView;this.viewInstanceRegistryClient.releaseView(previousView);this.publishStateChange([newView],[previousView]);return newView}viewIndex(viewId){const viewInstanceId=findLast(this.viewInstances,viewToTest=>viewId===this.viewInstanceRegistryClient.getViewIdByViewInstance(viewToTest));return viewInstanceId?this.viewInstances.indexOf(viewInstanceId):-1}getOrCreateViewInstance(viewId){return this.layoutViewPool.instanceFor(viewId)||this.viewInstanceRegistryClient.createViewInstance(viewId)}publishStateChange(added,removed){const payload={added:added,removed:removed};this.eventEmitter.emit(StackNavigationLayoutStateEvent.AfterStateChanged,payload)}removeViews(fromIndex){const removedViews=this.viewInstances.splice(fromIndex);removedViews.forEach(viewToRemove=>{this.viewInstanceRegistryClient.releaseView(viewToRemove)});this.publishStateChange([],removedViews)}}class ConnectedStackNavigationLayoutViewPool{constructor(viewInstanceRegistry){this.viewInstanceRegistry=viewInstanceRegistry;this.viewInstanceRegistryClient=this.viewInstanceRegistry.createClient("stack-navigation-layout-view-instance-pool");this.viewInstancePool=new Set}instanceFor(viewId){return Array.from(this.viewInstancePool).find(viewInstanceId=>viewId===this.viewInstanceRegistryClient.getViewIdByViewInstance(viewInstanceId))||null}setViewInstances(views){views.forEach(viewInstanceId=>this.viewInstancePool.add(viewInstanceId))}}const makeStackNavigationLayout=(navigationPipeline,viewRegistry,viewInstanceRegistry)=>(layoutOptions,initialViewId)=>{const layoutErrorPrefix="Could not create a new navigation stack";throwIfInvalidInitialView$1(layoutErrorPrefix,initialViewId);const layoutId=`stack-layout-${generateUid()}`;const layoutViewPool=new ConnectedStackNavigationLayoutViewPool(viewInstanceRegistry);const layoutState=new ConnectedStackNavigationLayoutState(viewInstanceRegistry,layoutViewPool,initialViewId);const layoutRenderState=new ConnectedStackNavigationLayoutRenderState(viewRegistry,viewInstanceRegistry,layoutId,layoutState,layoutViewPool);const layoutController=new ConnectedStackNavigationLayoutController(navigationPipeline,viewRegistry,viewInstanceRegistry,layoutId,layoutState);const clear=()=>layoutState.removeAllViews();const getActiveViewInstance=()=>layoutState.activeViewInstance;const getChildLayoutById=()=>null;const getChildLayoutByViewInstance=()=>null;const getController=()=>layoutController;const getId=()=>layoutId;const getLayoutPathToViewInstance=viewInstanceId=>{throwIfInvalidViewInstanceId$2("Could not get the path to the given view",viewInstanceId);return hasViewInstance(viewInstanceId)?[layoutId]:[]};const getName=()=>STACK_NAVIGATION_LAYOUT_NAME;const getRenderTree=()=>layoutRenderState.renderTree;const getRootView=()=>layoutState.rootView;const getSnapshot=()=>({id:layoutId,views:[...layoutState.viewInstances]});const hasViewInstance=viewInstanceIdToCheck=>{throwIfInvalidViewInstanceId$2("Could not check if the stack has the view",viewInstanceIdToCheck);return layoutState.viewInstances.some(viewInstanceId=>viewInstanceId===viewInstanceIdToCheck)};return createAPI({clear:clear,getActiveViewInstance:getActiveViewInstance,getChildLayoutById:getChildLayoutById,getChildLayoutByViewInstance:getChildLayoutByViewInstance,getController:getController,getId:getId,getLayoutPathToViewInstance:getLayoutPathToViewInstance,getName:getName,getRenderTree:getRenderTree,getRootView:getRootView,getSnapshot:getSnapshot,hasViewInstance:hasViewInstance})};const createError$3=createErrorFactory("tabs-navigation-layout.controller");const createInvalidTabError=(errorPrefix,uri)=>createError$3(`${errorPrefix}: There is no tab with URI "${uri}".`);class ConnectedTabsNavigationLayoutController{constructor(navigationPipeline,layoutId,layoutState){this.navigationPipeline=navigationPipeline;this.layoutId=layoutId;this.layoutState=layoutState;this.defaultTransition=()=>__awaiter(this,void 0,void 0,(function*(){console.warn("[tabs-layout.controller] Transitions are not configured")}));this.transitionsValue=null}get activeTab(){return this.layoutState.activeStackIndex}get activeStack(){return this.layoutState.activeStack.getController()}get id(){return this.layoutId}get tabs(){return this.layoutState.tabs.map(tab=>tab.uri)}get transitions(){return this.transitionsValue}set transitions(transitionsToSet){this.transitionsValue=transitionsToSet}select(targetURI){const errorPrefix="Could not change the active stack";const tabs=this.layoutState.tabs;const targetView=tabs.find(tab=>tab.uri===targetURI);if(!targetView){throw createInvalidTabError(errorPrefix,targetURI)}const targetViewId=targetView.id;const targetViewIndex=tabs.indexOf(targetView);if(targetViewIndex===this.layoutState.activeStackIndex){return Promise.resolve({status:exports.NavigationResultStatus.Complete})}const originViewInstanceId=this.layoutState.activeViewInstance;const updateStateFunction=()=>{this.layoutState.activeStackIndex=targetViewIndex;return this.layoutState.activeViewInstance};return this.navigationPipeline.performNavigation(originViewInstanceId,targetViewId,updateStateFunction,this.transitionFor("select"))}transitionFor(name){const{transitions:transitions}=this;return transitions?transitionContext=>transitions[name](transitionContext):this.defaultTransition}}const TABS_NAVIGATION_LAYOUT_NAME="TabsNavigationLayout";class ConnectedTabsNavigationLayoutRenderState{constructor(layoutId,layoutState){this.layoutId=layoutId;this.layoutState=layoutState}get renderTree(){const id=this.layoutId;const name=TABS_NAVIGATION_LAYOUT_NAME;const active=this.layoutState.activeStackIndex;const{stacks:stacks}=this.layoutState;const tree={active:active,stacks:stacks.map(childStack=>childStack.getRenderTree())};return{id:id,name:name,tree:tree}}}class ConnectedTabsNavigationLayoutState{constructor(stackNavigationLayoutFactory,tabsValue){this.stackNavigationLayoutFactory=stackNavigationLayoutFactory;this.tabsValue=tabsValue;this.stacksValue=this.tabsValue.map(tab=>this.stackNavigationLayoutFactory({},tab.id));this.activeStackIndexValue=0}get activeStack(){return this.stacks[this.activeStackIndex]}get activeStackIndex(){return this.activeStackIndexValue}set activeStackIndex(stackIndex){this.activeStackIndexValue=stackIndex}get activeViewInstance(){return this.activeStack.getActiveViewInstance()}get stacks(){return this.stacksValue}get tabs(){return[...this.tabsValue]}}const createTypeError$4=createTypeErrorFactory("tabs-navigation-layout");const createViewNotFoundByURIError$1=(errorPrefix,viewURI)=>createTypeError$4(`${errorPrefix}: Could not find the view by provided URI "${viewURI}". `+`Make sure you provide correct URIs in tabs`);const throwIfInvalidLayoutOptions$1=(errorPrefix,layoutOptions)=>{if(!isArray(layoutOptions.tabs)){throw createTypeError$4(`${errorPrefix}: The 'tabs' parameter is required. `+`Make sure you provide an array of tabs in the `+`'layoutOptions' when you add 'TabsNavigationLayout'`)}};const throwIfInvalidViewInstanceId$3=(errorPrefix,viewInstanceId)=>{const errors=validateViewInstanceId(viewInstanceId);if(errors.length>0){throw createTypeError$4(`${errorPrefix}: ${errors[0]}`)}};const makeTabsNavigationLayout=(navigationPipeline,stackNavigationLayoutFactory,viewRegistry)=>layoutOptions=>{const layoutErrorPrefix="Could not create a tabs layout";const tabsLayoutOptions=layoutOptions;throwIfInvalidLayoutOptions$1(layoutErrorPrefix,tabsLayoutOptions);const tabs=tabsLayoutOptions.tabs.map(viewURI=>{const view=viewRegistry.getViewByURI(viewURI);if(!view){throw createViewNotFoundByURIError$1(layoutErrorPrefix,viewURI)}return view});const layoutId=`tabs-layout-${generateUid()}`;const layoutState=new ConnectedTabsNavigationLayoutState(stackNavigationLayoutFactory,tabs);const layoutRenderState=new ConnectedTabsNavigationLayoutRenderState(layoutId,layoutState);const layoutController=new ConnectedTabsNavigationLayoutController(navigationPipeline,layoutId,layoutState);const getActiveViewInstance=()=>layoutState.activeViewInstance;const getController=()=>layoutController;const getId=()=>layoutId;const getLayoutPathToViewInstance=viewInstanceId=>{throwIfInvalidViewInstanceId$3("Could not get the path to the given view",viewInstanceId);const stackLayout=getChildLayoutByViewInstance(viewInstanceId);if(!stackLayout){return[]}return[layoutId,stackLayout.getId()]};const getName=()=>TABS_NAVIGATION_LAYOUT_NAME;const getChildLayoutById=id=>layoutState.stacks.find(childStack=>childStack.getId()===id)||null;const getChildLayoutByViewInstance=viewInstanceId=>layoutState.stacks.find(childStack=>childStack.hasViewInstance(viewInstanceId))||null;const getRenderTree=()=>layoutRenderState.renderTree;const hasViewInstance=viewInstanceId=>{throwIfInvalidViewInstanceId$3("Could not check if the stack has the view",viewInstanceId);return layoutState.stacks.some(childStack=>childStack.hasViewInstance(viewInstanceId))};return createAPI({getActiveViewInstance:getActiveViewInstance,getChildLayoutById:getChildLayoutById,getChildLayoutByViewInstance:getChildLayoutByViewInstance,getController:getController,getId:getId,getLayoutPathToViewInstance:getLayoutPathToViewInstance,getName:getName,getRenderTree:getRenderTree,hasViewInstance:hasViewInstance})};const createNavigationError=(navigationTypeName,message)=>{const createError=createErrorFactory(`navigation-type: ${navigationTypeName}`);return createError(`Could not perform navigation: ${message}`)};const CHANGE_ROOT_NAVIGATION_TYPE_NAME="change-root";const createNavigationTypeChangeRoot=(navigationState,viewRegistry)=>createAPI({name:CHANGE_ROOT_NAVIGATION_TYPE_NAME,navigate:(origin,target)=>{const supportedLayouts=[MENU_NAVIGATION_LAYOUT_NAME,TABS_NAVIGATION_LAYOUT_NAME];const pathToView=navigationState.getLayoutPathToViewInstance(origin);const tabsOrMenuLayout=pathToView.find(layout=>supportedLayouts.includes(layout.getName()));if(!tabsOrMenuLayout){throw createNavigationError(CHANGE_ROOT_NAVIGATION_TYPE_NAME,`There was an attempt to perform a "${CHANGE_ROOT_NAVIGATION_TYPE_NAME}" navigation in a layout `+`that doesn't support it. Make sure you use this navigation type `+`only with a menu navigation layout or a tabs navigation layout`)}const targetView=viewRegistry.getViewById(target);const targetURI=targetView.uri;return tabsOrMenuLayout.getController().select(targetURI)}});const MODAL_CLOSE_NAVIGATION_TYPE_NAME="modal-close";const createNavigationTypeModalClose=navigationState=>createAPI({name:MODAL_CLOSE_NAVIGATION_TYPE_NAME,navigate:origin=>{const targetLayout=navigationState.getLayoutByName(MODALS_NAVIGATION_LAYOUT_NAME);if(!targetLayout){throw createNavigationError(MODAL_CLOSE_NAVIGATION_TYPE_NAME,`Could not find the '${MODALS_NAVIGATION_LAYOUT_NAME}' layout. `+`Make sure you add this layout by calling `+`'navigationController.addLayout(MODALS_NAVIGATION_LAYOUT_NAME)'`)}const stackToDismiss=targetLayout.getChildLayoutByViewInstance(origin);if(!stackToDismiss){throw createNavigationError(MODAL_CLOSE_NAVIGATION_TYPE_NAME,`The target stack for the view "${origin}" was not found`)}return targetLayout.getController().dismiss(stackToDismiss.getId())}});const MODAL_OPEN_NAVIGATION_TYPE_NAME="modal-open";const createNavigationTypeModalOpen=(navigationState,viewRegistry)=>createAPI({name:MODAL_OPEN_NAVIGATION_TYPE_NAME,navigate:(origin,target)=>{const targetLayout=navigationState.getLayoutByName(MODALS_NAVIGATION_LAYOUT_NAME);if(!targetLayout){throw createNavigationError(MODAL_OPEN_NAVIGATION_TYPE_NAME,`Could not find the '${MODALS_NAVIGATION_LAYOUT_NAME}' layout. `+`Make sure you add this layout by calling `+`'navigationController.addLayout(MODALS_NAVIGATION_LAYOUT_NAME)'`)}const targetView=viewRegistry.getViewById(target);const targetURI=targetView.uri;return targetLayout.getController().open(origin,targetURI)}});const POP_NAVIGATION_TYPE_NAME="pop";const createNavigationTypePop=(navigationState,viewRegistry)=>createAPI({name:POP_NAVIGATION_TYPE_NAME,navigate:(origin,target)=>{const pathToView=navigationState.getLayoutPathToViewInstance(origin);const targetStackLayout=pathToView[pathToView.length-1];if(!targetStackLayout){throw createNavigationError(POP_NAVIGATION_TYPE_NAME,`There is no layout that contains the origin view: "${origin}"`)}if(targetStackLayout.getName()!==STACK_NAVIGATION_LAYOUT_NAME){throw createNavigationError(POP_NAVIGATION_TYPE_NAME,`There was an attempt to perform a "${POP_NAVIGATION_TYPE_NAME}" navigation in a layout `+`that doesn't support it. Make sure you use this navigation type `+`only with stack navigation layouts`)}const targetView=viewRegistry.getViewById(target);const targetURI=targetView.uri;return targetStackLayout.getController().back(targetURI)}});const PUSH_NAVIGATION_TYPE_NAME="push";const createNavigationTypePush=(navigationState,viewRegistry)=>createAPI({name:PUSH_NAVIGATION_TYPE_NAME,navigate:(origin,target)=>{const pathToView=navigationState.getLayoutPathToViewInstance(origin);const targetStackLayout=pathToView[pathToView.length-1];if(!targetStackLayout){throw createNavigationError(PUSH_NAVIGATION_TYPE_NAME,`There is no layout that contains the origin view: "${origin}"`)}if(targetStackLayout.getName()!==STACK_NAVIGATION_LAYOUT_NAME){throw createNavigationError(PUSH_NAVIGATION_TYPE_NAME,`There was an attempt to perform a "${PUSH_NAVIGATION_TYPE_NAME}" navigation in a layout `+`that doesn't support it. Make sure you use this navigation type `+`only with stack navigation layouts`)}const targetView=viewRegistry.getViewById(target);const targetURI=targetView.uri;return targetStackLayout.getController().forward(targetURI)}});const REPLACE_NAVIGATION_TYPE_NAME="replace";const createNavigationTypeReplace=(navigationState,viewRegistry)=>createAPI({name:REPLACE_NAVIGATION_TYPE_NAME,navigate:(origin,target)=>{const pathToView=navigationState.getLayoutPathToViewInstance(origin);const targetStackLayout=pathToView[pathToView.length-1];if(!targetStackLayout){throw createNavigationError(REPLACE_NAVIGATION_TYPE_NAME,`There is no layout that contains the origin view: "${origin}"`)}if(targetStackLayout.getName()!==STACK_NAVIGATION_LAYOUT_NAME){throw createNavigationError(REPLACE_NAVIGATION_TYPE_NAME,`There was an attempt to perform a "${REPLACE_NAVIGATION_TYPE_NAME}" navigation in a layout `+`that doesn't support it. Make sure you use this navigation type `+`only with stack navigation layouts`)}const targetView=viewRegistry.getViewById(target);const targetURI=targetView.uri;return targetStackLayout.getController().replace(targetURI)}});const ROOT_NAVIGATION_TYPE_NAME="root";const createNavigationTypeRoot=(navigationState,viewRegistry,viewInstanceRegistry)=>{const viewInstanceRegistryClient=viewInstanceRegistry.createClient("navigation-type-root");return createAPI({name:ROOT_NAVIGATION_TYPE_NAME,navigate:(origin,target)=>{const pathToView=navigationState.getLayoutPathToViewInstance(origin);const targetStackLayout=pathToView[pathToView.length-1];if(!targetStackLayout){throw createNavigationError(ROOT_NAVIGATION_TYPE_NAME,`There is no layout that contains the origin view: "${origin}"`)}if(targetStackLayout.getName()!==STACK_NAVIGATION_LAYOUT_NAME){throw createNavigationError(ROOT_NAVIGATION_TYPE_NAME,`There was an attempt to perform a "${ROOT_NAVIGATION_TYPE_NAME}" navigation in a layout `+`that doesn't support it. Make sure you use this navigation type `+`only with stack navigation layouts`)}const rootViewInstance=targetStackLayout.getRootView();const rootItem=viewInstanceRegistryClient.getViewIdByViewInstance(rootViewInstance);if(rootItem!==target){throw createNavigationError(ROOT_NAVIGATION_TYPE_NAME,`The target view must match the root view in the stack`)}return targetStackLayout.getController().toRoot()}})};const EVENT_NAVIGATION_LAYOUT_TREE_AFTER_LAYOUT_ADDED="NavigationLayoutTree.AfterLayoutAdded";const EVENT_NAVIGATION_PIPELINE_BEFORE_NAVIGATE="NavigationPipeline.BeforeNavigate";const EVENT_NAVIGATION_PIPELINE_AFTER_NAVIGATE="NavigationPipeline.AfterNavigate";const EVENT_NAVIGATION_PIPELINE_BEFORE_TRANSITION_START="NavigationPipeline.BeforeTransitionEnd";const EVENT_NAVIGATION_PIPELINE_AFTER_TRANSITION_END="NavigationPipeline.AfterTransitionEnd";var LifecycleEvent;(function(LifecycleEvent){LifecycleEvent["NavigationDidFinish"]="navigationDidFinish";LifecycleEvent["NavigationWillStart"]="navigationWillStart";LifecycleEvent["RenderTreeDidChange"]="renderTreeDidChange"})(LifecycleEvent||(LifecycleEvent={}));const createLifecycle=eventEmitter=>{const eventCallbacks={[LifecycleEvent.NavigationDidFinish]:[],[LifecycleEvent.NavigationWillStart]:[],[LifecycleEvent.RenderTreeDidChange]:[]};const navigationHooks=[];const dispatchLifecycleEvent=lifecycleEvent=>{eventCallbacks[lifecycleEvent].forEach(callback=>{callback()})};const bindEvents=()=>{eventEmitter.on(EVENT_NAVIGATION_LAYOUT_TREE_AFTER_LAYOUT_ADDED,()=>{dispatchLifecycleEvent(LifecycleEvent.RenderTreeDidChange)});eventEmitter.on(EVENT_NAVIGATION_PIPELINE_BEFORE_NAVIGATE,()=>{dispatchLifecycleEvent(LifecycleEvent.NavigationWillStart)});eventEmitter.on(EVENT_NAVIGATION_PIPELINE_AFTER_NAVIGATE,()=>{dispatchLifecycleEvent(LifecycleEvent.RenderTreeDidChange)});eventEmitter.on(EVENT_NAVIGATION_PIPELINE_AFTER_TRANSITION_END,()=>{dispatchLifecycleEvent(LifecycleEvent.RenderTreeDidChange);dispatchLifecycleEvent(LifecycleEvent.NavigationDidFinish)})};const canNavigate=navigationHook=>{navigationHooks.push(navigationHook)};const getNavigationHooks=()=>[...navigationHooks];const navigationDidFinish=callback=>{eventCallbacks[LifecycleEvent.NavigationDidFinish].push(callback)};const navigationWillStart=callback=>{eventCallbacks[LifecycleEvent.NavigationWillStart].push(callback)};const renderTreeDidChange=callback=>{eventCallbacks[LifecycleEvent.RenderTreeDidChange].push(callback)};bindEvents();return createAPI({canNavigate:canNavigate,getNavigationHooks:getNavigationHooks,navigationDidFinish:navigationDidFinish,navigationWillStart:navigationWillStart,renderTreeDidChange:renderTreeDidChange})};const createError$4=createErrorFactory("navigation-controller");const createNavigationTypeNotFoundError=(errorPrefix,navigationTypeName)=>createError$4(`${errorPrefix}: The navigation type "${navigationTypeName}" is not supported. `+`Make sure you use one of the supported navigation types`);const createNavigationNotPossibleError=(errorPrefix,origin,target,possibleNavigationTargets)=>{const possibleTargets=possibleNavigationTargets.map(targetURI=>`  - ${targetURI}`).join("\n");const possibleTargetsMessage=possibleNavigationTargets.length>0?`\n\nPossible targets for the view instance "${origin}" are:\n\n${possibleTargets}\n\n`:`There are no possible targets for view "${origin}". `;return createError$4(`${errorPrefix}: There is no registered navigation `+`to view "${target}" from the view "${origin}". `+`${possibleTargetsMessage}`+`Please make sure you have configured possible targets for this view in the portal model.\n`)};const createOriginViewNotFoundError=(errorPrefix,viewInstanceId)=>createError$4(`${errorPrefix}: There are no views associated with the given view instance: "${viewInstanceId}"`);const createTargetViewNotFoundError=(errorPrefix,targetURI)=>createError$4(`${errorPrefix}: There is no target view for: ${targetURI}`);const throwIfNavigationAlreadyStarted=(errorPrefix,navigationStartedFlag)=>{if(navigationStartedFlag){throw createError$4(`${errorPrefix}: Navigation has already started`)}};const throwIfNoLayouts=(errorPrefix,layouts)=>{if(!layouts.length){throw createError$4(`${errorPrefix}: The application shell must use at least one layout. `+`Make sure you add a layout by calling 'navigationController.addLayout()' `+`before starting navigation.`)}};const createNavigationController=dependencies=>{const{navigationEvents:navigationEvents,navigationGraph:navigationGraph,navigationPipeline:navigationPipeline,navigationState:navigationState,navigationTypeRegistry:navigationTypeRegistry,viewInstanceRegistry:viewInstanceRegistry,viewRegistry:viewRegistry}=dependencies;const viewInstanceRegistryClient=viewInstanceRegistry.createClient("navigation-controller");let navigationStartedFlag=false;const getOriginViewOrThrow=(originViewInstanceId,errorPrefix)=>{const originViewId=viewInstanceRegistryClient.getViewIdByViewInstance(originViewInstanceId);if(!originViewId){throw createOriginViewNotFoundError(errorPrefix,originViewInstanceId)}return originViewId};const getTargetViewOrThrow=(targetURI,errorPrefix)=>{const targetView=viewRegistry.getViewByURI(targetURI);if(!targetView){throw createTargetViewNotFoundError(errorPrefix,targetURI)}return targetView};const getNavigationTypeOrThrow=(origin,target,errorPrefix)=>{const navigationTypeName=navigationGraph.getNavigationType(origin,target);if(navigationTypeName===null){const possibleNavigationTargets=navigationGraph.getPossibleTargets(origin);throw createNavigationNotPossibleError(errorPrefix,origin,target,possibleNavigationTargets)}const navigationType=navigationTypeRegistry.getNavigationTypeByName(navigationTypeName);if(!navigationType){throw createNavigationTypeNotFoundError(errorPrefix,navigationTypeName)}return navigationType};const navigateToView=(originViewInstanceId,targetViewId)=>{const errorPrefix="Could not perform navigation";const originViewId=getOriginViewOrThrow(originViewInstanceId,errorPrefix);const navigationType=getNavigationTypeOrThrow(originViewId,targetViewId,errorPrefix);return navigationType.navigate(originViewInstanceId,targetViewId)};const navigate=(origin,targetURI)=>{const errorPrefix="Could not perform navigation";const originViewInstanceId=toViewInstanceId(origin);const targetView=getTargetViewOrThrow(targetURI,errorPrefix);const targetViewId=targetView.id;return navigateToView(originViewInstanceId,targetViewId)};const startNavigation=()=>{const errorPrefix="Could not start navigation";const layouts=navigationState.getTopLevelLayouts();throwIfNavigationAlreadyStarted(errorPrefix,navigationStartedFlag);throwIfNoLayouts(errorPrefix,layouts);navigationEvents.initEvents(navigationGraph.getNavigations(),(originViewInstanceId,targetViewId)=>{navigateToView(originViewInstanceId,targetViewId)});const initialViewInstanceId=navigationState.getActiveViewInstance();const activeStack=navigationState.getActiveLayout();const initialTransition=transitionContext=>__awaiter(undefined,void 0,void 0,(function*(){const transitions=activeStack.getController().transitions;if(transitions){return transitions.initial(transitionContext)}}));navigationStartedFlag=true;return navigationPipeline.performInitialNavigation(initialViewInstanceId,initialTransition)};return createAPI({navigate:navigate,startNavigation:startNavigation})};const createTypeError$5=createTypeErrorFactory("view");const throwIfInvalidViewId=(errorPrefix,viewId)=>{const errors=validateViewId(viewId);if(errors.length){throw createTypeError$5(`${errorPrefix}: ${errors[0]}`)}};const throwIfInvalidViewURI=(errorPrefix,viewURI,viewId)=>{const errors=validateViewURI(viewURI,viewId);if(errors.length){throw createTypeError$5(`${errorPrefix}: ${errors[0]}`)}};const toViewId=viewId=>viewId;const createView=(id,title,uri)=>{const errorPrefix="Could not create a view";throwIfInvalidViewId(errorPrefix,id);throwIfInvalidViewURI(errorPrefix,uri,id);uri=uri.trim();if(!uri.length){console.warn(`[hsdk-app-shell] Invalid view configuration: Expected view "${id}" to have a URI of at least one character. `+"Make sure that all views have a unique URI property")}if(uri.startsWith("?")){console.warn(`[hsdk-app-shell] Invalid view configuration: The URI of view "${id}" starts with a "?".`+`A view URI can't start with a "?"`)}return{id:toViewId(id),title:title.trim(),uri:uri.split("?")[0]}};const createError$5=createErrorFactory("navigation-events");const throwIfInvalidNavigationEvent=(errorPrefix,eventName,eventPayload)=>{if(!eventPayload){throw createError$5(`${errorPrefix}: Event payload for the "${eventName}" navigation event is missing`)}if(!eventPayload.origin){throw createError$5(`${errorPrefix}: The 'origin' property is missing in `+`the payload of the "${eventName}" navigation event`)}if(validateViewInstanceId(eventPayload.origin).length){throw createError$5(`${errorPrefix}: The origin "${eventPayload.origin}" must be a valid view instance id`)}};const createNavigationEvents=pubsub=>{const initEvents=(navigations,callback)=>{navigations.filter(navigation=>navigation.event).forEach(navigation=>{const navigationEvent=navigation.event;const target=toViewId(navigation.target);const listener=eventPayload=>{throwIfInvalidNavigationEvent("Could not handle a navigation event",navigationEvent,eventPayload);const navigationEventPayload=eventPayload;const origin=navigationEventPayload.origin;callback(origin,target)};pubsub.subscribe(navigationEvent,listener)})};return{initEvents:initEvents}};const createError$6=createErrorFactory("navigation-graph");const createOriginViewNotFoundError$1=(errorPrefix,viewId)=>createError$6(`${errorPrefix}: The origin view with id "${viewId}" was not found. `+`Make sure this view is added to the application shell first.`);const createNavigationGraph=viewRegistry=>{const navigations=new Map;const getNavigationType=(origin,target)=>{const navigationFromOrigin=navigations.get(toViewId(origin));if(!navigationFromOrigin){return null}const matchingNavigation=navigationFromOrigin.find(navigation=>navigation.origin===origin&&navigation.target===target);return matchingNavigation?matchingNavigation.type:null};const getPossibleTargets=origin=>{const navigationsFromOrigin=navigations.get(toViewId(origin));if(!navigationsFromOrigin){return[]}return navigationsFromOrigin.filter(navigation=>navigation.origin===origin).map(navigation=>navigation.target)};const getNavigations=()=>{const result=[];navigations.forEach(navigationsFromOrigin=>{result.push(...navigationsFromOrigin)});return result};const registerNavigation=(originViewId,targetURI,type,event)=>{const errorPrefix="Could not register navigation";const origin=toViewId(originViewId);if(!viewRegistry.hasView(origin)){throw createOriginViewNotFoundError$1(errorPrefix,origin)}const targetView=viewRegistry.getViewByURI(targetURI);if(!targetView){console.warn(`[navigation-graph] Skipped invalid navigation configuration: Could not find a target view with `+`URI "${targetURI}". Make sure that the target URI matches `+`with the URI of one of the views.`);return}const target=targetView.id;event=event||null;const newNavigation={event:event,origin:origin,target:target,type:type};if(navigations.has(origin)){const navigationsFromOrigin=navigations.get(origin);const existingNavigation=navigationsFromOrigin.find(navigation=>navigation.target===target);if(existingNavigation){Object.assign(existingNavigation,newNavigation)}else{navigationsFromOrigin.push(newNavigation)}}else{navigations.set(origin,[newNavigation])}};return createAPI({getNavigationType:getNavigationType,getNavigations:getNavigations,getPossibleTargets:getPossibleTargets,registerNavigation:registerNavigation})};const createNavigationHistory=(navigationState,nativeBackButtonPlugin)=>{const navigateBack=()=>{const activeLayout=navigationState.getActiveLayout();const activeLayoutController=activeLayout.getController();activeLayoutController.canGoBack()?activeLayoutController.back():nativeBackButtonPlugin.performNativeBack()};if(nativeBackButtonPlugin){try{nativeBackButtonPlugin.enable(()=>{navigateBack()})}catch(error){console.warn(`[application-shell] Could not initialize navigation history. `+`The 'BackButton.enable()' call has failed with the following error: `+`${error.message}`)}}};const createError$7=createErrorFactory("navigation-layout-registry");const throwIfInvalidLayoutName=(errorPrefix,layoutName)=>{if(!isString(layoutName)){throw createError$7(`${errorPrefix}: Layout name must be a string`)}if(!layoutName){throw createError$7(`${errorPrefix}: Layout name cannot be an empty string`)}};const throwIfInvalidLayoutFactory=(errorPrefix,layoutFactory)=>{if(!isFunction(layoutFactory)){throw createError$7(`${errorPrefix}: The \`layoutFactory\` parameter must be a function`)}};const throwIfAlreadyRegistered=(errorPrefix,layoutName,registry)=>{if(registry.has(layoutName)){throw createError$7(`${errorPrefix}: There is already registered layout with name ${layoutName}`)}};const createNavigationLayoutRegistry=()=>{const registry=new Map;const getLayoutFactory=layoutName=>{const errorPrefix="Could not find a layout";throwIfInvalidLayoutName(errorPrefix,layoutName);return registry.get(layoutName)||null};const getLayoutNameList=()=>Array.from(registry.keys());const registerLayoutFactory=(layoutName,layoutFactory)=>{const errorPrefix="Could not register layout";throwIfInvalidLayoutName(errorPrefix,layoutName);throwIfInvalidLayoutFactory(errorPrefix,layoutFactory);throwIfAlreadyRegistered(errorPrefix,layoutName,registry);registry.set(layoutName,layoutFactory)};return createAPI({getLayoutFactory:getLayoutFactory,getLayoutNameList:getLayoutNameList,registerLayoutFactory:registerLayoutFactory})};const createError$8=createErrorFactory("navigation-layout-tree");const throwIfLayoutNotFound=(errorPrefix,layout,layoutId)=>{if(!layout){throw createError$8(`${errorPrefix}: There is no layout with id "${layoutId}". `+`Make sure you pass the id of an existing layout.`)}};const throwIfUnknownLayout=(errorPrefix,layoutName,layout,registeredLayouts)=>{if(!layout){const layouts=registeredLayouts.join(", ");throw createError$8(`${errorPrefix}: There is no registered layout with name '${layoutName}'. `+`Please use one of the following layouts: ${layouts}`)}};const createNavigationLayoutTree=(eventEmitter,navigationLayoutRegistry,navigationState)=>{const createLayoutInstance=(layoutFactory,layoutOptions)=>layoutFactory(layoutOptions);const addLayout=(layoutName,layoutOptions)=>{const errorPrefix="Could not use layout";const layoutFactory=navigationLayoutRegistry.getLayoutFactory(layoutName);const availableLayouts=navigationLayoutRegistry.getLayoutNameList();throwIfUnknownLayout(errorPrefix,layoutName,layoutFactory,availableLayouts);const layout=createLayoutInstance(layoutFactory,layoutOptions);navigationState.addLayout(layout);eventEmitter.emit(EVENT_NAVIGATION_LAYOUT_TREE_AFTER_LAYOUT_ADDED,{});return layout.getController()};const getLayoutController=layoutId=>{const layout=navigationState.getLayoutById(layoutId);throwIfLayoutNotFound("Could not get a layout controller",layout,layoutId);return layout.getController()};return createAPI({addLayout:addLayout,getLayoutController:getLayoutController})};const toPromise=value=>Promise.resolve(value);const awaitTimeout=timeout=>new Promise(resolve=>{setTimeout(resolve,timeout)});const createError$9=createErrorFactory("navigation-pipeline");const createTypeError$6=createTypeErrorFactory("navigation-pipeline");const createViewIdNotFoundError=(errorPrefix,viewInstanceId)=>createError$9(`${errorPrefix}: Could not find the view id for view instance "${viewInstanceId}".`);const createViewNotFoundError=(errorPrefix,viewId)=>createError$9(`${errorPrefix}: There is no registered view with id "${viewId}".`);const throwFailedTransitionError=(errorPrefix,error)=>{throw createError$9(`${errorPrefix}: Transition failed with the following error: \n\n${error}`)};const throwIfInvalidNavigateFunction=(errorPrefix,updateNavigationStateFunction)=>{if(!isFunction(updateNavigationStateFunction)){throw createTypeError$6(`${errorPrefix}: The first parameter 'navigate' must be of type function`)}};const throwIfInvalidViewInstanceId$4=(errorPrefix,viewInstanceId)=>{const errors=validateViewInstanceId(viewInstanceId);if(errors.length>0){throw createTypeError$6(`${errorPrefix}: ${errors[0]}`)}};const createNavigationPipeline=(eventEmitter,lifecycle,navigationState,renderingStatusController,viewInstanceRegistry,viewRegistry)=>{const viewInstanceRegistryClient=viewInstanceRegistry.createClient("navigation-pipeline");let navigationInProgressFlag=false;const getViewByViewIdOrThrow=(errorPrefix,viewId)=>{const view=viewRegistry.getViewById(viewId);if(!view){throw createViewNotFoundError(errorPrefix,viewId)}return view};const getViewByViewInstanceIdOrThrow=(errorPrefix,viewInstanceId)=>{const viewId=viewInstanceRegistryClient.getViewIdByViewInstance(viewInstanceId);if(!viewId){throw createViewIdNotFoundError(errorPrefix,viewInstanceId)}return getViewByViewIdOrThrow(errorPrefix,viewId)};const ifNoActiveNavigation=navigationFn=>new Promise(resolve=>{if(navigationInProgressFlag){console.debug("[navigation-controller] Ignore navigation intent: "+"The previous navigation has not finished yet");resolve();return}resolve(navigationFn())});const progressToEvent=progress=>{if(progress===NavigationProgress.BeforeNavigate){return EVENT_NAVIGATION_PIPELINE_BEFORE_NAVIGATE}if(progress===NavigationProgress.AfterNavigate){return EVENT_NAVIGATION_PIPELINE_AFTER_NAVIGATE}if(progress===NavigationProgress.BeforeTransitionStart){return EVENT_NAVIGATION_PIPELINE_BEFORE_TRANSITION_START}return EVENT_NAVIGATION_PIPELINE_AFTER_TRANSITION_END};const publishProgressEvent=(progress,originViewInstance,targetViewInstance)=>eventEmitter.emit(progressToEvent(progress),{originViewInstance:originViewInstance,progress:progress,targetViewInstance:targetViewInstance});const updateNavigationState=updateNavigationStateFunction=>{const targetViewInstance=updateNavigationStateFunction();return targetViewInstance||navigationState.getActiveViewInstance()};const performInitialNavigation=(target,initialTransition)=>renderingStatusController.whenViewInstanceReady(target).then(()=>toPromise(initialTransition({target:target})));const performNavigation=(originViewInstanceId,targetViewId,updateNavigationStateFunction,transition)=>ifNoActiveNavigation(()=>__awaiter(undefined,void 0,void 0,(function*(){const errorPrefix="Could not perform navigation";throwIfInvalidViewInstanceId$4(errorPrefix,originViewInstanceId);throwIfInvalidNavigateFunction(errorPrefix,updateNavigationStateFunction);const originView=getViewByViewInstanceIdOrThrow(errorPrefix,originViewInstanceId);const targetView=targetViewId?getViewByViewIdOrThrow(errorPrefix,targetViewId):null;const navigationLifecycleHooks=lifecycle.getNavigationHooks();for(const navigationLifecycleHook of navigationLifecycleHooks){const canNavigate=Boolean(yield navigationLifecycleHook({originURI:originView.uri,targetURI:targetView?targetView.uri:null}));if(!canNavigate){return{status:exports.NavigationResultStatus.Canceled}}}viewInstanceRegistryClient.retainView(originViewInstanceId);navigationInProgressFlag=true;publishProgressEvent(NavigationProgress.BeforeNavigate,originViewInstanceId,null);const targetViewInstanceId=updateNavigationState(updateNavigationStateFunction);viewInstanceRegistryClient.retainView(targetViewInstanceId);publishProgressEvent(NavigationProgress.AfterNavigate,originViewInstanceId,targetViewInstanceId);publishProgressEvent(NavigationProgress.BeforeTransitionStart,originViewInstanceId,targetViewInstanceId);yield renderingStatusController.whenViewInstanceReady(targetViewInstanceId);yield awaitTimeout(0);try{yield toPromise(transition({origin:originViewInstanceId,target:targetViewInstanceId}));navigationInProgressFlag=false;viewInstanceRegistryClient.releaseView(originViewInstanceId);viewInstanceRegistryClient.releaseView(targetViewInstanceId);viewInstanceRegistryClient.cleanUp();publishProgressEvent(NavigationProgress.AfterTransitionEnd,originViewInstanceId,targetViewInstanceId)}catch(error){navigationInProgressFlag=false;publishProgressEvent(NavigationProgress.AfterTransitionEnd,originViewInstanceId,targetViewInstanceId);throwFailedTransitionError(errorPrefix,error)}return{status:exports.NavigationResultStatus.Complete}})));return createAPI({performInitialNavigation:performInitialNavigation,performNavigation:performNavigation})};const createError$a=createErrorFactory("navigation-state");const createTypeError$7=createTypeErrorFactory("navigation-state");const throwIfDuplicatedLayout=(errorPrefix,layoutToAdd,layouts)=>{const layoutName=layoutToAdd.getName();const alreadyAdded=Boolean(layouts.find(layout=>layout.getName()===layoutName));if(alreadyAdded){throw createError$a(`${errorPrefix}: The '${layoutName}' layout was already added`)}};const throwIfInvalidLayoutId=(errorPrefix,layoutId)=>{if(!isString(layoutId)||!layoutId.trim().length){throw createError$a(`${errorPrefix}: The given parameter "${layoutId}" is invalid layout id`)}};const throwIfInvalidViewInstanceId$5=(errorPrefix,viewInstanceId)=>{const errors=validateViewInstanceId(viewInstanceId);if(errors.length>0){throw createTypeError$7(`${errorPrefix}: ${errors[0]}`)}};const createNavigationState=()=>{const layouts=[];const addLayout=layout=>{const errorPrefix="Could not add a layout";throwIfDuplicatedLayout(errorPrefix,layout,layouts);layouts.push(layout)};const getActiveLayout=()=>{let index=layouts.length;while(index--){const layout=layouts[index];const activeViewInstance=layout.getActiveViewInstance();if(activeViewInstance){return layout.getChildLayoutByViewInstance(activeViewInstance)}}return null};const getActiveViewInstance=()=>{let index=layouts.length;while(index--){const layout=layouts[index];const activeViewInstance=layout.getActiveViewInstance();if(activeViewInstance){return activeViewInstance}}return null};const getLayoutById=layoutId=>{throwIfInvalidLayoutId("Could not get a layout by id",layoutId);let index=layouts.length;while(index--){const layout=layouts[index];if(layout.getId()===layoutId){return layout}const childLayout=layout.getChildLayoutById(layoutId);if(childLayout){return childLayout}}return null};const getLayoutByName=layoutName=>layouts.find(layout=>layout.getName()===layoutName)||null;const getLayoutPathToViewInstance=viewInstanceId=>{throwIfInvalidViewInstanceId$5("Could not find a layout path to the given view",viewInstanceId);const pathToViewInstance=[];let index=layouts.length;while(index--){const layout=layouts[index];if(layout.hasViewInstance(viewInstanceId)){const path=layout.getLayoutPathToViewInstance(viewInstanceId);pathToViewInstance.push(layout.getId(),...path)}}return pathToViewInstance.map(layoutId=>getLayoutById(layoutId))};const getTopLevelLayouts=()=>[...layouts];const getRenderTree=()=>{const trees=layouts.map(layout=>layout.getRenderTree());return{layouts:trees}};const getRootLayout=()=>layouts[0]||null;return createAPI({addLayout:addLayout,getActiveLayout:getActiveLayout,getActiveViewInstance:getActiveViewInstance,getLayoutById:getLayoutById,getLayoutByName:getLayoutByName,getLayoutPathToViewInstance:getLayoutPathToViewInstance,getRenderTree:getRenderTree,getRootLayout:getRootLayout,getTopLevelLayouts:getTopLevelLayouts})};const validateNavigationTypeName=navigationTypeName=>{if(!isString(navigationTypeName)){return[`Expected the navigation type `+`to be of type string, but "${navigationTypeName}" was given`]}if(navigationTypeName.trim().length===0){return["Expected the navigation type to be a string of at least one character"]}return[]};const validateNavigationTypeFunction=navigationTypeFunction=>{if(!isFunction(navigationTypeFunction)){return[`Expected the navigation type function to be a function, `+`but '${navigationTypeFunction}' was given`]}return[]};const createError$b=createErrorFactory("navigation-type-registry");const createTypeError$8=createTypeErrorFactory("navigation-type-registry");const throwIfInvalidNavigationType=(errorPrefix,navigationType)=>{const nameValidationErrors=validateNavigationTypeName(navigationType.name);const functionValidationErrors=validateNavigationTypeFunction(navigationType.navigate);if(nameValidationErrors.length>0){throw createTypeError$8(`${errorPrefix}: ${nameValidationErrors[0]}`)}if(functionValidationErrors.length>0){throw createTypeError$8(`${errorPrefix}: ${functionValidationErrors[0]}`)}};const throwIfAlreadyRegistered$1=(errorPrefix,records,navigationType)=>{if(records.has(navigationType.name)){throw createError$b(`${errorPrefix}: `+`There is already a navigation type function `+`registered with the name "'${navigationType.name}'"`)}};const createNavigationTypeRegistry=()=>{const records=new Map;const getNavigationTypeByName=name=>{const navigationType=records.get(name);if(!navigationType){return null}return navigationType};const registerNavigationType=navigationType=>{const errorPrefix="Could not register a navigation type";throwIfInvalidNavigationType(errorPrefix,navigationType);throwIfAlreadyRegistered$1(errorPrefix,records,navigationType);const{name:name,navigate:navigate}=navigationType;records.set(navigationType.name,{name:name,navigate:navigate})};return createAPI({getNavigationTypeByName:getNavigationTypeByName,registerNavigationType:registerNavigationType})};const createError$c=createErrorFactory("root-navigation");const throwIfTargetNotFound=(errorPrefix,targetView,link)=>{if(!targetView){throw createError$c(`${errorPrefix}: No view with uri="${link.target}" was found`)}};const createRootNavigation=viewRegistry=>{const rootNavigationLinks=[];const addRootNavigationLink=link=>{const targetView=viewRegistry.getViewByURI(link.target);throwIfTargetNotFound("Could not add the root navigation link",targetView,link);rootNavigationLinks.push(link)};const getRootNavigationLinks=()=>[...rootNavigationLinks];return createAPI({addRootNavigationLink:addRootNavigationLink,getRootNavigationLinks:getRootNavigationLinks})};const createRenderTree=navigationState=>{const getRenderTree=()=>navigationState.getRenderTree();return createAPI({getRenderTree:getRenderTree})};const createError$d=createErrorFactory("rendering-status-controller");const throwIfInvalidViewInstanceId$6=(errorPrefix,viewInstanceId)=>{if(!isString(viewInstanceId)){throw createError$d(`${errorPrefix}: The view reference must be a string`)}if(!viewInstanceId){throw createError$d(`${errorPrefix}: The view reference cannot be an empty string`)}};const throwIfViewInstanceNotFound=(errorPrefix,viewInstanceId,hasViewInstance)=>{if(!hasViewInstance){throw createError$d(`${errorPrefix}: There is no registered view "${viewInstanceId}" in the registry`)}};const VIEW_INSTANCE_READY_EVENT="ViewInstanceRegistry.ViewInstanceReady";const createRenderingStatusController=viewInstanceRegistry=>{const eventEmitter=createEventEmitter("rendering-status-controller");const viewInstanceRegistryClient=viewInstanceRegistry.createClient("rendering-status-controller");const registry=new Map;const getOrCreateRecord=viewInstanceId=>{if(!registry.has(viewInstanceId)){registry.set(viewInstanceId,{id:viewInstanceId,rendered:false})}return registry.get(viewInstanceId)};const setViewInstanceReady=id=>{const viewInstanceId=toViewInstanceId(id);const errorPrefix="Could not set the view ready";throwIfInvalidViewInstanceId$6(errorPrefix,viewInstanceId);throwIfViewInstanceNotFound(errorPrefix,viewInstanceId,viewInstanceRegistryClient.hasViewInstance(viewInstanceId));const record=getOrCreateRecord(viewInstanceId);if(!record.rendered){record.rendered=true;eventEmitter.emit(VIEW_INSTANCE_READY_EVENT,{viewInstanceId:viewInstanceId})}};const whenViewInstanceReady=id=>new Promise(resolve=>{const errorPrefix="Operation failed";const viewInstanceId=toViewInstanceId(id);throwIfInvalidViewInstanceId$6(errorPrefix,viewInstanceId);throwIfViewInstanceNotFound(errorPrefix,viewInstanceId,viewInstanceRegistryClient.hasViewInstance(viewInstanceId));const record=registry.get(viewInstanceId);if(record&&record.rendered){resolve();return}const viewReadyListener=payload=>{if(viewInstanceId===payload.viewInstanceId){eventEmitter.off(VIEW_INSTANCE_READY_EVENT,viewReadyListener);resolve()}};eventEmitter.on(VIEW_INSTANCE_READY_EVENT,viewReadyListener)});return createAPI({setViewInstanceReady:setViewInstanceReady,whenViewInstanceReady:whenViewInstanceReady})};const EVENT_VIEW_REGISTRY_VIEW_DELETED="ViewInstanceRegistry.ViewDeleted";const createError$e=createErrorFactory("view-instance-registry-client");const throwIfInvalidViewInstanceId$7=(errorPrefix,viewInstanceId)=>{if(!isString(viewInstanceId)){throw createError$e(`${errorPrefix}: The view reference must be a string`)}if(!viewInstanceId){throw createError$e(`${errorPrefix}: The view reference cannot be an empty string`)}};const throwIfInvalidViewId$1=(errorPrefix,viewId)=>{if(!isString(viewId)){throw createError$e(`${errorPrefix}: The view reference must be a string`)}if(!viewId){throw createError$e(`${errorPrefix}: The view reference cannot be an empty string`)}};const throwIfViewNotFound=(errorPrefix,viewInstanceId,viewInstanceRegistryRecord)=>{if(!viewInstanceRegistryRecord){throw createError$e(`${errorPrefix}: There is no registered view \`${viewInstanceId}\` in the registry`)}};const makeViewInstanceRegistryClient=(eventEmitter,registry)=>clientName=>{const clientId=`${clientName}-${generateUid()}`;const cleanUp=()=>{let hasDeletedViews=false;registry.forEach((record,key)=>{if(record.references.length===0){registry.delete(key);hasDeletedViews=true}});if(hasDeletedViews){eventEmitter.emit(EVENT_VIEW_REGISTRY_VIEW_DELETED,{})}};const createViewInstance=viewId=>{const errorPrefix="Could not register the given view";throwIfInvalidViewId$1(errorPrefix,viewId);const viewInstanceId=toViewInstanceId(`view-${viewId}-${generateUid()}`);registry.set(viewInstanceId,{references:[clientId],viewId:viewId,viewInstanceId:viewInstanceId});return viewInstanceId};const getViewIdByViewInstance=viewInstanceId=>{const errorPrefix="Could not find the view for the given view";throwIfInvalidViewInstanceId$7(errorPrefix,viewInstanceId);const record=registry.get(toViewInstanceId(viewInstanceId));return record?record.viewId:null};const hasViewInstance=viewInstanceId=>registry.has(viewInstanceId);const off=(eventName,listener)=>{eventEmitter.off(eventName,listener)};const on=(eventName,listener)=>{eventEmitter.on(eventName,listener)};const releaseView=viewInstanceId=>{const errorPrefix="Could not find the view for the given view";throwIfInvalidViewInstanceId$7(errorPrefix,viewInstanceId);const viewInstanceRegistryRecord=registry.get(toViewInstanceId(viewInstanceId));if(viewInstanceRegistryRecord){const references=viewInstanceRegistryRecord.references;const index=references.indexOf(clientId);if(index!==-1){references.splice(index,1)}}};const retainView=viewInstanceId=>{const errorPrefix=`Could not retain the view`;throwIfInvalidViewInstanceId$7(errorPrefix,viewInstanceId);const viewInstanceRegistryRecord=registry.get(viewInstanceId);throwIfViewNotFound(errorPrefix,viewInstanceId,viewInstanceRegistryRecord);const viewInstanceRegistryRecordIds=viewInstanceRegistryRecord.references;if(!viewInstanceRegistryRecordIds.includes(clientId)){viewInstanceRegistryRecordIds.push(clientId)}};return createAPI({cleanUp:cleanUp,createViewInstance:createViewInstance,getViewIdByViewInstance:getViewIdByViewInstance,hasViewInstance:hasViewInstance,off:off,on:on,releaseView:releaseView,retainView:retainView})};const createViewInstanceRegistry=()=>{const eventEmitter=createEventEmitter("view-instance-registry-client");const registry=new Map;const createClient=makeViewInstanceRegistryClient(eventEmitter,registry);return createAPI({createClient:createClient})};const createViewRegistry=()=>{const viewList=[];const containsById=contains("id");const containsByURI=contains("uri");const indexById=new Map;const indexByURI=new Map;const addView=(id,title,uri)=>{const view=createView(id,title,uri);if(containsById(viewList,view)){console.warn(`[view-registry] Could not add the view with id "${view.id}". `+"A view with this id was already added.");return}if(view.uri&&containsByURI(viewList,view)){console.warn(`[view-registry] Did not add view with URI "${view.uri}" to the view registry.`+"A view with this URI was already added.");return}viewList.push(view);indexById.set(view.id,view);if(view.uri){indexByURI.set(view.uri,view)}};const getViewById=viewId=>indexById.get(viewId)||null;const getViewByURI=viewURI=>indexByURI.get(viewURI)||null;const hasView=viewId=>indexById.has(viewId);return createAPI({addView:addView,getViewById:getViewById,getViewByURI:getViewByURI,hasView:hasView})};const createTypeError$9=createTypeErrorFactory("application-shell");const throwIfInvalidDependencies=(errorPrefix,dependencies)=>{if(!dependencies.pubsub){throw createTypeError$9(`${errorPrefix}: Provided dependencies are invalid: `+`pubsub should be provided as a dependency`)}};const throwIfInvalidViews=(errorPrefix,views)=>{if(!Array.isArray(views)){throw createTypeError$9(`Expected the views to be an array, but got "${typeof views}" instead`)}};const createApplicationShell=(views,rootNavigationLinks,services)=>{const errorPrefix="Could not create application shell";throwIfInvalidViews(errorPrefix,views);throwIfInvalidDependencies(errorPrefix,services);const{plugins:plugins,pubsub:pubsub}=services;const nativeBackButtonPlugin=plugins.BackButton;const viewRegistry=createViewRegistry();const viewInstanceRegistry=createViewInstanceRegistry();views.forEach(({id:id,title:title,uri:uri})=>{viewRegistry.addView(id,title,uri)});const navigationTypeRegistry=createNavigationTypeRegistry();const rootNavigation=createRootNavigation(viewRegistry);rootNavigationLinks.forEach(link=>rootNavigation.addRootNavigationLink(link));const navigationGraph=createNavigationGraph(viewRegistry);const navigationEvents=createNavigationEvents(pubsub);const navigationLayoutRegistry=createNavigationLayoutRegistry();const navigationState=createNavigationState();const lifecycleEventEmitter=createEventEmitter("lifecycle");const lifecycle=createLifecycle(lifecycleEventEmitter);const navigationLayoutTree=createNavigationLayoutTree(lifecycleEventEmitter,navigationLayoutRegistry,navigationState);const renderingStatusController=createRenderingStatusController(viewInstanceRegistry);const navigationPipeline=createNavigationPipeline(lifecycleEventEmitter,lifecycle,navigationState,renderingStatusController,viewInstanceRegistry,viewRegistry);const stackNavigationLayoutFactory=makeStackNavigationLayout(navigationPipeline,viewRegistry,viewInstanceRegistry);const menuNavigationLayoutFactory=makeMenuNavigationLayout(navigationPipeline,stackNavigationLayoutFactory,viewRegistry);const tabsNavigationLayoutFactory=makeTabsNavigationLayout(navigationPipeline,stackNavigationLayoutFactory,viewRegistry);const modalsNavigationLayoutFactory=makeModalsNavigationLayout(navigationPipeline,stackNavigationLayoutFactory,viewRegistry);navigationLayoutRegistry.registerLayoutFactory(STACK_NAVIGATION_LAYOUT_NAME,stackNavigationLayoutFactory);navigationLayoutRegistry.registerLayoutFactory(MENU_NAVIGATION_LAYOUT_NAME,menuNavigationLayoutFactory);navigationLayoutRegistry.registerLayoutFactory(TABS_NAVIGATION_LAYOUT_NAME,tabsNavigationLayoutFactory);navigationLayoutRegistry.registerLayoutFactory(MODALS_NAVIGATION_LAYOUT_NAME,modalsNavigationLayoutFactory);navigationTypeRegistry.registerNavigationType(createNavigationTypeChangeRoot(navigationState,viewRegistry));navigationTypeRegistry.registerNavigationType(createNavigationTypeModalClose(navigationState));navigationTypeRegistry.registerNavigationType(createNavigationTypeModalOpen(navigationState,viewRegistry));navigationTypeRegistry.registerNavigationType(createNavigationTypePop(navigationState,viewRegistry));navigationTypeRegistry.registerNavigationType(createNavigationTypePush(navigationState,viewRegistry));navigationTypeRegistry.registerNavigationType(createNavigationTypeReplace(navigationState,viewRegistry));navigationTypeRegistry.registerNavigationType(createNavigationTypeRoot(navigationState,viewRegistry,viewInstanceRegistry));const renderTree=createRenderTree(navigationState);const navigationController=createNavigationController({navigationEvents:navigationEvents,navigationGraph:navigationGraph,navigationPipeline:navigationPipeline,navigationState:navigationState,navigationTypeRegistry:navigationTypeRegistry,viewInstanceRegistry:viewInstanceRegistry,viewRegistry:viewRegistry});createNavigationHistory(navigationState,nativeBackButtonPlugin);return createAPI({lifecycle:lifecycle,navigationController:navigationController,navigationGraph:navigationGraph,navigationLayoutTree:navigationLayoutTree,renderTree:renderTree,renderingStatusController:renderingStatusController,rootNavigation:rootNavigation})};exports.CHANGE_ROOT_NAVIGATION_TYPE_NAME=CHANGE_ROOT_NAVIGATION_TYPE_NAME;exports.MENU_NAVIGATION_LAYOUT_NAME=MENU_NAVIGATION_LAYOUT_NAME;exports.MODALS_NAVIGATION_LAYOUT_NAME=MODALS_NAVIGATION_LAYOUT_NAME;exports.MODAL_CLOSE_NAVIGATION_TYPE_NAME=MODAL_CLOSE_NAVIGATION_TYPE_NAME;exports.MODAL_OPEN_NAVIGATION_TYPE_NAME=MODAL_OPEN_NAVIGATION_TYPE_NAME;exports.POP_NAVIGATION_TYPE_NAME=POP_NAVIGATION_TYPE_NAME;exports.PUSH_NAVIGATION_TYPE_NAME=PUSH_NAVIGATION_TYPE_NAME;exports.REPLACE_NAVIGATION_TYPE_NAME=REPLACE_NAVIGATION_TYPE_NAME;exports.ROOT_NAVIGATION_TYPE_NAME=ROOT_NAVIGATION_TYPE_NAME;exports.STACK_NAVIGATION_LAYOUT_NAME=STACK_NAVIGATION_LAYOUT_NAME;exports.TABS_NAVIGATION_LAYOUT_NAME=TABS_NAVIGATION_LAYOUT_NAME;exports.createApplicationShell=createApplicationShell;exports.createEventEmitter=createEventEmitter})(this["@backbase/hsdk-app-shell"]=this["@backbase/hsdk-app-shell"]||{});
