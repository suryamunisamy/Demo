// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PlacesClient2
import Backbase
import ClientCommon
import Foundation
import Swift
public struct APIHelper {
  public static func rejectNil(_ source: [Swift.String : Any?]) -> [Swift.String : Any]?
  public static func rejectNilHeaders(_ source: [Swift.String : Any?]) -> [Swift.String : Swift.String]
  public static func convertBoolToString(_ source: [Swift.String : Any]?) -> [Swift.String : Any]?
  public static func mapValueToPathItem(_ source: Any) -> Any
  public static func mapValuesToQueryItems(_ source: [Swift.String : Any?]) -> [Foundation.URLQueryItem]?
}
public struct BadRequestError : Swift.Codable, Swift.Equatable {
  public var message: Swift.String
  public var errors: [PlacesClient2.ErrorItem]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of BadRequestError.Builder class.")
  public init(message: Swift.String, errors: [PlacesClient2.ErrorItem]? = nil)
  final public class Builder : Swift.Equatable {
    final public let message: Swift.String
    final public var errors: [PlacesClient2.ErrorItem]? {
      get
    }
    public init(message: Swift.String)
    final public func set(errors: [PlacesClient2.ErrorItem]?) -> Self
    final public func build() -> PlacesClient2.BadRequestError
    public static func == (lhs: PlacesClient2.BadRequestError.Builder, rhs: PlacesClient2.BadRequestError.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: PlacesClient2.BadRequestError, rhs: PlacesClient2.BadRequestError) -> Swift.Bool
}
@_hasMissingDesignatedInitializers open class CodableHelper {
  public static var dateTimeFormatter: Foundation.DateFormatter {
    get
    set
  }
  public static var dateFormatter: Foundation.DateFormatter {
    get
    set
  }
  public static var jsonDecoder: Foundation.JSONDecoder {
    get
    set
  }
  public static var jsonEncoder: Foundation.JSONEncoder {
    get
    set
  }
  open class func decodeDate<T>(from container: Swift.KeyedDecodingContainer<T>, forKey: T) throws -> Foundation.Date where T : Swift.CodingKey
  open class func decodeDateIfPresent<T>(from container: Swift.KeyedDecodingContainer<T>, forKey: T) throws -> Foundation.Date? where T : Swift.CodingKey
  open class func decodeDateTime<T>(from container: Swift.KeyedDecodingContainer<T>, forKey: T) throws -> Foundation.Date where T : Swift.CodingKey
  open class func decodeDateTimeIfPresent<T>(from container: Swift.KeyedDecodingContainer<T>, forKey: T) throws -> Foundation.Date? where T : Swift.CodingKey
  open class func decode<T>(_ type: T.Type, from data: Foundation.Data) -> Swift.Result<T, Swift.Error> where T : Swift.Decodable
  open class func encode<T>(_ value: T) -> Swift.Result<Foundation.Data, Swift.Error> where T : Swift.Encodable
  @objc deinit
}
@_hasMissingDesignatedInitializers open class Configuration {
  @available(*, unavailable, message: "To set a different date format, use CodableHelper.dateFormatter instead.")
  public static var dateFormat: Swift.String
  @objc deinit
}
public struct ErrorItem : Swift.Codable, Swift.Equatable {
  public var message: Swift.String?
  public var key: Swift.String?
  public var context: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of ErrorItem.Builder class.")
  public init(message: Swift.String? = nil, key: Swift.String? = nil, context: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var message: Swift.String? {
      get
    }
    final public var key: Swift.String? {
      get
    }
    final public var context: [Swift.String : Swift.String]? {
      get
    }
    public init()
    final public func set(message: Swift.String?) -> Self
    final public func set(key: Swift.String?) -> Self
    final public func set(context: [Swift.String : Swift.String]?) -> Self
    final public func build() -> PlacesClient2.ErrorItem
    public static func == (lhs: PlacesClient2.ErrorItem.Builder, rhs: PlacesClient2.ErrorItem.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: PlacesClient2.ErrorItem, rhs: PlacesClient2.ErrorItem) -> Swift.Bool
}
extension String : Swift.CodingKey {
  public var stringValue: Swift.String {
    get
  }
  public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
}
extension KeyedEncodingContainerProtocol {
  public mutating func encodeArray<T>(_ values: [T], forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeArrayIfPresent<T>(_ values: [T]?, forKey key: Self.Key) throws where T : Swift.Encodable
  public mutating func encodeMap<T>(_ pairs: [Self.Key : T]) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
  public mutating func encodeMapIfPresent<T>(_ pairs: [Self.Key : T]?) throws where T : Swift.Encodable, Self.Key : Swift.Hashable
}
extension KeyedDecodingContainerProtocol {
  public func decodeArray<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T] where T : Swift.Decodable
  public func decodeArrayIfPresent<T>(_ type: T.Type, forKey key: Self.Key) throws -> [T]? where T : Swift.Decodable
  public func decodeMap<T>(_ type: T.Type, excludedKeys: Swift.Set<Self.Key>) throws -> [Self.Key : T] where T : Swift.Decodable, Self.Key : Swift.Hashable
}
public struct Hour : Swift.Codable, Swift.Equatable {
  public var day: Swift.Int
  public var _open: Swift.String
  public var close: Swift.String
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of Hour.Builder class.")
  public init(day: Swift.Int, _open: Swift.String, close: Swift.String, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let day: Swift.Int
    final public let _open: Swift.String
    final public let close: Swift.String
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(day: Swift.Int, _open: Swift.String, close: Swift.String)
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> PlacesClient2.Hour
    public static func == (lhs: PlacesClient2.Hour.Builder, rhs: PlacesClient2.Hour.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: PlacesClient2.Hour, rhs: PlacesClient2.Hour) -> Swift.Bool
  public enum CodingKeys : Swift.String, Swift.CodingKey, Swift.CaseIterable {
    case day
    case _open
    case close
    case additions
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
    public typealias AllCases = [PlacesClient2.Hour.CodingKeys]
    public static var allCases: [PlacesClient2.Hour.CodingKeys] {
      get
    }
  }
}
public struct InternalServerError : Swift.Codable, Swift.Equatable {
  public var message: Swift.String?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of InternalServerError.Builder class.")
  public init(message: Swift.String? = nil)
  final public class Builder : Swift.Equatable {
    final public var message: Swift.String? {
      get
    }
    public init()
    final public func set(message: Swift.String?) -> Self
    final public func build() -> PlacesClient2.InternalServerError
    public static func == (lhs: PlacesClient2.InternalServerError.Builder, rhs: PlacesClient2.InternalServerError.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: PlacesClient2.InternalServerError, rhs: PlacesClient2.InternalServerError) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class OpenISO8601DateFormatter : Foundation.DateFormatter {
  @objc override dynamic public func date(from string: Swift.String) -> Foundation.Date?
  @objc deinit
}
public struct Place : Swift.Codable, Swift.Equatable {
  public var id: Swift.String
  public var name: Swift.String?
  public var address: PlacesClient2.PlaceAddress?
  public var hours: [PlacesClient2.Hour]?
  public var latitude: Swift.Double
  public var longitude: Swift.Double
  public var placeType: Swift.String?
  public var services: [Swift.String]?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of Place.Builder class.")
  public init(id: Swift.String, name: Swift.String? = nil, address: PlacesClient2.PlaceAddress? = nil, hours: [PlacesClient2.Hour]? = nil, latitude: Swift.Double, longitude: Swift.Double, placeType: Swift.String? = nil, services: [Swift.String]? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public let id: Swift.String
    final public var name: Swift.String? {
      get
    }
    final public var address: PlacesClient2.PlaceAddress? {
      get
    }
    final public var hours: [PlacesClient2.Hour]? {
      get
    }
    final public let latitude: Swift.Double
    final public let longitude: Swift.Double
    final public var placeType: Swift.String? {
      get
    }
    final public var services: [Swift.String]? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init(id: Swift.String, latitude: Swift.Double, longitude: Swift.Double)
    final public func set(name: Swift.String?) -> Self
    final public func set(address: PlacesClient2.PlaceAddress?) -> Self
    final public func set(hours: [PlacesClient2.Hour]?) -> Self
    final public func set(placeType: Swift.String?) -> Self
    final public func set(services: [Swift.String]?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> PlacesClient2.Place
    public static func == (lhs: PlacesClient2.Place.Builder, rhs: PlacesClient2.Place.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: PlacesClient2.Place, rhs: PlacesClient2.Place) -> Swift.Bool
}
public struct PlaceAddress : Swift.Codable, Swift.Equatable {
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var addressLine3: Swift.String?
  public var postalCode: Swift.String?
  public var country: Swift.String?
  public var additions: [Swift.String : Swift.String]?
  @available(*, deprecated, message: "This initializer is deprecated, use the initializer and the setters of PlaceAddress.Builder class.")
  public init(addressLine1: Swift.String? = nil, addressLine2: Swift.String? = nil, addressLine3: Swift.String? = nil, postalCode: Swift.String? = nil, country: Swift.String? = nil, additions: [Swift.String : Swift.String]? = nil)
  final public class Builder : Swift.Equatable {
    final public var addressLine1: Swift.String? {
      get
    }
    final public var addressLine2: Swift.String? {
      get
    }
    final public var addressLine3: Swift.String? {
      get
    }
    final public var postalCode: Swift.String? {
      get
    }
    final public var country: Swift.String? {
      get
    }
    final public var additions: [Swift.String : Swift.String]? {
      get
    }
    public init()
    final public func set(addressLine1: Swift.String?) -> Self
    final public func set(addressLine2: Swift.String?) -> Self
    final public func set(addressLine3: Swift.String?) -> Self
    final public func set(postalCode: Swift.String?) -> Self
    final public func set(country: Swift.String?) -> Self
    final public func set(additions: [Swift.String : Swift.String]?) -> Self
    final public func build() -> PlacesClient2.PlaceAddress
    public static func == (lhs: PlacesClient2.PlaceAddress.Builder, rhs: PlacesClient2.PlaceAddress.Builder) -> Swift.Bool
    @objc deinit
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: PlacesClient2.PlaceAddress, rhs: PlacesClient2.PlaceAddress) -> Swift.Bool
}
public protocol PlacesAPIProtocol {
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetPlacesRequestParams class.")
  func getPlacesCall(latitude: Swift.Double, longitude: Swift.Double, radius: Swift.Double, type: Swift.String?, types: [Swift.String]?) throws -> ClientCommon.Call<[PlacesClient2.Place]>
  func getPlacesCall(params: PlacesClient2.GetPlacesRequestParams) throws -> ClientCommon.Call<[PlacesClient2.Place]>
}
@objc @_inheritsConvenienceInitializers public class PlacesAPI : ObjectiveC.NSObject, DBSClient, PlacesClient2.PlacesAPIProtocol {
  @objc public var dataProvider: DBSDataProvider?
  @objc public var baseURL: Foundation.URL
  @objc override dynamic public init()
  required public init(dataProvider: DBSDataProvider, baseURL: Foundation.URL)
  @available(*, deprecated, message: "This method is deprecated in favor of the alternative method with GetPlacesRequestParams class.")
  open func getPlacesCall(latitude: Swift.Double, longitude: Swift.Double, radius: Swift.Double, type: Swift.String? = nil, types: [Swift.String]? = nil) throws -> ClientCommon.Call<[PlacesClient2.Place]>
  open func getPlacesCall(params: PlacesClient2.GetPlacesRequestParams) throws -> ClientCommon.Call<[PlacesClient2.Place]>
  @objc deinit
}
public struct GetPlacesRequestParams : Swift.Equatable {
  public let latitude: Swift.Double
  public let longitude: Swift.Double
  public let radius: Swift.Double
  public let type: Swift.String?
  public let types: [Swift.String]?
  final public class Builder : Swift.Equatable {
    final public let latitude: Swift.Double
    final public let longitude: Swift.Double
    final public let radius: Swift.Double
    final public var type: Swift.String? {
      get
    }
    final public var types: [Swift.String]? {
      get
    }
    public init(latitude: Swift.Double, longitude: Swift.Double, radius: Swift.Double)
    final public func set(type: Swift.String?) -> Self
    final public func set(types: [Swift.String]?) -> Self
    final public func build() -> PlacesClient2.GetPlacesRequestParams
    public static func == (lhs: PlacesClient2.GetPlacesRequestParams.Builder, rhs: PlacesClient2.GetPlacesRequestParams.Builder) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: PlacesClient2.GetPlacesRequestParams, rhs: PlacesClient2.GetPlacesRequestParams) -> Swift.Bool
}
extension PlacesClient2.Hour.CodingKeys : Swift.Equatable {}
extension PlacesClient2.Hour.CodingKeys : Swift.Hashable {}
extension PlacesClient2.Hour.CodingKeys : Swift.RawRepresentable {}
