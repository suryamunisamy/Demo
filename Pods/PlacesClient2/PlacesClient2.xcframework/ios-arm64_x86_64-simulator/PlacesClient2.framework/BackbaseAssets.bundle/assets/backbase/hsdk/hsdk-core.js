/**
 * Name: hsdk-core
 * Description: Web API of Mobile SDK
 * Version: 1.10.0
 * SHA-1: f83846c5e1c0572ca6a1fa5698f8a14dbbed2d0c
 */
(function(exports){"use strict";var globalContext=typeof global!=="undefined"?global:window;var createObject=Object.create;var getUserAgent=function(){return globalContext.navigator&&globalContext.navigator.userAgent||""};var isIOS=function(){return/AppleWebKit/i.test(getUserAgent())};var EventOrigin;(function(EventOrigin){EventOrigin["System"]="SYSTEM";EventOrigin["Web"]="WEB"})(EventOrigin||(EventOrigin={}));var BridgePlatform;(function(BridgePlatform){BridgePlatform["Android"]="Android";BridgePlatform["IOS"]="iOS"})(BridgePlatform||(BridgePlatform={}));var createAndroidBridge=function(){var bridgePlatform=BridgePlatform.Android;var getNativeAndroidBridge=function(){return globalContext.mobile};var itemLoaded=function(time){getNativeAndroidBridge().itemLoaded(time)};var publish=function(eventName,payload,eventOrigin){getNativeAndroidBridge().publish(eventName,payload,eventOrigin)};var reload=function(){getNativeAndroidBridge().reload()};var resize=function(width,height){getNativeAndroidBridge().resize(width,height)};var scrollTo=function(x,y){getNativeAndroidBridge().scrollTo(x,y)};var subscribe=function(eventName){getNativeAndroidBridge().subscribe(eventName)};var unsubscribe=function(eventName){getNativeAndroidBridge().unsubscribe(eventName)};return{bridgePlatform:bridgePlatform,itemLoaded:itemLoaded,publish:publish,reload:reload,resize:resize,scrollTo:scrollTo,subscribe:subscribe,unsubscribe:unsubscribe}};var isArray=Array.isArray;var isFunction=function(testValue){return typeof testValue==="function"};var isObject=function(testValue){return testValue!==null&&typeof testValue==="object"&&!isArray(testValue)};var isString=function(testValue){return typeof testValue==="string"};var generateUid=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(c){var r=Math.random()*16|0;var v=c==="x"?r:r&3|8;return v.toString(16)}))};var createIOSBridge=function(getPubsub){var bridgePlatform=BridgePlatform.IOS;var encodeURIExtras=function(str){return encodeURIComponent(str).replace(/[!()*]/g,(function(match){return"%"+match.charCodeAt(0).toString(16)})).replace(/[']/g,(function(){return"\\'"}))};var appendElement=function(element,target){target=target||globalContext.document.documentElement;target.appendChild(element)};var removeElement=function(element){var parent=element.parentNode;if(parent){parent.removeChild(element)}};var addIframe=function(src){var iframe=globalContext.document.createElement("IFRAME");iframe.setAttribute("src",src);appendElement(iframe);removeElement(iframe)};var addPluginIframe=function(pluginName,pluginMethod,params){params=encodePluginParams(params);addIframe("bb-plugin://"+("?plugin="+encodeURIExtras(pluginName))+("&method="+encodeURIExtras(pluginMethod))+("&params="+params.join("&params=")))};var encodePluginParams=function(params){return params.map((function(param){return encodeURIExtras(param)}))};var stringifyPluginParams=function(params){return params.map((function(param){return isObject(param)||isArray(param)?JSON.stringify(param):param}))};var callPlugin=function(pluginName,pluginMethod,args,onSuccess,onError){var pubsub=getPubsub();var pluginCallbackUid=generateUid();var baseEventName=pluginName+"."+pluginMethod+"."+pluginCallbackUid;var successEventName="plugin.success."+baseEventName;var errorEventName="plugin.error."+baseEventName;args=stringifyPluginParams(args);var subscribeToPluginEvents=function(){pubsub.subscribe(successEventName,handlePluginSuccessEvent);pubsub.subscribe(errorEventName,handlePluginErrorEvent)};var unsubscribeFromPluginEvents=function(){pubsub.unsubscribe(successEventName,handlePluginSuccessEvent);pubsub.unsubscribe(errorEventName,handlePluginErrorEvent)};var handlePluginSuccessEvent=function(response){if(!response.keep){unsubscribeFromPluginEvents()}if(isFunction(onSuccess)){onSuccess(response.data)}};var handlePluginErrorEvent=function(response){if(!response.keep){unsubscribeFromPluginEvents()}if(isFunction(onError)){onError(response.data)}};subscribeToPluginEvents();addPluginIframe(pluginName,pluginMethod,[pluginCallbackUid].concat(args));return pluginCallbackUid};var itemLoaded=function(time){addIframe("bb-loaded://?time="+time)};var publish=function(eventName,payload,eventOrigin){addIframe("bb-publish://?event="+encodeURIExtras(eventName)+("&type="+encodeURIExtras(eventOrigin))+("&payload="+encodeURIExtras(payload)))};var reload=function(){addIframe("bb-reload://")};var resize=function(width,height){addIframe("bb-resize://?w="+width+"&h="+height)};var scrollTo=function(x,y){addIframe("bb-scroll://?x="+x+"&y="+y)};var subscribe=function(eventName){addIframe("bb-subscribe://?event="+encodeURIExtras(eventName))};var unsubscribe=function(eventName){addIframe("bb-unsubscribe://?event="+encodeURIExtras(eventName))};return{bridgePlatform:bridgePlatform,callPlugin:callPlugin,itemLoaded:itemLoaded,publish:publish,reload:reload,resize:resize,scrollTo:scrollTo,subscribe:subscribe,unsubscribe:unsubscribe}};var createBridge=function(isIOS){return isIOS?createIOSBridge(getPubsub):createAndroidBridge()};var bridge;var getBridge=function(){if(!bridge){bridge=createBridge(isIOS())}return bridge};var createPlainError=function(message){return new Error(message)};var createPlainTypeError=function(message){return new TypeError(message)};var createErrorFactory=function(componentName){return function(message){return createPlainError("["+componentName+"] "+message)}};var createTypeErrorFactory=function(componentName){return function(message){return createPlainTypeError("["+componentName+"] "+message)}};var createTypeError=createTypeErrorFactory("hsdk-core");var throwIfInvalidEventName=function(errorPrefix,eventName){if(!isString(eventName)){throw createTypeError(errorPrefix+": Expected the name of the event to be a string, "+("but got '"+typeof eventName+"'"))}if(eventName.trim().length<1){throw createTypeError(errorPrefix+": The name of the event must contain at least 1 character")}};var throwIfInvalidEventListener=function(errorPrefix,eventListener){if(!isFunction(eventListener)){throw createTypeError(errorPrefix+": Expected the event listener to be a function, "+("but got '"+typeof eventListener+"'"))}};var throwIfInvalidEventPayload=function(errorPrefix,eventPayload){if(!eventPayload){throw createTypeError(errorPrefix+": Expected a payload, but got '"+eventPayload+"'")}};var throwIfInvalidEventOrigin=function(errorPrefix,eventOrigin){if(eventOrigin&&eventOrigin!==EventOrigin.Web&&eventOrigin!==EventOrigin.System){throw createTypeError(errorPrefix+": Expected the eventOrigin parameter to be 'WEB' or 'SYSTEM', "+("but got '"+eventOrigin+"'"))}};var createEventBus=function(instanceName,bridge){var eventEmitter=Object.create(null);var name=instanceName.toString();var all=Object.create(null);var getOrCreateListeners=function(eventName){var listeners=all[eventName];if(!listeners){listeners=[];all[eventName]=listeners}return listeners};var publishToNativeIfNeeded=function(eventName,payload,eventOrigin){var payloadString=JSON.stringify(payload);if(eventOrigin!==EventOrigin.System){bridge.publish(eventName,payloadString,eventOrigin)}};var publish=function(eventName,payload){var nativeExtraArguments=[];for(var _i=2;_i<arguments.length;_i++){nativeExtraArguments[_i-2]=arguments[_i]}var errorPrefix="Could not publish the event";var eventOrigin=nativeExtraArguments[1];throwIfInvalidEventName(errorPrefix,eventName);throwIfInvalidEventPayload(errorPrefix,payload);throwIfInvalidEventOrigin(errorPrefix,eventOrigin);publishToNativeIfNeeded(eventName,payload,eventOrigin);var listeners=all[eventName];if(listeners){listeners.slice().forEach((function(listener){listener(payload)}))}};var subscribe=function(eventName,eventListener){var errorPrefix="Could not subscribe to the event";throwIfInvalidEventName(errorPrefix,eventName);throwIfInvalidEventListener(errorPrefix,eventListener);var listeners=getOrCreateListeners(eventName);listeners.push(eventListener);bridge.subscribe(eventName)};var unsubscribe=function(eventName,eventListener){var errorPrefix="Could not unsubscribe to the event";throwIfInvalidEventName(errorPrefix,eventName);throwIfInvalidEventListener(errorPrefix,eventListener);var listeners=all[eventName];if(listeners){var idx=listeners.indexOf(eventListener);if(idx!==-1){listeners.splice(idx,1);bridge.unsubscribe(eventName)}}};return Object.assign(eventEmitter,{name:name,publish:publish,subscribe:subscribe,unsubscribe:unsubscribe})};var pubsub;var getPubsub=function(){if(!pubsub){pubsub=createEventBus("pubsub",getBridge())}return pubsub};var mobile=getBridge();var pubsub$1=getPubsub();Object.assign(globalContext,{cxp:{mobile:mobile},gadgets:{pubsub:pubsub$1}});if(!globalContext.mobile){Object.assign(globalContext,{mobile:mobile})}var LogMethod;(function(LogMethod){LogMethod["Debug"]="debug";LogMethod["Error"]="error";LogMethod["Info"]="info";LogMethod["Warn"]="warn"})(LogMethod||(LogMethod={}));(function(LogLevel){LogLevel["All"]="all";LogLevel["Debug"]="debug";LogLevel["Error"]="error";LogLevel["Info"]="info";LogLevel["None"]="none";LogLevel["Warn"]="warn"})(exports.LogLevel||(exports.LogLevel={}));var createExtendedConsole=function(nativeConsole){var logBuffer=[];var nativeMethods={debug:nativeConsole.debug,error:nativeConsole.error,info:nativeConsole.info,log:nativeConsole.log,warn:nativeConsole.warn};var callNativeMethod=function(methodName,argsToPrint){var _a;return(_a=nativeMethods[methodName]).call.apply(_a,[nativeConsole].concat(argsToPrint))};var addCallToBuffer=function(methodName,argsToPrint){return logBuffer.push([methodName,argsToPrint])};var createMethod=function(methodName){return function(){var argsToPrint=[];for(var _i=0;_i<arguments.length;_i++){argsToPrint[_i]=arguments[_i]}addCallToBuffer(methodName,argsToPrint);callNativeMethod(methodName,argsToPrint)}};var debug=createMethod("debug");var error=createMethod("error");var info=createMethod("info");var log=createMethod("log");var warn=createMethod("warn");var flush=function(){logBuffer.forEach((function(entry){var _a;var logMethod=entry[0],argsToPrint=entry[1];(_a=nativeMethods[logMethod]).call.apply(_a,[nativeConsole].concat(argsToPrint))}));logBuffer=[]};return{debug:debug,error:error,flush:flush,info:info,log:log,warn:warn}};var nativeConsole=globalContext.console;var nativeDebug=nativeConsole.debug;var nativeError=nativeConsole.error;var nativeInfo=nativeConsole.info;var nativeLog=nativeConsole.log;var nativeWarn=nativeConsole.warn;var enableExtendedConsole=function(){var extendedConsole=createExtendedConsole(nativeConsole);nativeConsole.debug=extendedConsole.debug;nativeConsole.error=extendedConsole.error;nativeConsole.info=extendedConsole.info;nativeConsole.log=extendedConsole.log;nativeConsole.warn=extendedConsole.warn;nativeConsole.flush=function(){extendedConsole.flush();nativeConsole.debug=nativeDebug;nativeConsole.error=nativeError;nativeConsole.info=nativeInfo;nativeConsole.log=nativeLog;nativeConsole.warn=nativeWarn}};var currentLogLevel=exports.LogLevel.All;var setLogLevel=function(logLevel){currentLogLevel=logLevel};var getLogLevel=function(){return currentLogLevel};var createTypeError$1=createTypeErrorFactory("hsdk-core");var throwIfInvalidInstanceName=function(errorPrefix,instanceName){if(!isString(instanceName)){throw createTypeError$1(errorPrefix+": Expected a string, but got '"+typeof instanceName+"'")}if(instanceName.trim().length<1){throw createTypeError$1(errorPrefix+": The name of the logger must contain at least 1 character")}};var SUPPORTED_LOG_LEVELS=[exports.LogLevel.All,exports.LogLevel.Debug,exports.LogLevel.Error,exports.LogLevel.Info,exports.LogLevel.None,exports.LogLevel.Warn];var _a,_b;var MethodToLogLevel=(_a={},_a[LogMethod.Debug]=exports.LogLevel.Debug,_a[LogMethod.Error]=exports.LogLevel.Error,_a[LogMethod.Info]=exports.LogLevel.Info,_a[LogMethod.Warn]=exports.LogLevel.Warn,_a);var LogLevelSeverity=(_b={},_b[exports.LogLevel.None]=100,_b[exports.LogLevel.Error]=50,_b[exports.LogLevel.Warn]=30,_b[exports.LogLevel.Info]=20,_b[exports.LogLevel.Debug]=10,_b[exports.LogLevel.All]=0,_b);var createLogger=function(instanceName){var errorPrefix="Could not create a logger";throwIfInvalidInstanceName(errorPrefix,instanceName);var logger=Object.create(null);var name=instanceName;var print=function(logMethod,message,args){var messageLogLevel=MethodToLogLevel[logMethod];var messageLogLevelSeverity=LogLevelSeverity[messageLogLevel];var logLevelSeverityThreshold=LogLevelSeverity[getLogLevel()];var shouldSuppressMessage=Boolean(messageLogLevelSeverity<logLevelSeverityThreshold);if(!shouldSuppressMessage){message=String(message);console[logMethod].apply(console,["["+name+"] "+message].concat(args))}};var debug=function(message){var args=[];for(var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i]}print(LogMethod.Debug,message,args)};var error=function(message){var args=[];for(var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i]}print(LogMethod.Error,message,args)};var info=function(message){var args=[];for(var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i]}print(LogMethod.Info,message,args)};var warn=function(message){var args=[];for(var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i]}print(LogMethod.Warn,message,args)};var flush=function(){var flushConsole=console.flush;if(flushConsole){flushConsole()}};return Object.assign(logger,{debug:debug,error:error,flush:flush,info:info,warn:warn})};var logger=createLogger("hsdk-core");var currentConfig=null;var getConfig=function(){return currentConfig};var setConfig=function(config){currentConfig=config};var normalizeConfig=function(rawConfig){var apiRoot=rawConfig.apiRoot;if(apiRoot.startsWith("file://")){apiRoot="/api"}var debug=rawConfig.debug;var logLevel=rawConfig.logLevel;var portalName=rawConfig.portalName;var staticResourcesRoot=rawConfig.staticResourcesRoot;if(!staticResourcesRoot.startsWith("file://")){staticResourcesRoot=rawConfig.contextRoot+"/"+staticResourcesRoot}var version=rawConfig.version;return{apiRoot:apiRoot,debug:debug,logLevel:logLevel,portalName:portalName,staticResourcesRoot:staticResourcesRoot,version:version}};var createTypeError$2=createTypeErrorFactory("hsdk-core");var throwIfInvalidConfig=function(errorPrefix,rawConfig){if(!rawConfig){throw createTypeError$2(errorPrefix+": No config provided. Please make sure to pass the config "+"as the first parameter of the createHSDKCoreAPI function")}if(!isString(rawConfig.apiRoot)){throw createTypeError$2(errorPrefix+": Invalid parameter provided in the config: "+"Expected the `config.apiRoot` to be a string, "+("but got '"+typeof rawConfig.apiRoot+"' instead"))}if(!isString(rawConfig.logLevel)){throw createTypeError$2(errorPrefix+": Invalid parameter provided in the config: "+"Expected the `config.logLevel` to be a string, "+("but got '"+typeof rawConfig.logLevel+"' instead"))}if(!SUPPORTED_LOG_LEVELS.includes(rawConfig.logLevel)){var supportedLogLevelsString=SUPPORTED_LOG_LEVELS.map((function(level){return"'"+level+"'"})).join(", ");throw createTypeError$2(errorPrefix+": Invalid parameter provided in the config: "+("Expected the `config.logLevel` to be one of the following values: "+supportedLogLevelsString+", ")+("but got '"+rawConfig.logLevel+"' instead"))}if(!isString(rawConfig.staticResourcesRoot)){throw createTypeError$2(errorPrefix+": Invalid parameter provided in the config: "+"Expected the `config.staticResourcesRoot` to be a string, "+("but got '"+typeof rawConfig.staticResourcesRoot+"' instead"))}};var throwIfInvalidPlugins=function(errorPrefix,plugins){if(!isObject(plugins)){throw createTypeError$2(errorPrefix+": Invalid plugins provided: "+"Expected the plugins to be an object")}};var createAPI=function(members){var api=createObject(null);Object.keys(members).forEach((function(key){Object.defineProperty(api,key,{configurable:false,enumerable:true,value:members[key],writable:false})}));Object.freeze(api);return api};var createPluginsRegistry=function(plugins){var getPluginByName=function(pluginName){if({}.hasOwnProperty.call(plugins,pluginName)){return plugins[pluginName]}return null};var getPublicPlugins=function(){var publicPlugins={};Object.keys(plugins).forEach((function(pluginName){publicPlugins[pluginName]=plugins[pluginName]}));return createAPI(publicPlugins)};var getPublicPluginNames=function(){return Object.keys(getPublicPlugins())};logger.info("Registered native plugins:",getPublicPluginNames());return{getPluginByName:getPluginByName,getPublicPlugins:getPublicPlugins}};var domReady=function(){return new Promise((function(resolve){if(globalContext.document.readyState==="loading"){globalContext.document.addEventListener("DOMContentLoaded",(function(){resolve()}))}else{resolve()}}))};var createError=createErrorFactory("hsdk-core");var createDefaultRenderer=function(){return{name:"hsdk-renderer-default",renderItem:function(){throw createError("Could not render item: No renderer has been set. "+"Please make sure the renderer is included in the application config.")}}};var createTypeError$3=createTypeErrorFactory("hsdk-core");var throwIfInvalidCreateRenderer=function(errorPrefix,createRenderer){if(!isFunction(createRenderer)){throw createTypeError$3(errorPrefix+": Expected a function, but got '"+typeof createRenderer+"'")}};var throwIfInvalidRenderer=function(errorPrefix,renderer){if(!isObject(renderer)){throw createTypeError$3("Invalid renderer: Expected an object, but got '"+renderer+"'")}if(!isFunction(renderer.renderItem)){throw createTypeError$3("Invalid renderer: Please make sure that your renderer has a 'renderItem' function")}};var currentRenderer=createDefaultRenderer();var getCurrentRenderer=function(){return currentRenderer};var getRenderer=function(){return domReady().then(getCurrentRenderer)};var setRenderer=function(createRenderer){var errorPrefix="Could not set the renderer";throwIfInvalidCreateRenderer(errorPrefix,createRenderer);var config=getConfig();var renderer=createRenderer(config);throwIfInvalidRenderer(errorPrefix,renderer);currentRenderer=renderer;logger.info("Registered the renderer:",renderer.name)};var registerRenderer=function(createRenderer){logger.warn("The `registerRenderer()` method is deprecated. "+"Use the `setRenderer()` method instead.");return setRenderer(createRenderer)};var createHSDKCoreAPI=function(rawConfig,injectedNativePlugins){var errorPrefix="Could not initialize the library";throwIfInvalidConfig(errorPrefix,rawConfig);throwIfInvalidPlugins(errorPrefix,injectedNativePlugins);var debug=rawConfig.debug,logLevel=rawConfig.logLevel;if(debug){enableExtendedConsole()}var config=normalizeConfig(rawConfig);logger.debug("Set config:",config);setConfig(config);logger.debug("Set log level:",logLevel);setLogLevel(logLevel);logger.info("Initialized HSDK Core");var pluginsRegistry=createPluginsRegistry(injectedNativePlugins);return Object.create(null,{config:{value:config},createLogger:{value:createLogger},getRenderer:{value:getRenderer},plugins:{value:pluginsRegistry.getPublicPlugins()},pubsub:{value:getPubsub()},registerRenderer:{value:registerRenderer},setRenderer:{value:setRenderer}})};exports.create=createHSDKCoreAPI})(this["@backbase/hsdk-core"]=this["@backbase/hsdk-core"]||{});
