/**
 * Name: hsdk-core.browser
 * Description: Web API of Mobile SDK that works in a standalone browser
 * Version: 1.10.0
 * SHA-1: 6149e24a96115350581ddd0f0b7dba7074ac5a20
 */
this["hsdk-core"]=function(){"use strict";var LogMethod;(function(LogMethod){LogMethod["Debug"]="debug";LogMethod["Error"]="error";LogMethod["Info"]="info";LogMethod["Warn"]="warn"})(LogMethod||(LogMethod={}));var LogLevel;(function(LogLevel){LogLevel["All"]="all";LogLevel["Debug"]="debug";LogLevel["Error"]="error";LogLevel["Info"]="info";LogLevel["None"]="none";LogLevel["Warn"]="warn"})(LogLevel||(LogLevel={}));var currentRenderer;var mobileConfig={apiRoot:"/gateway/api",contextRoot:"/assets",debug:true,logLevel:LogLevel.Debug,portalName:"",staticResourcesRoot:"/assets/static/items",version:"6"};var registerRenderer=function(createRenderer){console.warn("[hsdk-core] The `registerRenderer()` method is deprecated. "+"Use the `setRenderer()` method instead.");currentRenderer=createRenderer(mobileConfig)};var setRenderer=function(createRenderer){currentRenderer=createRenderer(mobileConfig)};var hasOwnProperty=Object.prototype.hasOwnProperty;var assign=function(target,source){for(var propertyName in source){if(hasOwnProperty.call(source,propertyName)){target[propertyName]=source[propertyName]}}return target};var createEventBus=function(instanceName){var eventEmitter=Object.create(null);var name=instanceName.toString();var all=Object.create(null);var getOrCreateListeners=function(eventName){var listeners=all[eventName];if(!listeners){listeners=[];all[eventName]=listeners}return listeners};var publish=function(eventName,payload){if(typeof eventName!=="string"){throw new TypeError("[hsdk-core] Could not publish the event: "+("Expected the name of the event to be a string, but got '"+typeof eventName+"'"))}if(eventName.trim().length<1){throw new TypeError("[hsdk-core] Could not publish the event: The name of the event must contain at least 1 character")}if(!payload){throw new TypeError("[hsdk-core] Could not publish the event: Expected a payload, but got '"+payload+"'")}var listeners=all[eventName];if(listeners){listeners.slice().forEach((function(listener){listener(payload)}))}};var subscribe=function(eventName,eventListener){if(typeof eventName!=="string"){throw new TypeError("[hsdk-core] Could not subscribe to the event: "+("Expected the name of the event to be a string, but got '"+typeof eventName+"'"))}if(eventName.trim().length<1){throw new TypeError("[hsdk-core] Could not subscribe to the event: "+"The name of the event must contain at least 1 character")}if(typeof eventListener!=="function"){throw new TypeError("[hsdk-core] Could not subscribe to the event: "+("Expected the event listener to be a function, but got '"+typeof eventListener+"'"))}var listeners=getOrCreateListeners(eventName);listeners.push(eventListener)};var unsubscribe=function(eventName,eventListener){if(typeof eventName!=="string"){throw new TypeError("[hsdk-core] Could not unsubscribe to the event: "+("Expected the name of the event to be a string, but got '"+typeof eventName+"'"))}if(eventName.trim().length<1){throw new TypeError("[hsdk-core] Could not unsubscribe to the event: "+"The name of the event must contain at least 1 character")}if(typeof eventListener!=="function"){throw new TypeError("[hsdk-core] Could not unsubscribe to the event: "+("Expected the event listener to be a function, but got '"+typeof eventListener+"'"))}var listeners=all[eventName];if(listeners){var idx=listeners.indexOf(eventListener);if(idx!==-1){listeners.splice(idx,1)}}};return assign(eventEmitter,{name:name,publish:publish,subscribe:subscribe,unsubscribe:unsubscribe})};var hsdkCore_browser={config:mobileConfig,plugins:Object.create(null),pubsub:createEventBus("hsdk"),get renderer(){return currentRenderer},registerRenderer:registerRenderer,setRenderer:setRenderer};return hsdkCore_browser}();
